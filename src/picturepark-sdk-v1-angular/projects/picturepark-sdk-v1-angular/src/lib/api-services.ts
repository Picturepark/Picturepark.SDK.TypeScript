/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { PictureparkServiceBase } from './base.service';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { AuthService } from './auth.service';

export const PICTUREPARK_API_URL = new InjectionToken<string>('PICTUREPARK_API_URL');

@Injectable({
    providedIn: 'root'
})
export class BusinessProcessService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Search
     * @param businessProcessSearchRequest The business process request.
     * @return BusinessProcessSearchResult
     */
    search(businessProcessSearchRequest: BusinessProcessSearchRequest): Observable<BusinessProcessSearchResult> {
        let url_ = this.baseUrl + "/v1/businessProcesses/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(businessProcessSearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcessSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcessSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<BusinessProcessSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcessSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcessSearchResult>(<any>null);
    }

    /**
     * Wait for life cycles
     * @param processId The business process id.
     * @param lifeCycleIds (optional) Business process life cycles to wait for.
     * @param timeout (optional) The timeout to wait for completion.
     * @return BusinessProcessWaitForLifeCycleResult
     */
    waitForLifeCycles(processId: string, lifeCycleIds: BusinessProcessLifeCycle[] | null | undefined, timeout: string | null | undefined): Observable<BusinessProcessWaitForLifeCycleResult> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitLifeCycles?";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        if (lifeCycleIds !== undefined)
            lifeCycleIds && lifeCycleIds.forEach(item => { url_ += "lifeCycleIds=" + encodeURIComponent("" + item) + "&"; });
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWaitForLifeCycles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWaitForLifeCycles(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcessWaitForLifeCycleResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcessWaitForLifeCycleResult>><any>_observableThrow(response_);
        }));
    }

    protected processWaitForLifeCycles(response: HttpResponseBase): Observable<BusinessProcessWaitForLifeCycleResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcessWaitForLifeCycleResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcessWaitForLifeCycleResult>(<any>null);
    }

    /**
     * Wait for states
     * @param processId The business process id.
     * @param states (optional) Business process states to wait for.
     * @param timeout (optional) The timeout to wait for completion.
     * @return BusinessProcessWaitResult
     */
    waitForStates(processId: string, states: string[] | null | undefined, timeout: string | null | undefined): Observable<BusinessProcessWaitForStateResult> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitStates?";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        if (states !== undefined)
            states && states.forEach(item => { url_ += "states=" + encodeURIComponent("" + item) + "&"; });
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWaitForStates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWaitForStates(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcessWaitForStateResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcessWaitForStateResult>><any>_observableThrow(response_);
        }));
    }

    protected processWaitForStates(response: HttpResponseBase): Observable<BusinessProcessWaitForStateResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcessWaitForStateResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcessWaitForStateResult>(<any>null);
    }

    /**
     * Wait for completion
     * @param processId The business process id.
     * @param timeout (optional) The timeout to wait for completion.
     * @param waitForContinuationCompletion (optional) Waits for the completion of the continuation business process (if existing, recursively). Default to true.
     * @return BusinessProcessWaitResult
     */
    waitForCompletion(processId: string, timeout: string | null | undefined, waitForContinuationCompletion: boolean | undefined): Observable<BusinessProcessWaitForLifeCycleResult> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitCompletion?";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitForContinuationCompletion === null)
            throw new Error("The parameter 'waitForContinuationCompletion' cannot be null.");
        else if (waitForContinuationCompletion !== undefined)
            url_ += "waitForContinuationCompletion=" + encodeURIComponent("" + waitForContinuationCompletion) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processWaitForCompletion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWaitForCompletion(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcessWaitForLifeCycleResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcessWaitForLifeCycleResult>><any>_observableThrow(response_);
        }));
    }

    protected processWaitForCompletion(response: HttpResponseBase): Observable<BusinessProcessWaitForLifeCycleResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcessWaitForLifeCycleResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcessWaitForLifeCycleResult>(<any>null);
    }

    /**
     * Get details
     * @param processId The business process id.
     * @return BusinessProcessDetails
     */
    getDetails(processId: string): Observable<BusinessProcessDetails> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/details";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetails(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcessDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcessDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetDetails(response: HttpResponseBase): Observable<BusinessProcessDetails> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcessDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcessDetails>(<any>null);
    }

    /**
     * Get business process
     * @param processId The business process id.
     * @return BusinessProcess
     */
    get(processId: string): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Create business process
     * @param request The business process create request.
     * @return BusinessProcess
     */
    create(request: BusinessProcessCreateRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/businessProcesses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Change business process state
     * @param processId The business process id.
     * @param request The business process state change request.
     * @return BusinessProcess
     */
    changeState(processId: string, request: BusinessProcessStateChangeRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/state";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processChangeState(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeState(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processChangeState(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = BusinessProcessNotExternalException.fromJS(resultData403);
            return throwException("A server error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update business process notification
     * @param processId The business process id.
     * @param request The business process notification update request.
     */
    updateNotification(processId: string, request: BusinessProcessNotificationUpdateRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/notification";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNotification(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateNotification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = BusinessProcessNotExternalException.fromJS(resultData403);
            return throwException("A server error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Cancel business process
     * @param processId The business process id.
     */
    cancel(processId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/businessProcesses/{processId}/cancel";
        if (processId === undefined || processId === null)
            throw new Error("The parameter 'processId' must be defined.");
        url_ = url_.replace("{processId}", encodeURIComponent("" + processId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCancel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCancel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class BusinessRuleService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get the current business rule configuration
     * @return BusinessRuleConfiguration
     */
    getConfiguration(): Observable<BusinessRuleConfiguration> {
        let url_ = this.baseUrl + "/v1/businessrules/configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<BusinessRuleConfiguration>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessRuleConfiguration>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfiguration(response: HttpResponseBase): Observable<BusinessRuleConfiguration> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessRuleConfiguration.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessRuleConfiguration>(<any>null);
    }

    /**
     * Updates the business rule configuration.
     * @param request Request containing the new configuration.
     * @return Business process
     */
    updateConfiguration(request: BusinessRuleConfigurationUpdateRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/businessrules/configuration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateConfiguration(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ChannelService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get all channels
     * @return List of channel
     */
    getAll(): Observable<Channel[]> {
        let url_ = this.baseUrl + "/v1/channels";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<Channel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Channel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<Channel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Channel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Channel[]>(<any>null);
    }

    /**
     * Create channel
     * @param request The request containing information needed to create new channel.
     * @return Channel
     */
    create(request: ChannelCreateRequest): Observable<Channel> {
        let url_ = this.baseUrl + "/v1/channels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<Channel>><any>_observableThrow(e);
                }
            } else
                return <Observable<Channel>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<Channel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Channel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Channel>(<any>null);
    }

    /**
     * Get channel
     * @param id The channel ID.
     * @return Channel
     */
    get(id: string): Observable<Channel> {
        let url_ = this.baseUrl + "/v1/channels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Channel>><any>_observableThrow(e);
                }
            } else
                return <Observable<Channel>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Channel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Channel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Channel>(<any>null);
    }

    /**
     * Update channel
     * @param id ID of channel to update
     * @param request The request containing information needed to update the channel.
     * @return Updated channel
     */
    update(id: string, request: ChannelUpdateRequest): Observable<Channel> {
        let url_ = this.baseUrl + "/v1/channels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<Channel>><any>_observableThrow(e);
                }
            } else
                return <Observable<Channel>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<Channel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Channel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Channel>(<any>null);
    }

    /**
     * Delete channel
     * @param id ID of the channel that should be deleted.
     * @return OK
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/channels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ContentService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get content
     * @param contentId The content ID.
     * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
     * @return Content detail
     */
    get(contentId: string, resolveBehaviors: ContentResolveBehavior[] | null | undefined): Observable<ContentDetail> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContentDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetail>(<any>null);
    }

    /**
     * Delete content
     * @param contentId The ID of the content to delete.
     * @param forceReferenceRemoval (optional) A value indicating whether references to the content should be removed.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @return Ok
     */
    delete(contentId: string, forceReferenceRemoval: boolean | null | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (forceReferenceRemoval !== undefined)
            url_ += "forceReferenceRemoval=" + encodeURIComponent("" + forceReferenceRemoval) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get multiple contents
     * @param ids List of content IDs
     * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
     * @return List of Content detail
     */
    getMany(ids: string[] | null, resolveBehaviors: ContentResolveBehavior[] | null | undefined): Observable<ContentDetail[]> {
        let url_ = this.baseUrl + "/v1/contents?";
        if (ids === undefined)
            throw new Error("The parameter 'ids' must be defined.");
        else
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<ContentDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContentDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetail[]>(<any>null);
    }

    /**
     * Create content
     * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
     * @param allowMissingDependencies (optional) Allows creating contents that refer to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param contentCreateRequest Content create request.
     * @return The content details
     */
    create(resolveBehaviors: ContentResolveBehavior[] | null | undefined, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, contentCreateRequest: ContentCreateRequest): Observable<ContentDetail> {
        let url_ = this.baseUrl + "/v1/contents?";
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentCreateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ContentDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetail>(<any>null);
    }

    /**
     * Search contents
     * @param contentSearchRequest Content search request.
     * @return Content search result
     */
    search(contentSearchRequest: ContentSearchRequest): Observable<ContentSearchResult> {
        let url_ = this.baseUrl + "/v1/contents/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentSearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<ContentSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ContentSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentSearchResult>(<any>null);
    }

    /**
     * Aggregate contents
     * @param contentAggregationRequest Content aggregation request.
     * @return Object aggregation result
     */
    aggregate(contentAggregationRequest: ContentAggregationRequest): Observable<ObjectAggregationResult> {
        let url_ = this.baseUrl + "/v1/contents/aggregate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentAggregationRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAggregate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAggregate(<any>response_);
                } catch (e) {
                    return <Observable<ObjectAggregationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectAggregationResult>><any>_observableThrow(response_);
        }));
    }

    protected processAggregate(response: HttpResponseBase): Observable<ObjectAggregationResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectAggregationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectAggregationResult>(<any>null);
    }

    /**
     * Aggregate contents on channel
     * @param contentAggregationOnChannelRequest Content aggregation on channel request.
     * @return Object aggregation result
     */
    aggregateOnChannel(contentAggregationOnChannelRequest: ContentAggregationOnChannelRequest): Observable<ObjectAggregationResult> {
        let url_ = this.baseUrl + "/v1/contents/aggregateOnChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentAggregationOnChannelRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAggregateOnChannel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAggregateOnChannel(<any>response_);
                } catch (e) {
                    return <Observable<ObjectAggregationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectAggregationResult>><any>_observableThrow(response_);
        }));
    }

    protected processAggregateOnChannel(response: HttpResponseBase): Observable<ObjectAggregationResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectAggregationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectAggregationResult>(<any>null);
    }

    /**
     * Get content references
     * @param contentId The content ID whose references to retrieve.
     * @param contentReferencesRequest Content references request.
     * @return ContentReferencesResult
     */
    getReferences(contentId: string, contentReferencesRequest: ContentReferencesRequest): Observable<ContentReferencesResult> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/references/search";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentReferencesRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetReferences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferences(<any>response_);
                } catch (e) {
                    return <Observable<ContentReferencesResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentReferencesResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferences(response: HttpResponseBase): Observable<ContentReferencesResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentReferencesResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentReferencesResult>(<any>null);
    }

    /**
     * Get many content references
     * @param contentManyReferencesRequest Content many references request.
     * @return Content references result
     */
    getReferencesMany(contentManyReferencesRequest: ContentManyReferencesRequest): Observable<ContentReferencesResult> {
        let url_ = this.baseUrl + "/v1/contents/many/references/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentManyReferencesRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetReferencesMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferencesMany(<any>response_);
                } catch (e) {
                    return <Observable<ContentReferencesResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentReferencesResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferencesMany(response: HttpResponseBase): Observable<ContentReferencesResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentReferencesResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentReferencesResult>(<any>null);
    }

    /**
     * Create download link
     * @param request Content download link request
     * @return Download link
     */
    createDownloadLink(request: ContentDownloadLinkCreateRequest): Observable<DownloadLink> {
        let url_ = this.baseUrl + "/v1/contents/downloadLinks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateDownloadLink(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDownloadLink(<any>response_);
                } catch (e) {
                    return <Observable<DownloadLink>><any>_observableThrow(e);
                }
            } else
                return <Observable<DownloadLink>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDownloadLink(response: HttpResponseBase): Observable<DownloadLink> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DownloadLink.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DownloadLink>(<any>null);
    }

    /**
     * Download content
     * @param contentId The content ID.
     * @param outputFormatId The output format ID.
     * @param width (optional) Optional width in pixels to resize image.
     * @param height (optional) Optional height in pixels to resize image.
     * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000).
     * @return Http response message
     */
    download(contentId: string, outputFormatId: string, width: number | null | undefined, height: number | null | undefined, range: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/contents/downloads/{contentId}/{outputFormatId}?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (outputFormatId === undefined || outputFormatId === null)
            throw new Error("The parameter 'outputFormatId' must be defined.");
        url_ = url_.replace("{outputFormatId}", encodeURIComponent("" + outputFormatId)); 
        if (width !== undefined)
            url_ += "width=" + encodeURIComponent("" + width) + "&"; 
        if (height !== undefined)
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "range": range !== undefined && range !== null ? "" + range : "", 
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownload(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownload(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Download thumbnail
     * @param contentId The content ID.
     * @param size Thumbnail size. Either small, medium or large.
     * @param width (optional) Optional width in pixels to resize image.
     * @param height (optional) Optional height in pixels to resize image.
     * @return Http response message
     */
    downloadThumbnail(contentId: string, size: ThumbnailSize, width: number | null | undefined, height: number | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/contents/thumbnails/{contentId}/{size}?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (size === undefined || size === null)
            throw new Error("The parameter 'size' must be defined.");
        url_ = url_.replace("{size}", encodeURIComponent("" + size)); 
        if (width !== undefined)
            url_ += "width=" + encodeURIComponent("" + width) + "&"; 
        if (height !== undefined)
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadThumbnail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadThumbnail(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadThumbnail(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Create multiple contents
     * @param contentCreateManyRequest Content create many request.
     * @return Business process
     */
    createMany(contentCreateManyRequest: ContentCreateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentCreateManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete multiple contents
     * @param deleteManyRequest Delete many request.
     * @return Business process
     */
    deleteMany(deleteManyRequest: ContentDeleteManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete multiple contents - by filter
     * @param deleteManyFilterRequest Delete many by filter request.
     * @return Business process
     */
    deleteManyByFilter(deleteManyFilterRequest: ContentDeleteManyFilterRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/delete/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteManyFilterRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteManyByFilter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteManyByFilter(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteManyByFilter(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Restore content
     * @param contentId The content ID.
     * @param allowMissingDependencies (optional) Allows restoring contents that refer to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @return Ok
     */
    restore(contentId: string, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/restore?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRestore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRestore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Restore multiple contents
     * @param restoreManyRequest Content restore many request.
     * @return Business process
     */
    restoreMany(restoreManyRequest: ContentRestoreManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/restore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(restoreManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRestoreMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestoreMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processRestoreMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update content file
     * @param contentId The ID of the content to replace.
     * @param updateRequest Content file update request
     * @return Business process
     */
    updateFile(contentId: string, updateRequest: ContentFileUpdateRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/file";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFile(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFile(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update content metadata
     * @param contentId The content ID.
     * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
     * @param allowMissingDependencies (optional) Allows storing references to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param updateRequest Content metadata update request.
     * @return Content detail
     */
    updateMetadata(contentId: string, resolveBehaviors: ContentResolveBehavior[] | null | undefined, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, updateRequest: ContentMetadataUpdateRequest): Observable<ContentDetail> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/metadata?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMetadata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMetadata(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMetadata(response: HttpResponseBase): Observable<ContentDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetail>(<any>null);
    }

    /**
     * Update content permissions
     * @param contentId The content ID.
     * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param updateRequest Content permissions update request.
     * @return Content detail
     */
    updatePermissions(contentId: string, resolveBehaviors: ContentResolveBehavior[] | null | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, updateRequest: ContentPermissionsUpdateRequest): Observable<ContentDetail> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/permissions?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdatePermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePermissions(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePermissions(response: HttpResponseBase): Observable<ContentDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetail>(<any>null);
    }

    /**
     * Update multiple content metadata
     * @param updateRequest Content metadata update many request.
     * @return Business process
     */
    updateMetadataMany(updateRequest: ContentMetadataUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/metadata";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMetadataMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMetadataMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMetadataMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update multiple contents permissions
     * @param updateManyRequest Content permissions update many request.
     * @return Business process
     */
    updatePermissionsMany(updateManyRequest: ContentPermissionsUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/permissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdatePermissionsMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePermissionsMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePermissionsMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Transfer content ownership
     * @param contentId The content ID.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param updateRequest Content ownership transfer request.
     * @return Ok
     */
    transferOwnership(contentId: string, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, updateRequest: ContentOwnershipTransferRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/contents/{contentId}/ownership?";
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnership(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnership(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnership(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Transfer multiple contents ownerships
     * @param contentOwnershipTransferManyRequest Content ownership transfer many request.
     * @return Business process
     */
    transferOwnershipMany(contentOwnershipTransferManyRequest: ContentOwnershipTransferManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/many/ownership";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contentOwnershipTransferManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnershipMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnershipMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnershipMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Batch update content fields - by IDs
     * @param updateRequest Content fields batch update request.
     * @return Business process
     */
    batchUpdateFieldsByIds(updateRequest: ContentFieldsBatchUpdateRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/batches/fields/ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBatchUpdateFieldsByIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchUpdateFieldsByIds(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processBatchUpdateFieldsByIds(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Batch update fields - by filter
     * @param updateRequest Content fields batch update filter request. It contains the changes that need to be applied to the contents and the filter request to identify the contents.
     * @return Business process
     */
    batchUpdateFieldsByFilter(updateRequest: ContentFieldsBatchUpdateFilterRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/contents/batches/fields/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBatchUpdateFieldsByFilter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchUpdateFieldsByFilter(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processBatchUpdateFieldsByFilter(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ContentPermissionSetService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get content permission set
     * @param permissionSetId The content permission set ID.
     * @return Content permission set detail
     */
    get(permissionSetId: string): Observable<ContentPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/{permissionSetId}";
        if (permissionSetId === undefined || permissionSetId === null)
            throw new Error("The parameter 'permissionSetId' must be defined.");
        url_ = url_.replace("{permissionSetId}", encodeURIComponent("" + permissionSetId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContentPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContentPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentPermissionSetDetail>(<any>null);
    }

    /**
     * Create content permission set
     * @param request The request containing information needed to create new permission set.
     * @return Content permission set detail
     */
    create(request: ContentPermissionSetCreateRequest): Observable<ContentPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ContentPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ContentPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentPermissionSetDetail>(<any>null);
    }

    /**
     * Get multiple permission sets
     * @param ids (optional) Permission set IDs to get information about
     * @return Content permission set details
     */
    getMany(ids: string[] | undefined): Observable<ContentPermissionSetDetail[]> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<ContentPermissionSetDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentPermissionSetDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<ContentPermissionSetDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContentPermissionSetDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentPermissionSetDetail[]>(<any>null);
    }

    /**
     * Update content permission set
     * @param id ID of permission set to update
     * @param request The request containing information needed to update the permission set.
     * @return Content permission set detail
     */
    update(id: string, request: ContentPermissionSetUpdateRequest): Observable<ContentPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ContentPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ContentPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentPermissionSetDetail>(<any>null);
    }

    /**
     * Delete content permission set
     * @param id ID of the permission set that should be deleted.
     * @return OK
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Transfer ownership of content permission set
     * @param id ID of the permission set to transfer
     * @param request The request containing user who should be the new owner.
     * @return OK
     */
    transferOwnership(id: string, request: PermissionSetOwnershipTransferRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/{id}/ownership";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnership(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnership(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnership(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get permissions for the permission set
     * @param id ID of the permission set to view permissions of.
     * @return List of permissions
     */
    getPermissions(id: string): Observable<PermissionSetRight[]> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/{id}/permissions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissions(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetRight[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetRight[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissions(response: HttpResponseBase): Observable<PermissionSetRight[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetRight[]>(<any>null);
    }

    /**
     * Create multiple content permission sets
     * @param request The request containing information needed to create new permission sets.
     * @return Bulk response with information about created permission sets
     */
    createMany(request: ContentPermissionSetCreateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Update multiple content permission sets
     * @param request The request containing information needed to update the permission set.
     * @return Bulk response with information about updated permission sets
     */
    updateMany(request: ContentPermissionSetUpdateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Delete multiple content permission sets
     * @param request The request with permission set IDs to delete.
     * @return Bulk response with information about success or failure
     */
    deleteMany(request: PermissionSetDeleteManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Transfer ownership of multiple content permission sets
     * @param request The request containing information on which permission set to transfer to which user.
     * @return OK
     */
    transferOwnershipMany(request: PermissionSetOwnershipTransferManyRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/many/ownership";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnershipMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnershipMany(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnershipMany(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get permissions for multiple permission sets
     * @param ids (optional) IDs of the permission sets to view permissions of.
     * @return List of permissions
     */
    getPermissionsMany(ids: string[] | undefined): Observable<PermissionSetUserPermissionRights[]> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/many/permissions?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetPermissionsMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissionsMany(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetUserPermissionRights[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetUserPermissionRights[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissionsMany(response: HttpResponseBase): Observable<PermissionSetUserPermissionRights[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PermissionSetUserPermissionRights.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetUserPermissionRights[]>(<any>null);
    }

    /**
     * Search content permission sets
     * @param request The permission set search request.
     * @return Permission set search result
     */
    search(request: PermissionSetSearchRequest): Observable<PermissionSetSearchResult> {
        let url_ = this.baseUrl + "/v1/contentPermissionSets/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<PermissionSetSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissionSetSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetSearchResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DisplayValueService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Re-render the display values
     * @return VersionInfo
     */
    rerender(): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/displayvalues/rerender";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRerender(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRerender(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processRerender(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Get status
     * @return VersionInfo
     */
    getStatus(): Observable<DisplayValueStatus> {
        let url_ = this.baseUrl + "/v1/displayvalues/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatus(<any>response_);
                } catch (e) {
                    return <Observable<DisplayValueStatus>><any>_observableThrow(e);
                }
            } else
                return <Observable<DisplayValueStatus>><any>_observableThrow(response_);
        }));
    }

    protected processGetStatus(response: HttpResponseBase): Observable<DisplayValueStatus> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DisplayValueStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DisplayValueStatus>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DocumentHistoryService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Search
     * @param documentHistorySearchRequest The document history search request.
     * @return Document history search result.
     */
    search(documentHistorySearchRequest: DocumentHistorySearchRequest): Observable<DocumentHistorySearchResult> {
        let url_ = this.baseUrl + "/v1/history/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(documentHistorySearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<DocumentHistorySearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<DocumentHistorySearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<DocumentHistorySearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentHistorySearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DocumentHistorySearchResult>(<any>null);
    }

    /**
     * Get current
     * @param documentType The type of the document (e.g. Content).
     * @param documentId The ID of the document (e.g. contentId).
     * @return Document history item
     */
    getCurrent(documentType: string, documentId: string): Observable<DocumentHistory> {
        let url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/current";
        if (documentType === undefined || documentType === null)
            throw new Error("The parameter 'documentType' must be defined.");
        url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetCurrent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrent(<any>response_);
                } catch (e) {
                    return <Observable<DocumentHistory>><any>_observableThrow(e);
                }
            } else
                return <Observable<DocumentHistory>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrent(response: HttpResponseBase): Observable<DocumentHistory> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentHistory.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DocumentHistory>(<any>null);
    }

    /**
     * Get version
     * @param documentType The type of the document (e.g. Content).
     * @param documentId The ID of the document (e.g. contentId).
     * @param documentVersion The version of the document.
     * @return Document history item
     */
    getVersion(documentType: string, documentId: string, documentVersion: number): Observable<DocumentHistory> {
        let url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/{documentVersion}";
        if (documentType === undefined || documentType === null)
            throw new Error("The parameter 'documentType' must be defined.");
        url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        if (documentVersion === undefined || documentVersion === null)
            throw new Error("The parameter 'documentVersion' must be defined.");
        url_ = url_.replace("{documentVersion}", encodeURIComponent("" + documentVersion)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVersion(<any>response_);
                } catch (e) {
                    return <Observable<DocumentHistory>><any>_observableThrow(e);
                }
            } else
                return <Observable<DocumentHistory>><any>_observableThrow(response_);
        }));
    }

    protected processGetVersion(response: HttpResponseBase): Observable<DocumentHistory> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentHistory.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DocumentHistory>(<any>null);
    }

    /**
     * Compare with current
     * @param documentType The type of the document (e.g. Content).
     * @param documentId The ID of the document (e.g. contentId).
     * @param version (optional) The version of the document to compare with.
     * @return Document history difference.
     */
    compareWithCurrent(documentType: string, documentId: string, version: number | undefined): Observable<DocumentHistoryDifference> {
        let url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/current/compare?";
        if (documentType === undefined || documentType === null)
            throw new Error("The parameter 'documentType' must be defined.");
        url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        if (version === null)
            throw new Error("The parameter 'version' cannot be null.");
        else if (version !== undefined)
            url_ += "version=" + encodeURIComponent("" + version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCompareWithCurrent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompareWithCurrent(<any>response_);
                } catch (e) {
                    return <Observable<DocumentHistoryDifference>><any>_observableThrow(e);
                }
            } else
                return <Observable<DocumentHistoryDifference>><any>_observableThrow(response_);
        }));
    }

    protected processCompareWithCurrent(response: HttpResponseBase): Observable<DocumentHistoryDifference> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentHistoryDifference.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DocumentHistoryDifference>(<any>null);
    }

    /**
     * Compare with version
     * @param documentType The type of the document (e.g. Content).
     * @param documentId The ID of the document (e.g. contentId).
     * @param documentVersion The version of the document to use for the comparison.
     * @param version (optional) The version of the document to compare with.
     * @return Document history difference
     */
    compareWithVersion(documentType: string, documentId: string, documentVersion: number, version: number | undefined): Observable<DocumentHistoryDifference> {
        let url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/{documentVersion}/compare?";
        if (documentType === undefined || documentType === null)
            throw new Error("The parameter 'documentType' must be defined.");
        url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType)); 
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId)); 
        if (documentVersion === undefined || documentVersion === null)
            throw new Error("The parameter 'documentVersion' must be defined.");
        url_ = url_.replace("{documentVersion}", encodeURIComponent("" + documentVersion)); 
        if (version === null)
            throw new Error("The parameter 'version' cannot be null.");
        else if (version !== undefined)
            url_ += "version=" + encodeURIComponent("" + version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCompareWithVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompareWithVersion(<any>response_);
                } catch (e) {
                    return <Observable<DocumentHistoryDifference>><any>_observableThrow(e);
                }
            } else
                return <Observable<DocumentHistoryDifference>><any>_observableThrow(response_);
        }));
    }

    protected processCompareWithVersion(response: HttpResponseBase): Observable<DocumentHistoryDifference> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentHistoryDifference.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DocumentHistoryDifference>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class InfoService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get info
     * @return CustomerInfo
     */
    getInfo(): Observable<CustomerInfo> {
        let url_ = this.baseUrl + "/v1/info/customer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInfo(<any>response_);
                } catch (e) {
                    return <Observable<CustomerInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetInfo(response: HttpResponseBase): Observable<CustomerInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerInfo>(<any>null);
    }

    /**
     * Get version
     * @return VersionInfo
     */
    getVersion(): Observable<VersionInfo> {
        let url_ = this.baseUrl + "/v1/info/version";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVersion(<any>response_);
                } catch (e) {
                    return <Observable<VersionInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<VersionInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetVersion(response: HttpResponseBase): Observable<VersionInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VersionInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VersionInfo>(<any>null);
    }

    /**
     * Get status
     * @return SystemStatus
     */
    getStatus(): Observable<SystemStatus> {
        let url_ = this.baseUrl + "/v1/info/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatus(<any>response_);
                } catch (e) {
                    return <Observable<SystemStatus>><any>_observableThrow(e);
                }
            } else
                return <Observable<SystemStatus>><any>_observableThrow(response_);
        }));
    }

    protected processGetStatus(response: HttpResponseBase): Observable<SystemStatus> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SystemStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SystemStatus>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class JsonSchemaService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get json schema
     * @param schemaId The ID of the schema whose json schema to retrieve.
     * @return Json schema view item: almost a 1:1 representation of the Newtonsoft json schema.
     */
    get(schemaId: string): Observable<any> {
        let url_ = this.baseUrl + "/v1/jsonSchemas/{schemaId}";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ListItemService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get list item
     * @param listItemId The list item ID.
     * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
     * @return List item detail
     */
    get(listItemId: string, resolveBehaviors: ListItemResolveBehavior[] | null | undefined): Observable<ListItemDetail> {
        let url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
        if (listItemId === undefined || listItemId === null)
            throw new Error("The parameter 'listItemId' must be defined.");
        url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId)); 
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ListItemDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ListItemDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemDetail>(<any>null);
    }

    /**
     * Update list item
     * @param listItemId The list item ID.
     * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
     * @param allowMissingDependencies (optional) Allows creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param updateRequest The list item update request.
     * @return List item detail
     */
    update(listItemId: string, resolveBehaviors: ListItemResolveBehavior[] | null | undefined, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, updateRequest: ListItemUpdateRequest): Observable<ListItemDetail> {
        let url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
        if (listItemId === undefined || listItemId === null)
            throw new Error("The parameter 'listItemId' must be defined.");
        url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId)); 
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ListItemDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ListItemDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemDetail>(<any>null);
    }

    /**
     * Delete list item
     * @param listItemId The ID of the list item to delete.
     * @param forceReferenceRemoval (optional) A value indicating whether references to the list item should be removed.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @return Ok
     */
    delete(listItemId: string, forceReferenceRemoval: boolean | null | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
        if (listItemId === undefined || listItemId === null)
            throw new Error("The parameter 'listItemId' must be defined.");
        url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId)); 
        if (forceReferenceRemoval !== undefined)
            url_ += "forceReferenceRemoval=" + encodeURIComponent("" + forceReferenceRemoval) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get multiple list items
     * @param ids List of list item IDs.
     * @param resolveBehaviors (optional) List of enums that control which parts of the list items are resolved and returned.
     * @return List of list item details
     */
    getMany(ids: string[] | null, resolveBehaviors: ListItemResolveBehavior[] | null | undefined): Observable<ListItemDetail[]> {
        let url_ = this.baseUrl + "/v1/listItems?";
        if (ids === undefined)
            throw new Error("The parameter 'ids' must be defined.");
        else
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<ListItemDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<ListItemDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemDetail[]>(<any>null);
    }

    /**
     * Create list item
     * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
     * @param allowMissingDependencies (optional) Allows creating list items that refer to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @param listItemCreateRequest List item create request.
     * @return List item detail
     */
    create(resolveBehaviors: ListItemResolveBehavior[] | null | undefined, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined, listItemCreateRequest: ListItemCreateRequest): Observable<ListItemDetail> {
        let url_ = this.baseUrl + "/v1/listItems?";
        if (resolveBehaviors !== undefined)
            resolveBehaviors && resolveBehaviors.forEach(item => { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemCreateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ListItemDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ListItemDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemDetail>(<any>null);
    }

    /**
     * Search list items
     * @param listItemSearchRequest The list item search request.
     * @return List item search result
     */
    search(listItemSearchRequest: ListItemSearchRequest): Observable<ListItemSearchResult> {
        let url_ = this.baseUrl + "/v1/listItems/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemSearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<ListItemSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ListItemSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemSearchResult>(<any>null);
    }

    /**
     * Aggregate list items
     * @param listItemAggregationRequest The list item aggregation request.
     * @return Object aggregation result
     */
    aggregate(listItemAggregationRequest: ListItemAggregationRequest): Observable<ObjectAggregationResult> {
        let url_ = this.baseUrl + "/v1/listItems/aggregate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemAggregationRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAggregate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAggregate(<any>response_);
                } catch (e) {
                    return <Observable<ObjectAggregationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectAggregationResult>><any>_observableThrow(response_);
        }));
    }

    protected processAggregate(response: HttpResponseBase): Observable<ObjectAggregationResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectAggregationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectAggregationResult>(<any>null);
    }

    /**
     * Create multiple list items
     * @param listItemCreateManyRequest List item create many request.
     * @return Business process
     */
    createMany(listItemCreateManyRequest: ListItemCreateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemCreateManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update multiple list items
     * @param listItemUpdateManyRequest List item update many request.
     * @return Business process
     */
    updateMany(listItemUpdateManyRequest: ListItemUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemUpdateManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete multiple list items
     * @param deleteManyRequest List item delete many request.
     * @return Business process
     */
    deleteMany(deleteManyRequest: ListItemDeleteManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete multiple list items - by filter
     * @param deleteManyFilterRequest Delete many by filter request.
     * @return Business process
     */
    deleteManyByFilter(deleteManyFilterRequest: ListItemDeleteManyFilterRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/many/delete/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteManyFilterRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteManyByFilter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteManyByFilter(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteManyByFilter(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Restore list item
     * @param listItemId The list item ID.
     * @param allowMissingDependencies (optional) Allows restoring list items that refer to list items or contents that don't exist in the system.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param waitSearchDocCreation (optional) Wait for the creation of the search document and the rendered display values.
                By default the endpoint waits for the search document creation. Passing false, the endpoint will return when the main entity has been created and the creation of the search document has been enqueued but not yet performed.
     * @return Ok
     */
    restore(listItemId: string, allowMissingDependencies: boolean | undefined, timeout: string | null | undefined, waitSearchDocCreation: boolean | undefined): Observable<void> {
        let url_ = this.baseUrl + "/v1/listItems/{listItemId}/restore?";
        if (listItemId === undefined || listItemId === null)
            throw new Error("The parameter 'listItemId' must be defined.");
        url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId)); 
        if (allowMissingDependencies === null)
            throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
        else if (allowMissingDependencies !== undefined)
            url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&"; 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        if (waitSearchDocCreation === null)
            throw new Error("The parameter 'waitSearchDocCreation' cannot be null.");
        else if (waitSearchDocCreation !== undefined)
            url_ += "waitSearchDocCreation=" + encodeURIComponent("" + waitSearchDocCreation) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRestore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRestore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Restore multiple list items
     * @param restoreManyRequest List item restore many request.
     * @return Business process
     */
    restoreMany(restoreManyRequest: ListItemRestoreManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/many/restore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(restoreManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRestoreMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestoreMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processRestoreMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Batch update fields - by IDs
     * @param updateRequest List item fields batch update request.
     * @return Business process
     */
    batchUpdateFieldsByIds(updateRequest: ListItemFieldsBatchUpdateRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/batches/fields/ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBatchUpdateFieldsByIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchUpdateFieldsByIds(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processBatchUpdateFieldsByIds(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Batch update fields - by filter
     * @param updateRequest List item fields batch update by filter request.
     * @return Business process
     */
    batchUpdateFieldsByFilter(updateRequest: ListItemFieldsBatchUpdateFilterRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/listItems/batches/fields/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBatchUpdateFieldsByFilter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchUpdateFieldsByFilter(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processBatchUpdateFieldsByFilter(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Get list item references
     * @param listItemId The ID of the list item.
     * @param listItemReferencesRequest Request options to specify how many references to fetch.
     * @return List item references
     */
    getReferencesToListItem(listItemId: string, listItemReferencesRequest: ListItemReferencesRequest): Observable<ListItemReferencesResult> {
        let url_ = this.baseUrl + "/v1/listItems/{listItemId}/references/search";
        if (listItemId === undefined || listItemId === null)
            throw new Error("The parameter 'listItemId' must be defined.");
        url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemReferencesRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetReferencesToListItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferencesToListItem(<any>response_);
                } catch (e) {
                    return <Observable<ListItemReferencesResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemReferencesResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferencesToListItem(response: HttpResponseBase): Observable<ListItemReferencesResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemReferencesResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemReferencesResult>(<any>null);
    }

    /**
     * Get multiple list items references
     * @param listItemManyReferencesRequest ListItemManyReferencesRequest
     * @return A list of references per list item.
     */
    getReferencesToListItems(listItemManyReferencesRequest: ListItemManyReferencesRequest): Observable<ListItemReferencesResult> {
        let url_ = this.baseUrl + "/v1/listItems/many/references/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listItemManyReferencesRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetReferencesToListItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferencesToListItems(<any>response_);
                } catch (e) {
                    return <Observable<ListItemReferencesResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemReferencesResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferencesToListItems(response: HttpResponseBase): Observable<ListItemReferencesResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListItemReferencesResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemReferencesResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class LiveStreamService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * This endpoint cannot be used. It is kept to generate LiveStream message contracts.
     * @return OK
     * @deprecated
     */
    getMessage(): Observable<LiveStreamMessage> {
        let url_ = this.baseUrl + "/v1/liveStream/message";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMessage(<any>response_);
                } catch (e) {
                    return <Observable<LiveStreamMessage>><any>_observableThrow(e);
                }
            } else
                return <Observable<LiveStreamMessage>><any>_observableThrow(response_);
        }));
    }

    protected processGetMessage(response: HttpResponseBase): Observable<LiveStreamMessage> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LiveStreamMessage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LiveStreamMessage>(<any>null);
    }

    /**
     * Search
     * @param request Parameters for the search
     * @return Resulting live stream events
     */
    search(request: LiveStreamSearchRequest): Observable<LiveStreamSearchResult> {
        let url_ = this.baseUrl + "/v1/liveStream/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<LiveStreamSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<LiveStreamSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<LiveStreamSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LiveStreamSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LiveStreamSearchResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class MetadataService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get status
     * @return MetadataStatus
     */
    getStatus(): Observable<MetadataStatus> {
        let url_ = this.baseUrl + "/v1/metadata/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatus(<any>response_);
                } catch (e) {
                    return <Observable<MetadataStatus>><any>_observableThrow(e);
                }
            } else
                return <Observable<MetadataStatus>><any>_observableThrow(response_);
        }));
    }

    protected processGetStatus(response: HttpResponseBase): Observable<MetadataStatus> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MetadataStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MetadataStatus>(<any>null);
    }

    /**
     * Update outdated
     */
    updateOutdated(): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/metadata/many/updateOutdated";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateOutdated(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOutdated(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateOutdated(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OutputService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Search output documents
     * @param outputSearchRequest The output search request.
     * @return Output result set.
     */
    search(outputSearchRequest: OutputSearchRequest): Observable<OutputSearchResult> {
        let url_ = this.baseUrl + "/v1/outputs/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(outputSearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<OutputSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<OutputSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputSearchResult>(<any>null);
    }

    /**
     * Get - single
     * @param outputId The output id.
     * @return OutputDetail
     */
    get(outputId: string): Observable<OutputDetail> {
        let url_ = this.baseUrl + "/v1/outputs/{outputId}";
        if (outputId === undefined || outputId === null)
            throw new Error("The parameter 'outputId' must be defined.");
        url_ = url_.replace("{outputId}", encodeURIComponent("" + outputId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OutputDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OutputDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkBusinessException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputDetail>(<any>null);
    }

    /**
     * Resets retry attempts counter on failed (optionally also completed) outputs and they will be subsequently picked up for re-rendering.
     * @param request Request containing options to filter which outputs should be reset.
     * @return Business process tracking the resetting
     */
    resetRetryAttempts(request: OutputResetRetryAttemptsRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputs/resetRetryAttempts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processResetRetryAttempts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetRetryAttempts(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processResetRetryAttempts(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OutputFormatService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get output format
     * @param id The output format ID.
     * @return Output format
     */
    get(id: string): Observable<OutputFormatDetail> {
        let url_ = this.baseUrl + "/v1/outputFormats/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OutputFormatDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputFormatDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OutputFormatDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputFormatDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputFormatDetail>(<any>null);
    }

    /**
     * Update output format
     * @param id ID of output format to update
     * @param request The request containing information needed to update the output format.
     * @return Business process
     */
    update(id: string, request: OutputFormatEditable): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete output format
     * @param id ID of the output format that should be deleted.
     * @return Business process
     */
    delete(id: string): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Create output format
     * @param request The request containing information needed to create new output format.
     * @return Business process
     */
    create(request: OutputFormat): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Get multiple output formats
     * @param ids (optional) Output format IDs to get information about. If this is omitted, all output formats in the system will be returned.
     * @return Output formats
     */
    getMany(ids: string[] | null | undefined): Observable<OutputFormatDetail[]> {
        let url_ = this.baseUrl + "/v1/outputFormats?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<OutputFormatDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputFormatDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<OutputFormatDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutputFormatDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputFormatDetail[]>(<any>null);
    }

    /**
     * Create multiple output formats
     * @param request The request containing information needed to create new output formats.
     * @return Business process
     */
    createMany(request: OutputFormatCreateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update multiple output formats
     * @param request The request containing information needed to update the output format.
     * @return Business process
     */
    updateMany(request: OutputFormatUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Delete multiple output formats
     * @param request The request with output formats IDs to delete.
     * @return Business process
     */
    deleteMany(request: OutputFormatDeleteManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Sets the download file name patterns for an output format
     * @param id ID of the output format.
     * @param patterns Dictionary containing patterns per metadata language.
    If this is set, at least the customer's default language is required.
    Set any other language to an empty string and a fallback to the default language will occur.
    Set parameter to null to clear any already set patterns.
     * @return Business process
     */
    setDownloadFileNamePatterns(id: string | null, patterns: { [key: string] : string; }): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/{id}/downloadFileNamePatterns";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patterns);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSetDownloadFileNamePatterns(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetDownloadFileNamePatterns(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processSetDownloadFileNamePatterns(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Sets the download file name patterns for multiple output formats
     * @param request The request containing the patterns for each output format.
     * @return Business process
     */
    setDownloadFileNamePatternsMany(request: OutputFormatDownloadFileNamePatternUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/outputFormats/many/downloadFileNamePatterns";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSetDownloadFileNamePatternsMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetDownloadFileNamePatternsMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processSetDownloadFileNamePatternsMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Preview OutputFormat
     * @param request Information about the OutputFormat as well as which Content to use for the preview.
     * @return Rendered file
     */
    renderFormatPreview(request: OutputFormatRenderPreviewRequest): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/outputFormats/preview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRenderFormatPreview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRenderFormatPreview(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRenderFormatPreview(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ProfileService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get
     * @return User profile
     */
    get(): Observable<UserProfile> {
        let url_ = this.baseUrl + "/v1/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserProfile>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfile>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserProfile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfile>(<any>null);
    }

    /**
     * Update
     * @return Updated user profile
     */
    update(updateRequest: UserProfileUpdateRequest): Observable<UserProfile> {
        let url_ = this.baseUrl + "/v1/profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserProfile>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfile>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserProfile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfile>(<any>null);
    }

    /**
     * Request deletion
     * @return OK
     */
    requestDeletion(): Observable<void> {
        let url_ = this.baseUrl + "/v1/profile/requestDeletion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRequestDeletion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestDeletion(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRequestDeletion(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SchemaService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get schema
     * @param schemaId The schema ID.
     * @return Schema detail
     */
    get(schemaId: string): Observable<SchemaDetail> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SchemaDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SchemaDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaDetail>(<any>null);
    }

    /**
     * Update schema
     * @param schemaId The schema ID.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param schema The schema update request.
     * @return Schema update result, containing the updated schema
     */
    update(schemaId: string, timeout: string | null | undefined, schema: SchemaUpdateRequest): Observable<SchemaUpdateResult> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}?";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(schema);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<SchemaUpdateResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaUpdateResult>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SchemaUpdateResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaUpdateResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaUpdateResult>(<any>null);
    }

    /**
     * Delete schema
     * @param schemaId The schema ID.
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @return Schema delete result
     */
    delete(schemaId: string, timeout: string | null | undefined): Observable<SchemaDeleteResult> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}?";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<SchemaDeleteResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaDeleteResult>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<SchemaDeleteResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaDeleteResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaDeleteResult>(<any>null);
    }

    /**
     * Get multiple schemas
     * @param ids (optional) Comma separated list of schema IDs.
     * @return List of schema details
     */
    getMany(ids: string[] | null | undefined): Observable<SchemaDetail[]> {
        let url_ = this.baseUrl + "/v1/schemas?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<SchemaDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<SchemaDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SchemaDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaDetail[]>(<any>null);
    }

    /**
     * Create schema
     * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                Only the waiting is aborted, and the calls returned.
     * @param schema The schema create request.
     * @return Schema create result, containing the created schema
     */
    create(timeout: string | null | undefined, schema: SchemaCreateRequest): Observable<SchemaCreateResult> {
        let url_ = this.baseUrl + "/v1/schemas?";
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(schema);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<SchemaCreateResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaCreateResult>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SchemaCreateResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaCreateResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaCreateResult>(<any>null);
    }

    /**
     * Search schemas
     * @param schemaSearchRequest The schema search request.
     * @return Schema search result
     */
    search(schemaSearchRequest: SchemaSearchRequest): Observable<SchemaSearchResult> {
        let url_ = this.baseUrl + "/v1/schemas/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(schemaSearchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<SchemaSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<SchemaSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaSearchResult>(<any>null);
    }

    /**
     * Search index fields
     * @param request The search request.
     * @return Indexed fields
     */
    getIndexFields(request: IndexFieldsSearchBySchemaIdsRequest): Observable<IndexField[]> {
        let url_ = this.baseUrl + "/v1/schemas/indexFields/searchBySchemaIds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetIndexFields(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIndexFields(<any>response_);
                } catch (e) {
                    return <Observable<IndexField[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IndexField[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetIndexFields(response: HttpResponseBase): Observable<IndexField[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IndexField.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IndexField[]>(<any>null);
    }

    /**
     * Exists schema
     * @param schemaId The schema ID.
     * @return Schema Exists response
     */
    exists(schemaId: string): Observable<SchemaExistsResponse> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}/exists";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processExists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExists(<any>response_);
                } catch (e) {
                    return <Observable<SchemaExistsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaExistsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExists(response: HttpResponseBase): Observable<SchemaExistsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaExistsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaExistsResponse>(<any>null);
    }

    /**
     * Exists field in schema
     * @param schemaId The schema ID.
     * @param fieldId The field ID.
     * @return Field Exists response
     */
    fieldExists(schemaId: string, fieldId: string): Observable<FieldExistsResponse> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}/{fieldId}/exists";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        if (fieldId === undefined || fieldId === null)
            throw new Error("The parameter 'fieldId' must be defined.");
        url_ = url_.replace("{fieldId}", encodeURIComponent("" + fieldId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFieldExists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFieldExists(<any>response_);
                } catch (e) {
                    return <Observable<FieldExistsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FieldExistsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processFieldExists(response: HttpResponseBase): Observable<FieldExistsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FieldExistsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FieldExistsResponse>(<any>null);
    }

    /**
     * Gets all schemas referenced by the schema specified in
     * @param schemaId The schema ID.
     * @return Referenced schema details
     */
    getReferenced(schemaId: string): Observable<SchemaDetail[]> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}/referenced";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetReferenced(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferenced(<any>response_);
                } catch (e) {
                    return <Observable<SchemaDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferenced(response: HttpResponseBase): Observable<SchemaDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SchemaDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaDetail[]>(<any>null);
    }

    /**
     * Transfer ownership
     * @param schemaId The schema ID.
     * @param request Request detailing which user to transfer to.
     * @return OK
     */
    transferOwnership(schemaId: string, request: SchemaOwnershipTransferRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/schemas/{schemaId}/ownership";
        if (schemaId === undefined || schemaId === null)
            throw new Error("The parameter 'schemaId' must be defined.");
        url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnership(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnership(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnership(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Gets all schemas referenced by the schemas specified in
     * @param ids (optional) The schema IDs.
     * @return Referenced schema details
     */
    getManyReferenced(ids: string[] | undefined): Observable<SchemaDetail[]> {
        let url_ = this.baseUrl + "/v1/schemas/many/referenced?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetManyReferenced(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetManyReferenced(<any>response_);
                } catch (e) {
                    return <Observable<SchemaDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetManyReferenced(response: HttpResponseBase): Observable<SchemaDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SchemaDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaDetail[]>(<any>null);
    }

    /**
     * Create multiple schemas
     * @param schemas The schema create many request.
     * @return BusinessProcess which can be awaited.
     */
    createMany(schemas: SchemaCreateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/schemas/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(schemas);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Update multiple schema
     * @return BusinessProcess which can be awaited.
     */
    updateMany(request: SchemaUpdateManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/schemas/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }

    /**
     * Transfer ownership of multiple schemas
     * @param request Schema ownership transfer many request.
     * @return Business process
     */
    transferOwnershipMany(request: SchemaOwnershipTransferManyRequest): Observable<BusinessProcess> {
        let url_ = this.baseUrl + "/v1/schemas/many/ownership";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnershipMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnershipMany(<any>response_);
                } catch (e) {
                    return <Observable<BusinessProcess>><any>_observableThrow(e);
                }
            } else
                return <Observable<BusinessProcess>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnershipMany(response: HttpResponseBase): Observable<BusinessProcess> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BusinessProcess.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BusinessProcess>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SchemaPermissionSetService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get schema permission set
     * @param permissionSetId The schema permission set ID.
     * @return Schema permission set detail
     */
    get(permissionSetId: string): Observable<SchemaPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/{permissionSetId}";
        if (permissionSetId === undefined || permissionSetId === null)
            throw new Error("The parameter 'permissionSetId' must be defined.");
        url_ = url_.replace("{permissionSetId}", encodeURIComponent("" + permissionSetId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SchemaPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaPermissionSetDetail>(<any>null);
    }

    /**
     * Create schema permission set
     * @param request The request containing information needed to create new permission set.
     * @return Schema permission set detail
     */
    create(request: SchemaPermissionSetCreateRequest): Observable<SchemaPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SchemaPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaPermissionSetDetail>(<any>null);
    }

    /**
     * Get multiple permission sets
     * @param ids (optional) Permission set IDs to get information about
     * @return Schema permission set details
     */
    getMany(ids: string[] | undefined): Observable<SchemaPermissionSetDetail[]> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<SchemaPermissionSetDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaPermissionSetDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<SchemaPermissionSetDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SchemaPermissionSetDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaPermissionSetDetail[]>(<any>null);
    }

    /**
     * Update schema permission set
     * @param id ID of permission set to update
     * @param request The request containing information needed to update the permission set.
     * @return Schema permission set detail
     */
    update(id: string, request: SchemaPermissionSetUpdateRequest): Observable<SchemaPermissionSetDetail> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<SchemaPermissionSetDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SchemaPermissionSetDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchemaPermissionSetDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SchemaPermissionSetDetail>(<any>null);
    }

    /**
     * Delete schema permission set
     * @param id ID of the permission set that should be deleted.
     * @return OK
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Transfer ownership of schema permission set
     * @param id ID of the permission set to transfer
     * @param request The request containing user who should be the new owner.
     * @return OK
     */
    transferOwnership(id: string, request: PermissionSetOwnershipTransferRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}/ownership";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnership(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnership(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnership(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get permissions for the permission set
     * @param id ID of the permission set to view permissions of.
     * @return List of permissions
     */
    getPermissions(id: string): Observable<PermissionSetRight[]> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}/permissions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissions(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetRight[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetRight[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissions(response: HttpResponseBase): Observable<PermissionSetRight[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetRight[]>(<any>null);
    }

    /**
     * Create multiple schema permission sets
     * @param request The request containing information needed to create new permission sets.
     * @return Bulk response with information about created permission sets
     */
    createMany(request: SchemaPermissionSetCreateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Update multiple schema permission sets
     * @param request The request containing information needed to update the permission set.
     * @return Bulk response with information about updated permission sets
     */
    updateMany(request: SchemaPermissionSetUpdateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Delete multiple schema permission sets
     * @param request The request with permission set IDs to delete.
     * @return Bulk response with information about success or failure
     */
    deleteMany(request: PermissionSetDeleteManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Transfer ownership of multiple schema permission sets
     * @param request The request containing information on which permission set to transfer to which user.
     * @return OK
     */
    transferOwnershipMany(request: PermissionSetOwnershipTransferManyRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/many/ownership";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTransferOwnershipMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransferOwnershipMany(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTransferOwnershipMany(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get permissions for multiple permission sets
     * @param ids (optional) IDs of the permission sets to view permissions of.
     * @return List of permissions
     */
    getPermissionsMany(ids: string[] | undefined): Observable<PermissionSetUserPermissionRights[]> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/many/permissions?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetPermissionsMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissionsMany(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetUserPermissionRights[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetUserPermissionRights[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissionsMany(response: HttpResponseBase): Observable<PermissionSetUserPermissionRights[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PermissionSetUserPermissionRights.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetUserPermissionRights[]>(<any>null);
    }

    /**
     * Search schema permission sets
     * @param request The permission set search request.
     * @return Permission set search result
     */
    search(request: PermissionSetSearchRequest): Observable<PermissionSetSearchResult> {
        let url_ = this.baseUrl + "/v1/schemaPermissionSets/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<PermissionSetSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<PermissionSetSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<PermissionSetSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PermissionSetSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PermissionSetSearchResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SchemaTransferService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Import schemas
     * @param schemaImportRequest The schema import request.
     * @return Transfer
     */
    import(schemaImportRequest: SchemaImportRequest): Observable<Transfer> {
        let url_ = this.baseUrl + "/v1/schematransfers/import";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(schemaImportRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processImport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImport(<any>response_);
                } catch (e) {
                    return <Observable<Transfer>><any>_observableThrow(e);
                }
            } else
                return <Observable<Transfer>><any>_observableThrow(response_);
        }));
    }

    protected processImport(response: HttpResponseBase): Observable<Transfer> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Transfer.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkBusinessException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transfer>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ShareService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get
     * @param id Share Id (not token, use [GetShareJson](#operation/Share_GetShareJson) to get share by token)
     * @return Share detail
     */
    get(id: string): Observable<ShareDetail> {
        let url_ = this.baseUrl + "/v1/shares/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ShareDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShareDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ShareDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShareDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShareDetail>(<any>null);
    }

    /**
     * Update
     * @param id The share id.
     * @param timeout (optional) Optional timeout to wait for the request to complete
     * @param updateRequest The share update request.
     * @return Share detail
     */
    update(id: string, timeout: string | null | undefined, updateRequest: ShareBaseUpdateRequest): Observable<ShareDetail> {
        let url_ = this.baseUrl + "/v1/shares/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ShareDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShareDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ShareDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShareDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShareDetail>(<any>null);
    }

    /**
     * Search
     * @param request Search request
     * @return Share search result
     */
    search(request: ShareSearchRequest): Observable<ShareSearchResult> {
        let url_ = this.baseUrl + "/v1/shares/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<ShareSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShareSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ShareSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShareSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShareSearchResult>(<any>null);
    }

    /**
     * Aggregate
     * @param request Aggregation request
     * @return Share aggregation result
     */
    aggregate(request: ShareAggregationRequest): Observable<ObjectAggregationResult> {
        let url_ = this.baseUrl + "/v1/shares/aggregate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAggregate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAggregate(<any>response_);
                } catch (e) {
                    return <Observable<ObjectAggregationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectAggregationResult>><any>_observableThrow(response_);
        }));
    }

    protected processAggregate(response: HttpResponseBase): Observable<ObjectAggregationResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectAggregationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectAggregationResult>(<any>null);
    }

    /**
     * Create
     * @param timeout (optional) Optional timeout to wait for the request to complete
     * @param request Polymorphic create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
     * @return Create result
     */
    create(timeout: string | null | undefined, request: ShareBaseCreateRequest): Observable<CreateShareResult> {
        let url_ = this.baseUrl + "/v1/shares?";
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<CreateShareResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateShareResult>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CreateShareResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = PermissionValidationException.fromJS(resultData403);
            return throwException("A server error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateShareResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateShareResult>(<any>null);
    }

    /**
     * Delete multiple shares
     * @param timeout (optional) Optional timeout to wait for the request to complete
     * @param deleteManyRequest A delete many request containing the ids of the shares to delete.
     * @return BusinessProcess
     */
    deleteMany(timeout: string | null | undefined, deleteManyRequest: ShareDeleteManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/shares/many/delete?";
        if (timeout !== undefined)
            url_ += "timeout=" + encodeURIComponent("" + timeout) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteManyRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Get share json
     * @param token Share token
     * @param lang (optional) Language code
     * @return ShareDetail
     */
    getShareJson(token: string, lang: string | null | undefined): Observable<any> {
        let url_ = this.baseUrl + "/v1/shares/json/{token}?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token)); 
        if (lang !== undefined)
            url_ += "lang=" + encodeURIComponent("" + lang) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetShareJson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShareJson(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>_observableThrow(e);
                }
            } else
                return <Observable<any>><any>_observableThrow(response_);
        }));
    }

    protected processGetShareJson(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);
    }

    /**
     * Download shared outputs
     * @param token Share token
     * @param width (optional) Optional width in pixels to resize image
     * @param height (optional) Optional height in pixels to resize image
     * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @return HttpResponseMessage
     */
    download(token: string, width: number | null | undefined, height: number | null | undefined, range: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/shares/d/{token}?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token)); 
        if (width !== undefined)
            url_ += "width=" + encodeURIComponent("" + width) + "&"; 
        if (height !== undefined)
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "range": range !== undefined && range !== null ? "" + range : "", 
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownload(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownload(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Download shared outputs
     * @param token Share token
     * @param contentId The content id
     * @param width (optional) Optional width in pixels to resize image
     * @param height (optional) Optional height in pixels to resize image
     * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @return HttpResponseMessage
     */
    downloadWithContentId(token: string, contentId: string, width: number | null | undefined, height: number | null | undefined, range: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/shares/d/{token}/{contentId}?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token)); 
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (width !== undefined)
            url_ += "width=" + encodeURIComponent("" + width) + "&"; 
        if (height !== undefined)
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "range": range !== undefined && range !== null ? "" + range : "", 
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadWithContentId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadWithContentId(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadWithContentId(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Download shared outputs
     * @param token Share token
     * @param contentId The content id
     * @param outputFormatId The output format id+
     * @param width (optional) Optional width in pixels to resize image
     * @param height (optional) Optional height in pixels to resize image
     * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
     * @return HttpResponseMessage
     */
    downloadWithOutputFormatId(token: string, contentId: string, outputFormatId: string, width: number | null | undefined, height: number | null | undefined, range: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/v1/shares/d/{token}/{contentId}/{outputFormatId}?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token)); 
        if (contentId === undefined || contentId === null)
            throw new Error("The parameter 'contentId' must be defined.");
        url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId)); 
        if (outputFormatId === undefined || outputFormatId === null)
            throw new Error("The parameter 'outputFormatId' must be defined.");
        url_ = url_.replace("{outputFormatId}", encodeURIComponent("" + outputFormatId)); 
        if (width !== undefined)
            url_ += "width=" + encodeURIComponent("" + width) + "&"; 
        if (height !== undefined)
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "range": range !== undefined && range !== null ? "" + range : "", 
                "Accept": "application/octet-stream"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadWithOutputFormatId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadWithOutputFormatId(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadWithOutputFormatId(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 412) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TransferService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get transfer details
     * @param transferId ID of transfer.
     * @return TransferDetail
     */
    get(transferId: string): Observable<TransferDetail> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<TransferDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TransferDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransferDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferDetail>(<any>null);
    }

    /**
     * Delete transfer
     * @param transferId ID of transfer.
     * @return OK
     */
    delete(transferId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Search
     * @param request The transfer search request
     * @return TransferSearchResult
     */
    search(request: TransferSearchRequest): Observable<TransferSearchResult> {
        let url_ = this.baseUrl + "/v1/transfers/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<TransferSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<TransferSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransferSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferSearchResult>(<any>null);
    }

    /**
     * Cancel transfer
     * @param transferId ID of transfer.
     * @return OK
     */
    cancelTransfer(transferId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}/cancel";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCancelTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelTransfer(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCancelTransfer(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Create transfer
     * @param request The create transfer request
     * @return Transfer
     */
    create(request: CreateTransferRequest): Observable<Transfer> {
        let url_ = this.baseUrl + "/v1/transfers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<Transfer>><any>_observableThrow(e);
                }
            } else
                return <Observable<Transfer>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<Transfer> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Transfer.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transfer>(<any>null);
    }

    /**
     * Get file
     * @param fileTransferId ID of file transfer.
     * @return FileTransferDetail
     */
    getFile(fileTransferId: string): Observable<FileTransferDetail> {
        let url_ = this.baseUrl + "/v1/transfers/files/{fileTransferId}";
        if (fileTransferId === undefined || fileTransferId === null)
            throw new Error("The parameter 'fileTransferId' must be defined.");
        url_ = url_.replace("{fileTransferId}", encodeURIComponent("" + fileTransferId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFile(<any>response_);
                } catch (e) {
                    return <Observable<FileTransferDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileTransferDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGetFile(response: HttpResponseBase): Observable<FileTransferDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileTransferDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileTransferDetail>(<any>null);
    }

    /**
     * Search for files
     * @param request The file transfer search request
     * @return FileTransferSearchResult
     */
    searchFiles(request: FileTransferSearchRequest): Observable<FileTransferSearchResult> {
        let url_ = this.baseUrl + "/v1/transfers/files/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearchFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchFiles(<any>response_);
                } catch (e) {
                    return <Observable<FileTransferSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileTransferSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearchFiles(response: HttpResponseBase): Observable<FileTransferSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileTransferSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileTransferSearchResult>(<any>null);
    }

    /**
     * Get blacklist
     * @return Blacklist
     */
    getBlacklist(): Observable<Blacklist> {
        let url_ = this.baseUrl + "/v1/transfers/files/blacklist";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetBlacklist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBlacklist(<any>response_);
                } catch (e) {
                    return <Observable<Blacklist>><any>_observableThrow(e);
                }
            } else
                return <Observable<Blacklist>><any>_observableThrow(response_);
        }));
    }

    protected processGetBlacklist(response: HttpResponseBase): Observable<Blacklist> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Blacklist.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Blacklist>(<any>null);
    }

    /**
     * Delete files
     * @param request The file transfer delete request
     */
    deleteFiles(request: FileTransferDeleteRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/transfers/files/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFiles(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFiles(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Import transfer
     * @param transferId ID of transfer.
     * @param request The ImportTransfer request.
     * @return Transfer
     */
    importTransfer(transferId: string, request: ImportTransferRequest): Observable<Transfer> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}/import";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processImportTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportTransfer(<any>response_);
                } catch (e) {
                    return <Observable<Transfer>><any>_observableThrow(e);
                }
            } else
                return <Observable<Transfer>><any>_observableThrow(response_);
        }));
    }

    protected processImportTransfer(response: HttpResponseBase): Observable<Transfer> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Transfer.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transfer>(<any>null);
    }

    /**
     * Import transfer partially
     * @param transferId ID of transfer.
     * @param request The ImportTransferPartial request.
     * @return Transfer
     */
    partialImport(transferId: string, request: ImportTransferPartialRequest): Observable<Transfer> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}/partialImport";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processPartialImport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPartialImport(<any>response_);
                } catch (e) {
                    return <Observable<Transfer>><any>_observableThrow(e);
                }
            } else
                return <Observable<Transfer>><any>_observableThrow(response_);
        }));
    }

    protected processPartialImport(response: HttpResponseBase): Observable<Transfer> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Transfer.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transfer>(<any>null);
    }

    /**
     * Upload file
     * @param formFile (optional) Gets or sets the form file.
     * @param chunkNumber Current chunk number. Starts at 1.
     * @param currentChunkSize Size in bytes of the current chunk.
     * @param totalSize Total size in bytes of the uploading file.
     * @param totalChunks Total chunks of the uploading file.
     * @param transferId ID of transfer.
     * @param requestId Identifier of file.
     * @return OK
     */
    uploadFile(formFile: FileParameter | null | undefined, chunkNumber: number, currentChunkSize: number, totalSize: number, totalChunks: number, transferId: string, requestId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/transfers/{transferId}/files/{requestId}/upload?";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined.");
        url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId)); 
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId)); 
        if (chunkNumber === undefined || chunkNumber === null)
            throw new Error("The parameter 'chunkNumber' must be defined and cannot be null.");
        else
            url_ += "chunkNumber=" + encodeURIComponent("" + chunkNumber) + "&"; 
        if (currentChunkSize === undefined || currentChunkSize === null)
            throw new Error("The parameter 'currentChunkSize' must be defined and cannot be null.");
        else
            url_ += "currentChunkSize=" + encodeURIComponent("" + currentChunkSize) + "&"; 
        if (totalSize === undefined || totalSize === null)
            throw new Error("The parameter 'totalSize' must be defined and cannot be null.");
        else
            url_ += "totalSize=" + encodeURIComponent("" + totalSize) + "&"; 
        if (totalChunks === undefined || totalChunks === null)
            throw new Error("The parameter 'totalChunks' must be defined and cannot be null.");
        else
            url_ += "totalChunks=" + encodeURIComponent("" + totalChunks) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (formFile !== null && formFile !== undefined)
            content_.append("formFile", formFile.data, formFile.fileName ? formFile.fileName : "formFile");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUploadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUploadFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Create user
     * @param request Requested user information.
     * @return Newly created user
     */
    create(request: UserCreateRequest): Observable<UserDetail> {
        let url_ = this.baseUrl + "/v1/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<UserDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetail>(<any>null);
    }

    /**
     * Get user
     * @param userId User ID to search for.
     * @return Requested user details
     */
    get(userId: string): Observable<UserDetail> {
        let url_ = this.baseUrl + "/v1/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetail>(<any>null);
    }

    /**
     * Update user
     * @param userId User ID to action on.
     * @param request New user information.
     * @return User details after the update of the user
     */
    update(userId: string, request: UserUpdateRequest): Observable<UserDetail> {
        let url_ = this.baseUrl + "/v1/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetail>(<any>null);
    }

    /**
     * Search users
     * @param searchRequest User search request.
     * @return Result of the user search
     */
    search(searchRequest: UserSearchRequest): Observable<UserSearchResult> {
        let url_ = this.baseUrl + "/v1/users/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<UserSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<UserSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSearchResult>(<any>null);
    }

    /**
     * Get user by owner token
     * @param tokenId ID of the owner token.
     * @return User details of the user referenced by the owner token
     */
    getByOwnerToken(tokenId: string): Observable<UserDetail> {
        let url_ = this.baseUrl + "/v1/users/owner/{tokenId}";
        if (tokenId === undefined || tokenId === null)
            throw new Error("The parameter 'tokenId' must be defined.");
        url_ = url_.replace("{tokenId}", encodeURIComponent("" + tokenId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetByOwnerToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByOwnerToken(<any>response_);
                } catch (e) {
                    return <Observable<UserDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGetByOwnerToken(response: HttpResponseBase): Observable<UserDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetail>(<any>null);
    }

    /**
     * Get multiple users
     * @param ids User IDs.
     * @return Details of all the users who were found
     */
    getMany(ids: string[] | null): Observable<UserDetail[]> {
        let url_ = this.baseUrl + "/v1/users/many?";
        if (ids === undefined)
            throw new Error("The parameter 'ids' must be defined.");
        else
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<UserDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<UserDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetail[]>(<any>null);
    }

    /**
     * Aggregate users
     * @param request User aggregation request.
     * @return Aggregation based on the request
     */
    aggregate(request: UserAggregationRequest): Observable<ObjectAggregationResult> {
        let url_ = this.baseUrl + "/v1/users/aggregate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAggregate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAggregate(<any>response_);
                } catch (e) {
                    return <Observable<ObjectAggregationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectAggregationResult>><any>_observableThrow(response_);
        }));
    }

    protected processAggregate(response: HttpResponseBase): Observable<ObjectAggregationResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectAggregationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjectAggregationResult>(<any>null);
    }

    /**
     * Lock / unlock user
     * @param userId User ID to action on.
     * @param request Request detailing if the user should be locked or unlocked.
     * @return OK
     */
    lock(userId: string, request: UserLockRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/lock";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLock(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLock(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLock(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Change user's review state
     * @param userId User ID to action on.
     * @param request Request detailing if the user should be set as _reviewed_ or _to be reviewed_.
     * @return OK
     */
    review(userId: string, request: UserReviewRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/review";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReview(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processReview(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Invite user
     * @param userId User ID to action on.
     * @return OK
     */
    invite(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/invite";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processInvite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInvite(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processInvite(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Reinvite user
     * @param userId User ID to action on.
     * @return OK
     */
    reinvite(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/reinvite";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReinvite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReinvite(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processReinvite(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Delete user
     * @param userId User ID to action on.
     * @param request Request with details regarding the deletion.
     * @return OK
     */
    delete(userId: string, request: UserDeleteRequest): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/delete";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Cancels a user triggered deletion request and returns user to _Reviewed_ state.
     * @param userId User ID to action on.
     * @return OK
     */
    cancelDeletionRequest(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/cancelDeletionRequest";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCancelDeletionRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelDeletionRequest(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCancelDeletionRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Restore user
     * @param userId User ID to action on.
     * @return OK
     */
    restore(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/users/{userId}/restore";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRestore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRestore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRestore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserRoleService extends PictureparkServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(AuthService) configuration: AuthService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(PICTUREPARK_API_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * Get multiple user roles
     * @param ids User role IDs to get information about.
     * @return List of user roles
     */
    getMany(ids: string[] | null): Observable<UserRoleDetail[]> {
        let url_ = this.baseUrl + "/v1/userRoles?";
        if (ids === undefined)
            throw new Error("The parameter 'ids' must be defined.");
        else
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMany(<any>response_);
                } catch (e) {
                    return <Observable<UserRoleDetail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRoleDetail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMany(response: HttpResponseBase): Observable<UserRoleDetail[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserRoleDetail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRoleDetail[]>(<any>null);
    }

    /**
     * Create user role
     * @param request User role creation request.
     * @return Newly created user role
     */
    create(request: UserRoleCreateRequest): Observable<UserRoleDetail> {
        let url_ = this.baseUrl + "/v1/userRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<UserRoleDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRoleDetail>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserRoleDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRoleDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRoleDetail>(<any>null);
    }

    /**
     * Get user role
     * @param userRoleId The user role ID
     * @return User role or null if not found
     */
    get(userRoleId: string): Observable<UserRoleDetail> {
        let url_ = this.baseUrl + "/v1/userRoles/{userRoleId}";
        if (userRoleId === undefined || userRoleId === null)
            throw new Error("The parameter 'userRoleId' must be defined.");
        url_ = url_.replace("{userRoleId}", encodeURIComponent("" + userRoleId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserRoleDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRoleDetail>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserRoleDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRoleDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRoleDetail>(<any>null);
    }

    /**
     * Search user roles
     * @param searchRequest User role search request.
     * @return Result of the user role search
     */
    search(searchRequest: UserRoleSearchRequest): Observable<UserRoleSearchResult> {
        let url_ = this.baseUrl + "/v1/userRoles/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<UserRoleSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRoleSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<UserRoleSearchResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRoleSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRoleSearchResult>(<any>null);
    }

    /**
     * Update user roles
     * @param id ID of the user role to update.
     * @param request User role update request.
     * @return Updated user role
     */
    update(id: string, request: UserRoleEditable): Observable<UserRoleDetail> {
        let url_ = this.baseUrl + "/v1/userRoles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserRoleDetail>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRoleDetail>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserRoleDetail> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRoleDetail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRoleDetail>(<any>null);
    }

    /**
     * Delete user role
     * @param id ID of user role to delete
     * @return OK
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/v1/userRoles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Create multiple user roles
     * @param request Multiple user role creation request.
     * @return Bulk response
     */
    createMany(request: UserRoleCreateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/userRoles/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Update multiple user roles
     * @param request Multiple user role update request.
     * @return Bulk response
     */
    updateMany(request: UserRoleUpdateManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/userRoles/many";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdateMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }

    /**
     * Delete multiple user roles
     * @param request Multiple user role deletion request.
     * @return Bulk request
     */
    deleteMany(request: UserRoleDeleteManyRequest): Observable<BulkResponse> {
        let url_ = this.baseUrl + "/v1/userRoles/many/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<BulkResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<BulkResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<BulkResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BulkResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PictureparkException.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 405) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = PictureparkNotFoundException.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = PictureparkConflictException.fromJS(resultData409);
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = PictureparkValidationException.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 429) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BulkResponse>(<any>null);
    }
}

export class BaseResultOfBusinessProcess implements IBaseResultOfBusinessProcess {
    totalResults!: number;
    results!: BusinessProcess[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfBusinessProcess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(BusinessProcess.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfBusinessProcess {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfBusinessProcess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfBusinessProcess {
    totalResults: number;
    results: BusinessProcess[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfBusinessProcess extends BaseResultOfBusinessProcess implements ISearchBehaviorBaseResultOfBusinessProcess {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfBusinessProcess) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfBusinessProcess {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfBusinessProcess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfBusinessProcess extends IBaseResultOfBusinessProcess {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Search result from a search for business processes */
export class BusinessProcessSearchResult extends SearchBehaviorBaseResultOfBusinessProcess implements IBusinessProcessSearchResult {

    constructor(data?: IBusinessProcessSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessProcessSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Search result from a search for business processes */
export interface IBusinessProcessSearchResult extends ISearchBehaviorBaseResultOfBusinessProcess {
}

export class QueryDebugInformation implements IQueryDebugInformation {
    general?: string | undefined;
    auditTrail?: string | undefined;
    request?: any | undefined;
    response?: any | undefined;

    constructor(data?: IQueryDebugInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"];
            this.auditTrail = data["auditTrail"];
            this.request = data["request"];
            this.response = data["response"];
        }
    }

    static fromJS(data: any): QueryDebugInformation {
        data = typeof data === 'object' ? data : {};
        let result = new QueryDebugInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general;
        data["auditTrail"] = this.auditTrail;
        data["request"] = this.request;
        data["response"] = this.response;
        return data; 
    }
}

export interface IQueryDebugInformation {
    general?: string | undefined;
    auditTrail?: string | undefined;
    request?: any | undefined;
    response?: any | undefined;
}

/** Business process */
export class BusinessProcess implements IBusinessProcess {
    /** ID of the business process. */
    id!: string;
    /** ID of the business process definition associated to the business process. */
    processDefinitionId!: string;
    /** ID of the document that is modified by the running of the business process. Used during the cancellation of the business process. */
    referenceId?: string | undefined;
    /** Type of the document that is modified by the running of the business process. Used during the cancellation of the business process. */
    referenceDocType?: string | undefined;
    /** True if the business process execution can be cancelled. False otherwise. */
    supportsCancellation!: boolean;
    /** Scope of the business process. */
    businessProcessScope!: BusinessProcessScope;
    /** Current life cycle of the business process. */
    lifeCycle!: BusinessProcessLifeCycle;
    /** When the business process started. */
    startDate!: Date;
    /** When the business process finished. */
    endDate!: Date;
    /** Is the business process finished. */
    finished!: boolean;
    /** List containing the history of all the state transitions of the business process. */
    stateHistory?: BusinessProcessState[] | undefined;
    /** Current state of the business process. */
    currentState?: string | undefined;
    /** Timestamp when the business process last reported progress. */
    lastReportedProgress?: Date | undefined;
    /** Id of the business process that will be automatically started after the completion of the current one, if any. */
    continuationBusinessProcessId?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IBusinessProcess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.stateHistory) {
                this.stateHistory = [];
                for (let i = 0; i < data.stateHistory.length; i++) {
                    let item = data.stateHistory[i];
                    this.stateHistory[i] = item && !(<any>item).toJSON ? new BusinessProcessState(item) : <BusinessProcessState>item;
                }
            }
        }
        this._discriminator = "BusinessProcess";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.processDefinitionId = data["processDefinitionId"];
            this.referenceId = data["referenceId"];
            this.referenceDocType = data["referenceDocType"];
            this.supportsCancellation = data["supportsCancellation"];
            this.businessProcessScope = data["businessProcessScope"];
            this.lifeCycle = data["lifeCycle"];
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
            this.finished = data["finished"];
            if (Array.isArray(data["stateHistory"])) {
                this.stateHistory = [] as any;
                for (let item of data["stateHistory"])
                    this.stateHistory!.push(BusinessProcessState.fromJS(item));
            }
            this.currentState = data["currentState"];
            this.lastReportedProgress = data["lastReportedProgress"] ? new Date(data["lastReportedProgress"].toString()) : <any>undefined;
            this.continuationBusinessProcessId = data["continuationBusinessProcessId"];
        }
    }

    static fromJS(data: any): BusinessProcess {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "BusinessProcessDetails") {
            let result = new BusinessProcessDetails();
            result.init(data);
            return result;
        }
        let result = new BusinessProcess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["processDefinitionId"] = this.processDefinitionId;
        data["referenceId"] = this.referenceId;
        data["referenceDocType"] = this.referenceDocType;
        data["supportsCancellation"] = this.supportsCancellation;
        data["businessProcessScope"] = this.businessProcessScope;
        data["lifeCycle"] = this.lifeCycle;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["finished"] = this.finished;
        if (Array.isArray(this.stateHistory)) {
            data["stateHistory"] = [];
            for (let item of this.stateHistory)
                data["stateHistory"].push(item.toJSON());
        }
        data["currentState"] = this.currentState;
        data["lastReportedProgress"] = this.lastReportedProgress ? this.lastReportedProgress.toISOString() : <any>undefined;
        data["continuationBusinessProcessId"] = this.continuationBusinessProcessId;
        return data; 
    }
}

/** Business process */
export interface IBusinessProcess {
    /** ID of the business process. */
    id: string;
    /** ID of the business process definition associated to the business process. */
    processDefinitionId: string;
    /** ID of the document that is modified by the running of the business process. Used during the cancellation of the business process. */
    referenceId?: string | undefined;
    /** Type of the document that is modified by the running of the business process. Used during the cancellation of the business process. */
    referenceDocType?: string | undefined;
    /** True if the business process execution can be cancelled. False otherwise. */
    supportsCancellation: boolean;
    /** Scope of the business process. */
    businessProcessScope: BusinessProcessScope;
    /** Current life cycle of the business process. */
    lifeCycle: BusinessProcessLifeCycle;
    /** When the business process started. */
    startDate: Date;
    /** When the business process finished. */
    endDate: Date;
    /** Is the business process finished. */
    finished: boolean;
    /** List containing the history of all the state transitions of the business process. */
    stateHistory?: IBusinessProcessState[] | undefined;
    /** Current state of the business process. */
    currentState?: string | undefined;
    /** Timestamp when the business process last reported progress. */
    lastReportedProgress?: Date | undefined;
    /** Id of the business process that will be automatically started after the completion of the current one, if any. */
    continuationBusinessProcessId?: string | undefined;
}

/** Scope of the business process */
export enum BusinessProcessScope {
    System = "System",
    User = "User",
}

/** Life cycle of the business process */
export enum BusinessProcessLifeCycle {
    Draft = "Draft",
    InProgress = "InProgress",
    Succeeded = "Succeeded",
    Cancelled = "Cancelled",
    CancellationInProgress = "CancellationInProgress",
    Failed = "Failed",
    SucceededWithErrors = "SucceededWithErrors",
}

/** State transition information of a business process */
export class BusinessProcessState implements IBusinessProcessState {
    /** State of the business process */
    state!: string;
    /** Date and time of when the state transition was performed. */
    timestamp!: Date;
    /** Eventual error associated to the state transition. */
    error?: ErrorResponse | undefined;

    constructor(data?: IBusinessProcessState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.error = data.error && !(<any>data.error).toJSON ? new ErrorResponse(data.error) : <ErrorResponse>this.error; 
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.timestamp = data["timestamp"] ? new Date(data["timestamp"].toString()) : <any>undefined;
            this.error = data["error"] ? ErrorResponse.fromJS(data["error"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessProcessState {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        return data; 
    }
}

/** State transition information of a business process */
export interface IBusinessProcessState {
    /** State of the business process */
    state: string;
    /** Date and time of when the state transition was performed. */
    timestamp: Date;
    /** Eventual error associated to the state transition. */
    error?: IErrorResponse | undefined;
}

/** Error information with serialized exception */
export class ErrorResponse implements IErrorResponse {
    /** Serialized PictureparkBusinessException. */
    exception?: string | undefined;
    /** Trace ID. */
    traceId?: string | undefined;
    /** Trace job ID. */
    traceJobId?: string | undefined;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exception = data["exception"];
            this.traceId = data["traceId"];
            this.traceJobId = data["traceJobId"];
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exception"] = this.exception;
        data["traceId"] = this.traceId;
        data["traceJobId"] = this.traceJobId;
        return data; 
    }
}

/** Error information with serialized exception */
export interface IErrorResponse {
    /** Serialized PictureparkBusinessException. */
    exception?: string | undefined;
    /** Trace ID. */
    traceId?: string | undefined;
    /** Trace job ID. */
    traceJobId?: string | undefined;
}

export class Exception implements IException {
    message?: string | undefined;
    innerException?: Exception | undefined;
    stackTrace?: string | undefined;
    source?: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.innerException = data.innerException && !(<any>data.innerException).toJSON ? new Exception(data.innerException) : <Exception>this.innerException; 
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"];
            this.innerException = data["innerException"] ? Exception.fromJS(data["innerException"]) : <any>undefined;
            this.stackTrace = data["stackTrace"];
            this.source = data["source"];
        }
    }

    static fromJS(data: any): Exception {
        data = typeof data === 'object' ? data : {};
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["innerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["stackTrace"] = this.stackTrace;
        data["source"] = this.source;
        return data; 
    }
}

export interface IException {
    message?: string | undefined;
    innerException?: IException | undefined;
    stackTrace?: string | undefined;
    source?: string | undefined;
}

export class PictureparkException extends Exception implements IPictureparkException {
    traceLevel!: TraceLevel;
    traceId?: string | undefined;
    traceJobId?: string | undefined;
    httpStatusCode!: number;
    exceptionMessage?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IPictureparkException) {
        super(data);
        this._discriminator = "PictureparkException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.traceLevel = data["traceLevel"];
            this.traceId = data["traceId"];
            this.traceJobId = data["traceJobId"];
            this.httpStatusCode = data["httpStatusCode"];
            this.exceptionMessage = data["exceptionMessage"];
        }
    }

    static fromJS(data: any): PictureparkException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "PictureparkBusinessException") {
            let result = new PictureparkBusinessException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkValidationException") {
            let result = new PictureparkValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkConflictException") {
            let result = new PictureparkConflictException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkTimeoutException") {
            let result = new PictureparkTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkForbiddenException") {
            let result = new PictureparkForbiddenException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserEmailAlreadyExistsException") {
            let result = new UserEmailAlreadyExistsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserRoleAssignedException") {
            let result = new UserRoleAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserNotFoundException") {
            let result = new UserNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserInactiveOrDeletedException") {
            let result = new UserInactiveOrDeletedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InactiveOrDeletedUserRefusedAccessException") {
            let result = new InactiveOrDeletedUserRefusedAccessException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsOfServiceNotNewestException") {
            let result = new TermsOfServiceNotNewestException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IllegalAuthorizationStateTransitionException") {
            let result = new IllegalAuthorizationStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsOfServiceConsentRequiredException") {
            let result = new TermsOfServiceConsentRequiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkNotFoundException") {
            let result = new PictureparkNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserRolesNotFoundException") {
            let result = new UserRolesNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnauthorizedException") {
            let result = new UnauthorizedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserUnlockDisallowedException") {
            let result = new UserUnlockDisallowedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RenderingException") {
            let result = new RenderingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FormatNotApplicableForRenderingException") {
            let result = new FormatNotApplicableForRenderingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ServiceProviderDeleteException") {
            let result = new ServiceProviderDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ServiceProviderCreateException") {
            let result = new ServiceProviderCreateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ServiceProviderNotFoundException") {
            let result = new ServiceProviderNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentVersionNotFoundException") {
            let result = new DocumentVersionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DefaultChannelDeleteException") {
            let result = new DefaultChannelDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChannelsNotFoundException") {
            let result = new ChannelsNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SuperAdminRolesNotAssignableToChannelException") {
            let result = new SuperAdminRolesNotAssignableToChannelException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ElasticVersionUpdateException") {
            let result = new ElasticVersionUpdateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidVersionException") {
            let result = new InvalidVersionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentNotDeactivatedException") {
            let result = new EnvironmentNotDeactivatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentNotFoundException") {
            let result = new EnvironmentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentDeactivationException") {
            let result = new EnvironmentDeactivationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerClonesNotAcceptedException") {
            let result = new CustomerClonesNotAcceptedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareNotFoundException") {
            let result = new ShareNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareByTokenNotFoundException") {
            let result = new ShareByTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TokenGenerationException") {
            let result = new TokenGenerationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareExpiredException") {
            let result = new ShareExpiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareSizeLimitExceededException") {
            let result = new ShareSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputIdNotFoundException") {
            let result = new OutputIdNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputNotFoundException") {
            let result = new OutputNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnableToCreateOrModifyStaticOutputFormatException") {
            let result = new UnableToCreateOrModifyStaticOutputFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingException") {
            let result = new NotSupportedFileMappingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingForDynamicFormatException") {
            let result = new NotSupportedFileMappingForDynamicFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileExtensionException") {
            let result = new NotSupportedFileExtensionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateOutputFormatIdException") {
            let result = new DuplicateOutputFormatIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatResizingNotSupportedException") {
            let result = new OutputFormatResizingNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LeaseNotAcquiredException") {
            let result = new LeaseNotAcquiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OperationInProgressException") {
            let result = new OperationInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RetryException") {
            let result = new RetryException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OwnerTokenNotFoundException") {
            let result = new OwnerTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateException") {
            let result = new InvalidStateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkArgumentNullException") {
            let result = new PictureparkArgumentNullException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectTypeMismatchException") {
            let result = new ObjectTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateTransitionException") {
            let result = new InvalidStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FailedToLockException") {
            let result = new FailedToLockException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkOperationCanceledException") {
            let result = new PictureparkOperationCanceledException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkApplicationException") {
            let result = new PictureparkApplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingCustomerDefaultLanguageException") {
            let result = new MissingCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PartialOperationNotSupportedException") {
            let result = new PartialOperationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContractMismatchException") {
            let result = new ContractMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidArgumentException") {
            let result = new InvalidArgumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ArgumentRangeException") {
            throw new Error("The abstract class 'ArgumentRangeException' cannot be instantiated.");
        }
        if (data["kind"] === "UnknownException") {
            let result = new UnknownException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OwnerTokenInUseException") {
            let result = new OwnerTokenInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidValueFormatException") {
            let result = new InvalidValueFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ItemIdDuplicatedException") {
            let result = new ItemIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RequestSizeLimitExceededException") {
            let result = new RequestSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerViolationException") {
            let result = new CustomerViolationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasNotFoundException") {
            let result = new CustomerAliasNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasInUseException") {
            let result = new CustomerAliasInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerNotDeactivatedException") {
            let result = new CustomerNotDeactivatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerDeactivationException") {
            let result = new CustomerDeactivationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerHostNotFoundException") {
            let result = new CustomerHostNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerNotFoundException") {
            let result = new CustomerNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerNotActiveException") {
            let result = new CustomerNotActiveException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesInvalidException") {
            let result = new CustomerBoostValuesInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotRetentionTimeTooShortException") {
            let result = new SnapshotRetentionTimeTooShortException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ConfigurationIndexNotFoundException") {
            let result = new ConfigurationIndexNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSearchIndexDocException") {
            let result = new DuplicateSearchIndexDocException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexDocNotFoundException") {
            let result = new SearchIndexDocNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexDocumentNotFoundException") {
            let result = new IndexDocumentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateAliasException") {
            let result = new DuplicateAliasException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexNotFoundException") {
            let result = new SearchIndexNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DefaultSearchIndexDeleteException") {
            let result = new DefaultSearchIndexDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexInUseException") {
            let result = new SearchIndexInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexException") {
            let result = new IndexException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexMappingException") {
            let result = new IndexMappingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedSearchBehaviorException") {
            let result = new DuplicatedSearchBehaviorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchStringLeadingWildcardException") {
            let result = new SearchStringLeadingWildcardException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateAggregatorException") {
            let result = new DuplicateAggregatorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDateTimeFormatException") {
            let result = new InvalidDateTimeFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidSortFieldException") {
            let result = new InvalidSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentVersionConflictException") {
            let result = new DocumentVersionConflictException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RedisDatabaseExceededException") {
            let result = new RedisDatabaseExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateDocumentException") {
            let result = new DuplicateDocumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectStoreResponseException") {
            let result = new ObjectStoreResponseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectStoreException") {
            let result = new ObjectStoreException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "QueryException") {
            let result = new QueryException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionOwnershipTransferException") {
            let result = new PermissionOwnershipTransferException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetNotFoundException") {
            let result = new PermissionSetNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetAggregateException") {
            let result = new PermissionSetAggregateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateRightException") {
            let result = new DuplicateRightException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionValidationException") {
            let result = new PermissionValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInUseException") {
            let result = new PermissionSetInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionException") {
            let result = new ContentPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemPermissionException") {
            let result = new ListItemPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionException") {
            let result = new SchemaPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetValidationException") {
            let result = new PermissionSetValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInvalidRightCombinationException") {
            let result = new PermissionSetInvalidRightCombinationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AmbiguousUserRoleRightsException") {
            let result = new AmbiguousUserRoleRightsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnsupportedListItemChangeCommandException") {
            let result = new UnsupportedListItemChangeCommandException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemLayerException") {
            let result = new ListItemLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNotFoundException") {
            let result = new ListItemNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemCyclicDependencyException") {
            let result = new ListItemCyclicDependencyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteListItemsWithReferencesException") {
            let result = new DeleteListItemsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemUpdateManyException") {
            let result = new ListItemUpdateManyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemSchemaMismatchException") {
            let result = new ListItemSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferInfoNotFoundException") {
            let result = new TransferInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileTransferNotFoundException") {
            let result = new FileTransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidTransferTypeException") {
            let result = new InvalidTransferTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferNotFoundException") {
            let result = new TransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "WrongChunkSizeException") {
            let result = new WrongChunkSizeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChunkSizeOutOfRangeException") {
            let result = new ChunkSizeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MaximumTransferSizeException") {
            let result = new MaximumTransferSizeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileIdDuplicatedException") {
            let result = new FileIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDependenciesException") {
            let result = new MissingDependenciesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationSelfReferencingException") {
            let result = new RelationSelfReferencingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldTypeInvalidException") {
            let result = new InvalidChangeCommandFieldTypeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldNotFoundException") {
            let result = new InvalidChangeCommandFieldNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandSchemaChangeInvalidException") {
            let result = new InvalidChangeCommandSchemaChangeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidMetadataException") {
            let result = new InvalidMetadataException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationNotFoundException") {
            let result = new RelationNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeNotFoundException") {
            let result = new RelationTypeNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeTargetDocTypeMismatchException") {
            let result = new RelationTypeTargetDocTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationNameInvalidException") {
            let result = new AggregationNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationSizeInvalidException") {
            let result = new AggregationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationFilterNotSupportedException") {
            let result = new AggregationFilterNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeMissingException") {
            let result = new RelationTypeMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ReferenceUpdateException") {
            let result = new ReferenceUpdateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ReferencesUpdateException") {
            let result = new ReferencesUpdateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedItemAssignedException") {
            let result = new DuplicatedItemAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDataTypeException") {
            let result = new InvalidDataTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInvalidException") {
            let result = new LayerAssignmentInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutdatedMetadataUpdateInProgressException") {
            let result = new OutdatedMetadataUpdateInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteTypeMismatchException") {
            let result = new SchemaFieldOverwriteTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteIdException") {
            let result = new SchemaFieldOverwriteIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdDuplicatedException") {
            let result = new SchemaFieldIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdPreviouslyUsedException") {
            let result = new SchemaFieldIdPreviouslyUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdAlreadyExistsInSchemaHierarchyException") {
            let result = new SchemaFieldIdAlreadyExistsInSchemaHierarchyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoSimpleSearchNestingException") {
            let result = new SchemaFieldSchemaIndexInfoSimpleSearchNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoNestingException") {
            let result = new SchemaFieldSchemaIndexInfoNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdUppercaseException") {
            let result = new SchemaFieldIdUppercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdLowercaseException") {
            let result = new SchemaIdLowercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInfoNotFoundException") {
            let result = new SchemaInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexedFieldThresholdExceededException") {
            let result = new IndexedFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SortableFieldThresholdExceededException") {
            let result = new SortableFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSchemaInfoException") {
            let result = new DuplicateSchemaInfoException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNumberRangeException") {
            let result = new SchemaFieldNumberRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentSchemaException") {
            let result = new SchemaInUseContentSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInUseWithContentsException") {
            let result = new LayerAssignmentInUseWithContentsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseListItemException") {
            let result = new SchemaInUseListItemException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentException") {
            let result = new SchemaInUseContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseFieldException") {
            let result = new SchemaInUseFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateMetadataDisplayPatternException") {
            let result = new DuplicateMetadataDisplayPatternException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSchemaException") {
            let result = new DuplicateSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportEmptyException") {
            let result = new SchemaImportEmptyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportVersionMismatchException") {
            let result = new SchemaImportVersionMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceFieldIndexDeviationException") {
            let result = new SchemaInheritanceFieldIndexDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceTypeDeviationException") {
            let result = new SchemaInheritanceTypeDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaValidationException") {
            let result = new SchemaValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaSortFieldException") {
            let result = new SchemaSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdException") {
            let result = new SchemaFieldIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldTypeChangeException") {
            let result = new SchemaFieldTypeChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIndexException") {
            let result = new SchemaFieldIndexException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSortableException") {
            let result = new SchemaFieldNotSortableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSearchableException") {
            let result = new SchemaFieldNotSearchableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldInvalidBoostException") {
            let result = new SchemaFieldInvalidBoostException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoContentException") {
            let result = new SchemaNoContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaParentChangeException") {
            let result = new SchemaParentChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMissingTypeException") {
            let result = new SchemaMissingTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionConfigurationException") {
            let result = new SchemaPermissionConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoLayerException") {
            let result = new SchemaNoLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdException") {
            let result = new SchemaIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseException") {
            let result = new SchemaInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNotFoundException") {
            let result = new SchemaNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaCountLimitReachedException") {
            let result = new SchemaCountLimitReachedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemSchemaInvalidModificationException") {
            let result = new SystemSchemaInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaSystemSchemaException") {
            let result = new SchemaFieldRelationSchemaSystemSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaTypeUnsupportedException") {
            let result = new SchemaFieldRelationSchemaTypeUnsupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMultipleTypesException") {
            let result = new SchemaMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDisplayPatternForCustomerDefaultLanguageException") {
            let result = new MissingDisplayPatternForCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaViewForAllException") {
            let result = new SchemaViewForAllException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemLayerReferenceInvalidModificationException") {
            let result = new SystemLayerReferenceInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldAnalyzerInvalidException") {
            let result = new SchemaFieldAnalyzerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationMultipleTypesException") {
            let result = new SchemaFieldRelationMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotRequirableException") {
            let result = new SchemaFieldNotRequirableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayPatternTypeNotSupportedException") {
            let result = new DisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteContentsWithReferencesException") {
            let result = new DeleteContentsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentMetadataUpdateManyException") {
            let result = new ContentMetadataUpdateManyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentNotFoundException") {
            let result = new ContentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerInvalidException") {
            let result = new ContentLayerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentFileReplaceTypeMismatchException") {
            let result = new ContentFileReplaceTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentBackupFailedException") {
            let result = new ContentBackupFailedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerSameRootException") {
            let result = new ContentLayerSameRootException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessEngineRequestException") {
            let result = new BusinessProcessEngineRequestException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotFoundException") {
            let result = new BusinessProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDefinitionNotFoundException") {
            let result = new BusinessProcessDefinitionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDefinitionCreateException") {
            let result = new BusinessProcessDefinitionCreateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotExternalException") {
            let result = new BusinessProcessNotExternalException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessCancellationNotSupportedException") {
            let result = new BusinessProcessCancellationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessContinuationException") {
            let result = new BusinessProcessContinuationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportMismatchException") {
            let result = new SchemaFieldImportMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportRelatedSchemaMismatchException") {
            let result = new SchemaFieldImportRelatedSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportTypeMismatchException") {
            let result = new SchemaFieldImportTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSupportedException") {
            let result = new SchemaFieldNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldDisplayPatternTypeNotSupportedException") {
            let result = new SchemaFieldDisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotTimeoutException") {
            let result = new SnapshotTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotFailedException") {
            let result = new SnapshotFailedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotSkippedException") {
            let result = new SnapshotSkippedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AddMetadataLanguageTimeoutException") {
            let result = new AddMetadataLanguageTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessAlreadyRunningException") {
            let result = new EnvironmentProcessAlreadyRunningException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessNotFoundException") {
            let result = new EnvironmentProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessWaitTimeoutException") {
            let result = new EnvironmentProcessWaitTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesUpdateTimeoutException") {
            let result = new CustomerBoostValuesUpdateTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NoTermsOfServiceDefinedException") {
            let result = new NoTermsOfServiceDefinedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AtLeastOneActiveTermsOfServiceMustExistException") {
            let result = new AtLeastOneActiveTermsOfServiceMustExistException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ForbiddenHtmlElementsUsedException") {
            let result = new ForbiddenHtmlElementsUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessStateNotHitException") {
            let result = new BusinessProcessStateNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessLifeCycleNotHitException") {
            let result = new BusinessProcessLifeCycleNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OnlyAccessibleToRecipientException") {
            let result = new OnlyAccessibleToRecipientException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentNotAvailableException") {
            let result = new EnvironmentNotAvailableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerNotAvailableException") {
            let result = new CustomerNotAvailableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasHeaderMissingException") {
            let result = new CustomerAliasHeaderMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidDocumentTypeException") {
            let result = new BusinessRuleActionInvalidDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidExecutionScopeException") {
            let result = new BusinessRuleActionInvalidExecutionScopeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionsMissingException") {
            let result = new BusinessRuleActionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionMissingException") {
            let result = new BusinessRuleConditionMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionsMissingException") {
            let result = new BusinessRuleConditionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConfigurationValidationException") {
            let result = new BusinessRuleConfigurationValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleSchemaIdInvalidException") {
            let result = new BusinessRuleSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePermissionSetIdInvalidException") {
            let result = new BusinessRulePermissionSetIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdDuplicationException") {
            let result = new BusinessRuleRuleIdDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdMissingException") {
            let result = new BusinessRuleRuleIdMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTriggerPointMissingException") {
            let result = new BusinessRuleTriggerPointMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleValidationException") {
            let result = new BusinessRuleValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointDocumentTypeException") {
            let result = new BusinessRuleConditionInvalidTriggerPointDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRegularExpressionInvalidException") {
            let result = new BusinessRuleRegularExpressionInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointActionException") {
            let result = new BusinessRuleConditionInvalidTriggerPointActionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRefIdsMissingException") {
            let result = new BusinessRuleRefIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePathInvalidException") {
            let result = new BusinessRulePathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldIdInvalidException") {
            let result = new BusinessRuleFieldIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleContentPermissionSetIdsMissingException") {
            let result = new BusinessRuleContentPermissionSetIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldPathInvalidException") {
            let result = new BusinessRuleFieldPathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePolygonInvalidException") {
            let result = new BusinessRulePolygonInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleArrayIndexInvalidException") {
            let result = new BusinessRuleArrayIndexInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleDictionaryKeyInvalidException") {
            let result = new BusinessRuleDictionaryKeyInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleProjectionTransformationsMissingException") {
            let result = new BusinessRuleProjectionTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleInvalidVariableNameException") {
            let result = new BusinessRuleInvalidVariableNameException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupTransformationsMissingException") {
            let result = new BusinessRuleTransformationGroupTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupInputsMissingException") {
            let result = new BusinessRuleTransformationGroupInputsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNamedCacheNameInvalidException") {
            let result = new BusinessRuleNamedCacheNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationSizeInvalidException") {
            let result = new BusinessRuleNGramTransformationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMinWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMinWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMaxWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMaxWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheConfigurationException") {
            let result = new NamedCacheConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameMissingException") {
            let result = new NamedCacheNameMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameDuplicationException") {
            let result = new NamedCacheNameDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheSchemaIdInvalidException") {
            let result = new ListItemNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheKeyFieldsInvalidException") {
            let result = new ListItemNamedCacheKeyFieldsInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException") {
            let result = new SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NoTagsFoundException") {
            let result = new NoTagsFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputNotAvailableException") {
            let result = new OutputNotAvailableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ModelNotFoundException") {
            let result = new ModelNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayValueRerenderingInProgressException") {
            let result = new DisplayValueRerenderingInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatNotFoundException") {
            let result = new OutputFormatNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatSourceNotDefinedException") {
            let result = new OutputFormatSourceNotDefinedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatRetentionTimeOutOfRangeException") {
            let result = new OutputFormatRetentionTimeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CollectionSizeLimitExceededException") {
            let result = new CollectionSizeLimitExceededException();
            result.init(data);
            return result;
        }
        let result = new PictureparkException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["traceLevel"] = this.traceLevel;
        data["traceId"] = this.traceId;
        data["traceJobId"] = this.traceJobId;
        data["httpStatusCode"] = this.httpStatusCode;
        data["exceptionMessage"] = this.exceptionMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkException extends IException {
    traceLevel: TraceLevel;
    traceId?: string | undefined;
    traceJobId?: string | undefined;
    httpStatusCode: number;
    exceptionMessage?: string | undefined;
}

export enum TraceLevel {
    Critical = "Critical",
    Error = "Error",
    Warning = "Warning",
    Information = "Information",
    Verbose = "Verbose",
}

export class PictureparkBusinessException extends PictureparkException implements IPictureparkBusinessException {
    customerId?: string | undefined;
    customerAlias?: string | undefined;
    userId?: string | undefined;

    constructor(data?: IPictureparkBusinessException) {
        super(data);
        this._discriminator = "PictureparkBusinessException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
            this.customerAlias = data["customerAlias"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): PictureparkBusinessException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "PictureparkValidationException") {
            let result = new PictureparkValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkConflictException") {
            let result = new PictureparkConflictException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkTimeoutException") {
            let result = new PictureparkTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkForbiddenException") {
            let result = new PictureparkForbiddenException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserEmailAlreadyExistsException") {
            let result = new UserEmailAlreadyExistsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserRoleAssignedException") {
            let result = new UserRoleAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserNotFoundException") {
            let result = new UserNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserInactiveOrDeletedException") {
            let result = new UserInactiveOrDeletedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InactiveOrDeletedUserRefusedAccessException") {
            let result = new InactiveOrDeletedUserRefusedAccessException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsOfServiceNotNewestException") {
            let result = new TermsOfServiceNotNewestException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IllegalAuthorizationStateTransitionException") {
            let result = new IllegalAuthorizationStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsOfServiceConsentRequiredException") {
            let result = new TermsOfServiceConsentRequiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkNotFoundException") {
            let result = new PictureparkNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserRolesNotFoundException") {
            let result = new UserRolesNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnauthorizedException") {
            let result = new UnauthorizedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserUnlockDisallowedException") {
            let result = new UserUnlockDisallowedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RenderingException") {
            let result = new RenderingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FormatNotApplicableForRenderingException") {
            let result = new FormatNotApplicableForRenderingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentVersionNotFoundException") {
            let result = new DocumentVersionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DefaultChannelDeleteException") {
            let result = new DefaultChannelDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChannelsNotFoundException") {
            let result = new ChannelsNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SuperAdminRolesNotAssignableToChannelException") {
            let result = new SuperAdminRolesNotAssignableToChannelException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerClonesNotAcceptedException") {
            let result = new CustomerClonesNotAcceptedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareNotFoundException") {
            let result = new ShareNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareByTokenNotFoundException") {
            let result = new ShareByTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TokenGenerationException") {
            let result = new TokenGenerationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareExpiredException") {
            let result = new ShareExpiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareSizeLimitExceededException") {
            let result = new ShareSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputIdNotFoundException") {
            let result = new OutputIdNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputNotFoundException") {
            let result = new OutputNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnableToCreateOrModifyStaticOutputFormatException") {
            let result = new UnableToCreateOrModifyStaticOutputFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingException") {
            let result = new NotSupportedFileMappingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingForDynamicFormatException") {
            let result = new NotSupportedFileMappingForDynamicFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileExtensionException") {
            let result = new NotSupportedFileExtensionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateOutputFormatIdException") {
            let result = new DuplicateOutputFormatIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatResizingNotSupportedException") {
            let result = new OutputFormatResizingNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LeaseNotAcquiredException") {
            let result = new LeaseNotAcquiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OperationInProgressException") {
            let result = new OperationInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RetryException") {
            let result = new RetryException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OwnerTokenNotFoundException") {
            let result = new OwnerTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateException") {
            let result = new InvalidStateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkArgumentNullException") {
            let result = new PictureparkArgumentNullException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectTypeMismatchException") {
            let result = new ObjectTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateTransitionException") {
            let result = new InvalidStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FailedToLockException") {
            let result = new FailedToLockException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkOperationCanceledException") {
            let result = new PictureparkOperationCanceledException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkApplicationException") {
            let result = new PictureparkApplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingCustomerDefaultLanguageException") {
            let result = new MissingCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PartialOperationNotSupportedException") {
            let result = new PartialOperationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContractMismatchException") {
            let result = new ContractMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidArgumentException") {
            let result = new InvalidArgumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ArgumentRangeException") {
            throw new Error("The abstract class 'ArgumentRangeException' cannot be instantiated.");
        }
        if (data["kind"] === "UnknownException") {
            let result = new UnknownException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OwnerTokenInUseException") {
            let result = new OwnerTokenInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidValueFormatException") {
            let result = new InvalidValueFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ItemIdDuplicatedException") {
            let result = new ItemIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RequestSizeLimitExceededException") {
            let result = new RequestSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasInUseException") {
            let result = new CustomerAliasInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesInvalidException") {
            let result = new CustomerBoostValuesInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotRetentionTimeTooShortException") {
            let result = new SnapshotRetentionTimeTooShortException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSearchIndexDocException") {
            let result = new DuplicateSearchIndexDocException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexDocNotFoundException") {
            let result = new SearchIndexDocNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexDocumentNotFoundException") {
            let result = new IndexDocumentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexNotFoundException") {
            let result = new SearchIndexNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DefaultSearchIndexDeleteException") {
            let result = new DefaultSearchIndexDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchIndexInUseException") {
            let result = new SearchIndexInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexException") {
            let result = new IndexException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexMappingException") {
            let result = new IndexMappingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedSearchBehaviorException") {
            let result = new DuplicatedSearchBehaviorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchStringLeadingWildcardException") {
            let result = new SearchStringLeadingWildcardException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateAggregatorException") {
            let result = new DuplicateAggregatorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDateTimeFormatException") {
            let result = new InvalidDateTimeFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidSortFieldException") {
            let result = new InvalidSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentVersionConflictException") {
            let result = new DocumentVersionConflictException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateDocumentException") {
            let result = new DuplicateDocumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectStoreResponseException") {
            let result = new ObjectStoreResponseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ObjectStoreException") {
            let result = new ObjectStoreException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "QueryException") {
            let result = new QueryException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionOwnershipTransferException") {
            let result = new PermissionOwnershipTransferException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetNotFoundException") {
            let result = new PermissionSetNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetAggregateException") {
            let result = new PermissionSetAggregateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateRightException") {
            let result = new DuplicateRightException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionValidationException") {
            let result = new PermissionValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInUseException") {
            let result = new PermissionSetInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionException") {
            let result = new ContentPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemPermissionException") {
            let result = new ListItemPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionException") {
            let result = new SchemaPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetValidationException") {
            let result = new PermissionSetValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInvalidRightCombinationException") {
            let result = new PermissionSetInvalidRightCombinationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AmbiguousUserRoleRightsException") {
            let result = new AmbiguousUserRoleRightsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnsupportedListItemChangeCommandException") {
            let result = new UnsupportedListItemChangeCommandException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemLayerException") {
            let result = new ListItemLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNotFoundException") {
            let result = new ListItemNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemCyclicDependencyException") {
            let result = new ListItemCyclicDependencyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteListItemsWithReferencesException") {
            let result = new DeleteListItemsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemUpdateManyException") {
            let result = new ListItemUpdateManyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemSchemaMismatchException") {
            let result = new ListItemSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferInfoNotFoundException") {
            let result = new TransferInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileTransferNotFoundException") {
            let result = new FileTransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidTransferTypeException") {
            let result = new InvalidTransferTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferNotFoundException") {
            let result = new TransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "WrongChunkSizeException") {
            let result = new WrongChunkSizeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChunkSizeOutOfRangeException") {
            let result = new ChunkSizeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileIdDuplicatedException") {
            let result = new FileIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDependenciesException") {
            let result = new MissingDependenciesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationSelfReferencingException") {
            let result = new RelationSelfReferencingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldTypeInvalidException") {
            let result = new InvalidChangeCommandFieldTypeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldNotFoundException") {
            let result = new InvalidChangeCommandFieldNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandSchemaChangeInvalidException") {
            let result = new InvalidChangeCommandSchemaChangeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidMetadataException") {
            let result = new InvalidMetadataException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationNotFoundException") {
            let result = new RelationNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeNotFoundException") {
            let result = new RelationTypeNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeTargetDocTypeMismatchException") {
            let result = new RelationTypeTargetDocTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationNameInvalidException") {
            let result = new AggregationNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationSizeInvalidException") {
            let result = new AggregationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationFilterNotSupportedException") {
            let result = new AggregationFilterNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationTypeMissingException") {
            let result = new RelationTypeMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ReferenceUpdateException") {
            let result = new ReferenceUpdateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ReferencesUpdateException") {
            let result = new ReferencesUpdateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedItemAssignedException") {
            let result = new DuplicatedItemAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDataTypeException") {
            let result = new InvalidDataTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInvalidException") {
            let result = new LayerAssignmentInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutdatedMetadataUpdateInProgressException") {
            let result = new OutdatedMetadataUpdateInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteTypeMismatchException") {
            let result = new SchemaFieldOverwriteTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteIdException") {
            let result = new SchemaFieldOverwriteIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdDuplicatedException") {
            let result = new SchemaFieldIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdPreviouslyUsedException") {
            let result = new SchemaFieldIdPreviouslyUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdAlreadyExistsInSchemaHierarchyException") {
            let result = new SchemaFieldIdAlreadyExistsInSchemaHierarchyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoSimpleSearchNestingException") {
            let result = new SchemaFieldSchemaIndexInfoSimpleSearchNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoNestingException") {
            let result = new SchemaFieldSchemaIndexInfoNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdUppercaseException") {
            let result = new SchemaFieldIdUppercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdLowercaseException") {
            let result = new SchemaIdLowercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInfoNotFoundException") {
            let result = new SchemaInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexedFieldThresholdExceededException") {
            let result = new IndexedFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SortableFieldThresholdExceededException") {
            let result = new SortableFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSchemaInfoException") {
            let result = new DuplicateSchemaInfoException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNumberRangeException") {
            let result = new SchemaFieldNumberRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentSchemaException") {
            let result = new SchemaInUseContentSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInUseWithContentsException") {
            let result = new LayerAssignmentInUseWithContentsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseListItemException") {
            let result = new SchemaInUseListItemException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentException") {
            let result = new SchemaInUseContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseFieldException") {
            let result = new SchemaInUseFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateMetadataDisplayPatternException") {
            let result = new DuplicateMetadataDisplayPatternException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSchemaException") {
            let result = new DuplicateSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportEmptyException") {
            let result = new SchemaImportEmptyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportVersionMismatchException") {
            let result = new SchemaImportVersionMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceFieldIndexDeviationException") {
            let result = new SchemaInheritanceFieldIndexDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceTypeDeviationException") {
            let result = new SchemaInheritanceTypeDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaValidationException") {
            let result = new SchemaValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaSortFieldException") {
            let result = new SchemaSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdException") {
            let result = new SchemaFieldIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldTypeChangeException") {
            let result = new SchemaFieldTypeChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIndexException") {
            let result = new SchemaFieldIndexException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSortableException") {
            let result = new SchemaFieldNotSortableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSearchableException") {
            let result = new SchemaFieldNotSearchableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldInvalidBoostException") {
            let result = new SchemaFieldInvalidBoostException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoContentException") {
            let result = new SchemaNoContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaParentChangeException") {
            let result = new SchemaParentChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMissingTypeException") {
            let result = new SchemaMissingTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionConfigurationException") {
            let result = new SchemaPermissionConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoLayerException") {
            let result = new SchemaNoLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdException") {
            let result = new SchemaIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseException") {
            let result = new SchemaInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNotFoundException") {
            let result = new SchemaNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaCountLimitReachedException") {
            let result = new SchemaCountLimitReachedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemSchemaInvalidModificationException") {
            let result = new SystemSchemaInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaSystemSchemaException") {
            let result = new SchemaFieldRelationSchemaSystemSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaTypeUnsupportedException") {
            let result = new SchemaFieldRelationSchemaTypeUnsupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMultipleTypesException") {
            let result = new SchemaMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDisplayPatternForCustomerDefaultLanguageException") {
            let result = new MissingDisplayPatternForCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaViewForAllException") {
            let result = new SchemaViewForAllException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemLayerReferenceInvalidModificationException") {
            let result = new SystemLayerReferenceInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldAnalyzerInvalidException") {
            let result = new SchemaFieldAnalyzerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationMultipleTypesException") {
            let result = new SchemaFieldRelationMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotRequirableException") {
            let result = new SchemaFieldNotRequirableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayPatternTypeNotSupportedException") {
            let result = new DisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteContentsWithReferencesException") {
            let result = new DeleteContentsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentMetadataUpdateManyException") {
            let result = new ContentMetadataUpdateManyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentNotFoundException") {
            let result = new ContentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerInvalidException") {
            let result = new ContentLayerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentFileReplaceTypeMismatchException") {
            let result = new ContentFileReplaceTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentBackupFailedException") {
            let result = new ContentBackupFailedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerSameRootException") {
            let result = new ContentLayerSameRootException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessEngineRequestException") {
            let result = new BusinessProcessEngineRequestException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotFoundException") {
            let result = new BusinessProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDefinitionNotFoundException") {
            let result = new BusinessProcessDefinitionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDefinitionCreateException") {
            let result = new BusinessProcessDefinitionCreateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotExternalException") {
            let result = new BusinessProcessNotExternalException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessCancellationNotSupportedException") {
            let result = new BusinessProcessCancellationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessContinuationException") {
            let result = new BusinessProcessContinuationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportMismatchException") {
            let result = new SchemaFieldImportMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportRelatedSchemaMismatchException") {
            let result = new SchemaFieldImportRelatedSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportTypeMismatchException") {
            let result = new SchemaFieldImportTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSupportedException") {
            let result = new SchemaFieldNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldDisplayPatternTypeNotSupportedException") {
            let result = new SchemaFieldDisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotTimeoutException") {
            let result = new SnapshotTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotFailedException") {
            let result = new SnapshotFailedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotSkippedException") {
            let result = new SnapshotSkippedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AddMetadataLanguageTimeoutException") {
            let result = new AddMetadataLanguageTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessAlreadyRunningException") {
            let result = new EnvironmentProcessAlreadyRunningException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessNotFoundException") {
            let result = new EnvironmentProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessWaitTimeoutException") {
            let result = new EnvironmentProcessWaitTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesUpdateTimeoutException") {
            let result = new CustomerBoostValuesUpdateTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NoTermsOfServiceDefinedException") {
            let result = new NoTermsOfServiceDefinedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AtLeastOneActiveTermsOfServiceMustExistException") {
            let result = new AtLeastOneActiveTermsOfServiceMustExistException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ForbiddenHtmlElementsUsedException") {
            let result = new ForbiddenHtmlElementsUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessStateNotHitException") {
            let result = new BusinessProcessStateNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessLifeCycleNotHitException") {
            let result = new BusinessProcessLifeCycleNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OnlyAccessibleToRecipientException") {
            let result = new OnlyAccessibleToRecipientException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasHeaderMissingException") {
            let result = new CustomerAliasHeaderMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidDocumentTypeException") {
            let result = new BusinessRuleActionInvalidDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidExecutionScopeException") {
            let result = new BusinessRuleActionInvalidExecutionScopeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionsMissingException") {
            let result = new BusinessRuleActionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionMissingException") {
            let result = new BusinessRuleConditionMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionsMissingException") {
            let result = new BusinessRuleConditionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConfigurationValidationException") {
            let result = new BusinessRuleConfigurationValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleSchemaIdInvalidException") {
            let result = new BusinessRuleSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePermissionSetIdInvalidException") {
            let result = new BusinessRulePermissionSetIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdDuplicationException") {
            let result = new BusinessRuleRuleIdDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdMissingException") {
            let result = new BusinessRuleRuleIdMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTriggerPointMissingException") {
            let result = new BusinessRuleTriggerPointMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleValidationException") {
            let result = new BusinessRuleValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointDocumentTypeException") {
            let result = new BusinessRuleConditionInvalidTriggerPointDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRegularExpressionInvalidException") {
            let result = new BusinessRuleRegularExpressionInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointActionException") {
            let result = new BusinessRuleConditionInvalidTriggerPointActionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRefIdsMissingException") {
            let result = new BusinessRuleRefIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePathInvalidException") {
            let result = new BusinessRulePathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldIdInvalidException") {
            let result = new BusinessRuleFieldIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleContentPermissionSetIdsMissingException") {
            let result = new BusinessRuleContentPermissionSetIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldPathInvalidException") {
            let result = new BusinessRuleFieldPathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePolygonInvalidException") {
            let result = new BusinessRulePolygonInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleArrayIndexInvalidException") {
            let result = new BusinessRuleArrayIndexInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleDictionaryKeyInvalidException") {
            let result = new BusinessRuleDictionaryKeyInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleProjectionTransformationsMissingException") {
            let result = new BusinessRuleProjectionTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleInvalidVariableNameException") {
            let result = new BusinessRuleInvalidVariableNameException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupTransformationsMissingException") {
            let result = new BusinessRuleTransformationGroupTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupInputsMissingException") {
            let result = new BusinessRuleTransformationGroupInputsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNamedCacheNameInvalidException") {
            let result = new BusinessRuleNamedCacheNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationSizeInvalidException") {
            let result = new BusinessRuleNGramTransformationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMinWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMinWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMaxWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMaxWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheConfigurationException") {
            let result = new NamedCacheConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameMissingException") {
            let result = new NamedCacheNameMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameDuplicationException") {
            let result = new NamedCacheNameDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheSchemaIdInvalidException") {
            let result = new ListItemNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheKeyFieldsInvalidException") {
            let result = new ListItemNamedCacheKeyFieldsInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException") {
            let result = new SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NoTagsFoundException") {
            let result = new NoTagsFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputNotAvailableException") {
            let result = new OutputNotAvailableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ModelNotFoundException") {
            let result = new ModelNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayValueRerenderingInProgressException") {
            let result = new DisplayValueRerenderingInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatNotFoundException") {
            let result = new OutputFormatNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatSourceNotDefinedException") {
            let result = new OutputFormatSourceNotDefinedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatRetentionTimeOutOfRangeException") {
            let result = new OutputFormatRetentionTimeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CollectionSizeLimitExceededException") {
            let result = new CollectionSizeLimitExceededException();
            result.init(data);
            return result;
        }
        let result = new PictureparkBusinessException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["customerAlias"] = this.customerAlias;
        data["userId"] = this.userId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkBusinessException extends IPictureparkException {
    customerId?: string | undefined;
    customerAlias?: string | undefined;
    userId?: string | undefined;
}

export class PictureparkValidationException extends PictureparkBusinessException implements IPictureparkValidationException {

    constructor(data?: IPictureparkValidationException) {
        super(data);
        this._discriminator = "PictureparkValidationException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PictureparkValidationException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "PictureparkTimeoutException") {
            let result = new PictureparkTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserEmailAlreadyExistsException") {
            let result = new UserEmailAlreadyExistsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserRoleAssignedException") {
            let result = new UserRoleAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserInactiveOrDeletedException") {
            let result = new UserInactiveOrDeletedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IllegalAuthorizationStateTransitionException") {
            let result = new IllegalAuthorizationStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UserUnlockDisallowedException") {
            let result = new UserUnlockDisallowedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DefaultChannelDeleteException") {
            let result = new DefaultChannelDeleteException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SuperAdminRolesNotAssignableToChannelException") {
            let result = new SuperAdminRolesNotAssignableToChannelException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerClonesNotAcceptedException") {
            let result = new CustomerClonesNotAcceptedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareSizeLimitExceededException") {
            let result = new ShareSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnableToCreateOrModifyStaticOutputFormatException") {
            let result = new UnableToCreateOrModifyStaticOutputFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingException") {
            let result = new NotSupportedFileMappingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileMappingForDynamicFormatException") {
            let result = new NotSupportedFileMappingForDynamicFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotSupportedFileExtensionException") {
            let result = new NotSupportedFileExtensionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateOutputFormatIdException") {
            let result = new DuplicateOutputFormatIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatResizingNotSupportedException") {
            let result = new OutputFormatResizingNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateException") {
            let result = new InvalidStateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PictureparkArgumentNullException") {
            let result = new PictureparkArgumentNullException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidStateTransitionException") {
            let result = new InvalidStateTransitionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingCustomerDefaultLanguageException") {
            let result = new MissingCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PartialOperationNotSupportedException") {
            let result = new PartialOperationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContractMismatchException") {
            let result = new ContractMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidArgumentException") {
            let result = new InvalidArgumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ArgumentRangeException") {
            throw new Error("The abstract class 'ArgumentRangeException' cannot be instantiated.");
        }
        if (data["kind"] === "OwnerTokenInUseException") {
            let result = new OwnerTokenInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidValueFormatException") {
            let result = new InvalidValueFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ItemIdDuplicatedException") {
            let result = new ItemIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RequestSizeLimitExceededException") {
            let result = new RequestSizeLimitExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesInvalidException") {
            let result = new CustomerBoostValuesInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotRetentionTimeTooShortException") {
            let result = new SnapshotRetentionTimeTooShortException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedSearchBehaviorException") {
            let result = new DuplicatedSearchBehaviorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchStringLeadingWildcardException") {
            let result = new SearchStringLeadingWildcardException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateAggregatorException") {
            let result = new DuplicateAggregatorException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDateTimeFormatException") {
            let result = new InvalidDateTimeFormatException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidSortFieldException") {
            let result = new InvalidSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateDocumentException") {
            let result = new DuplicateDocumentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionOwnershipTransferException") {
            let result = new PermissionOwnershipTransferException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetAggregateException") {
            let result = new PermissionSetAggregateException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateRightException") {
            let result = new DuplicateRightException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionValidationException") {
            let result = new PermissionValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInUseException") {
            let result = new PermissionSetInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionException") {
            let result = new ContentPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemPermissionException") {
            let result = new ListItemPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionException") {
            let result = new SchemaPermissionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetValidationException") {
            let result = new PermissionSetValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetInvalidRightCombinationException") {
            let result = new PermissionSetInvalidRightCombinationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AmbiguousUserRoleRightsException") {
            let result = new AmbiguousUserRoleRightsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnsupportedListItemChangeCommandException") {
            let result = new UnsupportedListItemChangeCommandException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemLayerException") {
            let result = new ListItemLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteListItemsWithReferencesException") {
            let result = new DeleteListItemsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemSchemaMismatchException") {
            let result = new ListItemSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "WrongChunkSizeException") {
            let result = new WrongChunkSizeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChunkSizeOutOfRangeException") {
            let result = new ChunkSizeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileIdDuplicatedException") {
            let result = new FileIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDependenciesException") {
            let result = new MissingDependenciesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "RelationSelfReferencingException") {
            let result = new RelationSelfReferencingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldTypeInvalidException") {
            let result = new InvalidChangeCommandFieldTypeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandFieldNotFoundException") {
            let result = new InvalidChangeCommandFieldNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidChangeCommandSchemaChangeInvalidException") {
            let result = new InvalidChangeCommandSchemaChangeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidMetadataException") {
            let result = new InvalidMetadataException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationNameInvalidException") {
            let result = new AggregationNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationSizeInvalidException") {
            let result = new AggregationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationFilterNotSupportedException") {
            let result = new AggregationFilterNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicatedItemAssignedException") {
            let result = new DuplicatedItemAssignedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InvalidDataTypeException") {
            let result = new InvalidDataTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInvalidException") {
            let result = new LayerAssignmentInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutdatedMetadataUpdateInProgressException") {
            let result = new OutdatedMetadataUpdateInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteTypeMismatchException") {
            let result = new SchemaFieldOverwriteTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldOverwriteIdException") {
            let result = new SchemaFieldOverwriteIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdDuplicatedException") {
            let result = new SchemaFieldIdDuplicatedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdPreviouslyUsedException") {
            let result = new SchemaFieldIdPreviouslyUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdAlreadyExistsInSchemaHierarchyException") {
            let result = new SchemaFieldIdAlreadyExistsInSchemaHierarchyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoSimpleSearchNestingException") {
            let result = new SchemaFieldSchemaIndexInfoSimpleSearchNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldSchemaIndexInfoNestingException") {
            let result = new SchemaFieldSchemaIndexInfoNestingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdUppercaseException") {
            let result = new SchemaFieldIdUppercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdLowercaseException") {
            let result = new SchemaIdLowercaseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "IndexedFieldThresholdExceededException") {
            let result = new IndexedFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SortableFieldThresholdExceededException") {
            let result = new SortableFieldThresholdExceededException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNumberRangeException") {
            let result = new SchemaFieldNumberRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentSchemaException") {
            let result = new SchemaInUseContentSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignmentInUseWithContentsException") {
            let result = new LayerAssignmentInUseWithContentsException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseListItemException") {
            let result = new SchemaInUseListItemException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseContentException") {
            let result = new SchemaInUseContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseFieldException") {
            let result = new SchemaInUseFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateMetadataDisplayPatternException") {
            let result = new DuplicateMetadataDisplayPatternException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DuplicateSchemaException") {
            let result = new DuplicateSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportEmptyException") {
            let result = new SchemaImportEmptyException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaImportVersionMismatchException") {
            let result = new SchemaImportVersionMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceFieldIndexDeviationException") {
            let result = new SchemaInheritanceFieldIndexDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInheritanceTypeDeviationException") {
            let result = new SchemaInheritanceTypeDeviationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaValidationException") {
            let result = new SchemaValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaSortFieldException") {
            let result = new SchemaSortFieldException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIdException") {
            let result = new SchemaFieldIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldTypeChangeException") {
            let result = new SchemaFieldTypeChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldIndexException") {
            let result = new SchemaFieldIndexException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSortableException") {
            let result = new SchemaFieldNotSortableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSearchableException") {
            let result = new SchemaFieldNotSearchableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldInvalidBoostException") {
            let result = new SchemaFieldInvalidBoostException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoContentException") {
            let result = new SchemaNoContentException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaParentChangeException") {
            let result = new SchemaParentChangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMissingTypeException") {
            let result = new SchemaMissingTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaPermissionConfigurationException") {
            let result = new SchemaPermissionConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNoLayerException") {
            let result = new SchemaNoLayerException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaIdException") {
            let result = new SchemaIdException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInUseException") {
            let result = new SchemaInUseException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemSchemaInvalidModificationException") {
            let result = new SystemSchemaInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaSystemSchemaException") {
            let result = new SchemaFieldRelationSchemaSystemSchemaException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationSchemaTypeUnsupportedException") {
            let result = new SchemaFieldRelationSchemaTypeUnsupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaMultipleTypesException") {
            let result = new SchemaMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MissingDisplayPatternForCustomerDefaultLanguageException") {
            let result = new MissingDisplayPatternForCustomerDefaultLanguageException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaViewForAllException") {
            let result = new SchemaViewForAllException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SystemLayerReferenceInvalidModificationException") {
            let result = new SystemLayerReferenceInvalidModificationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldAnalyzerInvalidException") {
            let result = new SchemaFieldAnalyzerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldRelationMultipleTypesException") {
            let result = new SchemaFieldRelationMultipleTypesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotRequirableException") {
            let result = new SchemaFieldNotRequirableException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayPatternTypeNotSupportedException") {
            let result = new DisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DeleteContentsWithReferencesException") {
            let result = new DeleteContentsWithReferencesException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerInvalidException") {
            let result = new ContentLayerInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentFileReplaceTypeMismatchException") {
            let result = new ContentFileReplaceTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentLayerSameRootException") {
            let result = new ContentLayerSameRootException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessCancellationNotSupportedException") {
            let result = new BusinessProcessCancellationNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportMismatchException") {
            let result = new SchemaFieldImportMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportRelatedSchemaMismatchException") {
            let result = new SchemaFieldImportRelatedSchemaMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldImportTypeMismatchException") {
            let result = new SchemaFieldImportTypeMismatchException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldNotSupportedException") {
            let result = new SchemaFieldNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaFieldDisplayPatternTypeNotSupportedException") {
            let result = new SchemaFieldDisplayPatternTypeNotSupportedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SnapshotTimeoutException") {
            let result = new SnapshotTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AddMetadataLanguageTimeoutException") {
            let result = new AddMetadataLanguageTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessAlreadyRunningException") {
            let result = new EnvironmentProcessAlreadyRunningException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessWaitTimeoutException") {
            let result = new EnvironmentProcessWaitTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesUpdateTimeoutException") {
            let result = new CustomerBoostValuesUpdateTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AtLeastOneActiveTermsOfServiceMustExistException") {
            let result = new AtLeastOneActiveTermsOfServiceMustExistException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ForbiddenHtmlElementsUsedException") {
            let result = new ForbiddenHtmlElementsUsedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessStateNotHitException") {
            let result = new BusinessProcessStateNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessLifeCycleNotHitException") {
            let result = new BusinessProcessLifeCycleNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OnlyAccessibleToRecipientException") {
            let result = new OnlyAccessibleToRecipientException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerAliasHeaderMissingException") {
            let result = new CustomerAliasHeaderMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidDocumentTypeException") {
            let result = new BusinessRuleActionInvalidDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionInvalidExecutionScopeException") {
            let result = new BusinessRuleActionInvalidExecutionScopeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleActionsMissingException") {
            let result = new BusinessRuleActionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionMissingException") {
            let result = new BusinessRuleConditionMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionsMissingException") {
            let result = new BusinessRuleConditionsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConfigurationValidationException") {
            let result = new BusinessRuleConfigurationValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleSchemaIdInvalidException") {
            let result = new BusinessRuleSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePermissionSetIdInvalidException") {
            let result = new BusinessRulePermissionSetIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdDuplicationException") {
            let result = new BusinessRuleRuleIdDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRuleIdMissingException") {
            let result = new BusinessRuleRuleIdMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTriggerPointMissingException") {
            let result = new BusinessRuleTriggerPointMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleValidationException") {
            let result = new BusinessRuleValidationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointDocumentTypeException") {
            let result = new BusinessRuleConditionInvalidTriggerPointDocumentTypeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRegularExpressionInvalidException") {
            let result = new BusinessRuleRegularExpressionInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleConditionInvalidTriggerPointActionException") {
            let result = new BusinessRuleConditionInvalidTriggerPointActionException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleRefIdsMissingException") {
            let result = new BusinessRuleRefIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePathInvalidException") {
            let result = new BusinessRulePathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldIdInvalidException") {
            let result = new BusinessRuleFieldIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleContentPermissionSetIdsMissingException") {
            let result = new BusinessRuleContentPermissionSetIdsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFieldPathInvalidException") {
            let result = new BusinessRuleFieldPathInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRulePolygonInvalidException") {
            let result = new BusinessRulePolygonInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleArrayIndexInvalidException") {
            let result = new BusinessRuleArrayIndexInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleDictionaryKeyInvalidException") {
            let result = new BusinessRuleDictionaryKeyInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleProjectionTransformationsMissingException") {
            let result = new BusinessRuleProjectionTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleInvalidVariableNameException") {
            let result = new BusinessRuleInvalidVariableNameException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupTransformationsMissingException") {
            let result = new BusinessRuleTransformationGroupTransformationsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleTransformationGroupInputsMissingException") {
            let result = new BusinessRuleTransformationGroupInputsMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNamedCacheNameInvalidException") {
            let result = new BusinessRuleNamedCacheNameInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationSizeInvalidException") {
            let result = new BusinessRuleNGramTransformationSizeInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMinWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMinWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleNGramTransformationMaxWordLengthInvalidException") {
            let result = new BusinessRuleNGramTransformationMaxWordLengthInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheConfigurationException") {
            let result = new NamedCacheConfigurationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameMissingException") {
            let result = new NamedCacheNameMissingException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NamedCacheNameDuplicationException") {
            let result = new NamedCacheNameDuplicationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheSchemaIdInvalidException") {
            let result = new ListItemNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNamedCacheKeyFieldsInvalidException") {
            let result = new ListItemNamedCacheKeyFieldsInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException") {
            let result = new SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DisplayValueRerenderingInProgressException") {
            let result = new DisplayValueRerenderingInProgressException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatSourceNotDefinedException") {
            let result = new OutputFormatSourceNotDefinedException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatRetentionTimeOutOfRangeException") {
            let result = new OutputFormatRetentionTimeOutOfRangeException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CollectionSizeLimitExceededException") {
            let result = new CollectionSizeLimitExceededException();
            result.init(data);
            return result;
        }
        let result = new PictureparkValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkValidationException extends IPictureparkBusinessException {
}

export class PictureparkConflictException extends PictureparkBusinessException implements IPictureparkConflictException {
    reference?: string | undefined;

    constructor(data?: IPictureparkConflictException) {
        super(data);
        this._discriminator = "PictureparkConflictException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.reference = data["reference"];
        }
    }

    static fromJS(data: any): PictureparkConflictException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "DocumentVersionConflictException") {
            let result = new DocumentVersionConflictException();
            result.init(data);
            return result;
        }
        let result = new PictureparkConflictException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reference"] = this.reference;
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkConflictException extends IPictureparkBusinessException {
    reference?: string | undefined;
}

export class PictureparkTimeoutException extends PictureparkValidationException implements IPictureparkTimeoutException {

    constructor(data?: IPictureparkTimeoutException) {
        super(data);
        this._discriminator = "PictureparkTimeoutException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PictureparkTimeoutException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "SnapshotTimeoutException") {
            let result = new SnapshotTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AddMetadataLanguageTimeoutException") {
            let result = new AddMetadataLanguageTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessWaitTimeoutException") {
            let result = new EnvironmentProcessWaitTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerBoostValuesUpdateTimeoutException") {
            let result = new CustomerBoostValuesUpdateTimeoutException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessStateNotHitException") {
            let result = new BusinessProcessStateNotHitException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessLifeCycleNotHitException") {
            let result = new BusinessProcessLifeCycleNotHitException();
            result.init(data);
            return result;
        }
        let result = new PictureparkTimeoutException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkTimeoutException extends IPictureparkValidationException {
}

export class PictureparkForbiddenException extends PictureparkBusinessException implements IPictureparkForbiddenException {

    constructor(data?: IPictureparkForbiddenException) {
        super(data);
        this._discriminator = "PictureparkForbiddenException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PictureparkForbiddenException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "InactiveOrDeletedUserRefusedAccessException") {
            let result = new InactiveOrDeletedUserRefusedAccessException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsOfServiceConsentRequiredException") {
            let result = new TermsOfServiceConsentRequiredException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotExternalException") {
            let result = new BusinessProcessNotExternalException();
            result.init(data);
            return result;
        }
        let result = new PictureparkForbiddenException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkForbiddenException extends IPictureparkBusinessException {
}

export class UserEmailAlreadyExistsException extends PictureparkValidationException implements IUserEmailAlreadyExistsException {
    email?: string | undefined;

    constructor(data?: IUserEmailAlreadyExistsException) {
        super(data);
        this._discriminator = "UserEmailAlreadyExistsException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): UserEmailAlreadyExistsException {
        data = typeof data === 'object' ? data : {};
        let result = new UserEmailAlreadyExistsException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserEmailAlreadyExistsException extends IPictureparkValidationException {
    email?: string | undefined;
}

export class UserRoleAssignedException extends PictureparkValidationException implements IUserRoleAssignedException {
    userRoleId?: string | undefined;

    constructor(data?: IUserRoleAssignedException) {
        super(data);
        this._discriminator = "UserRoleAssignedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.userRoleId = data["userRoleId"];
        }
    }

    static fromJS(data: any): UserRoleAssignedException {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleAssignedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserRoleAssignedException extends IPictureparkValidationException {
    userRoleId?: string | undefined;
}

export class UserNotFoundException extends PictureparkBusinessException implements IUserNotFoundException {
    missingUserId?: string | undefined;

    constructor(data?: IUserNotFoundException) {
        super(data);
        this._discriminator = "UserNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.missingUserId = data["missingUserId"];
        }
    }

    static fromJS(data: any): UserNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new UserNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["missingUserId"] = this.missingUserId;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserNotFoundException extends IPictureparkBusinessException {
    missingUserId?: string | undefined;
}

export class UserInactiveOrDeletedException extends PictureparkValidationException implements IUserInactiveOrDeletedException {

    constructor(data?: IUserInactiveOrDeletedException) {
        super(data);
        this._discriminator = "UserInactiveOrDeletedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UserInactiveOrDeletedException {
        data = typeof data === 'object' ? data : {};
        let result = new UserInactiveOrDeletedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUserInactiveOrDeletedException extends IPictureparkValidationException {
}

export class InactiveOrDeletedUserRefusedAccessException extends PictureparkForbiddenException implements IInactiveOrDeletedUserRefusedAccessException {

    constructor(data?: IInactiveOrDeletedUserRefusedAccessException) {
        super(data);
        this._discriminator = "InactiveOrDeletedUserRefusedAccessException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): InactiveOrDeletedUserRefusedAccessException {
        data = typeof data === 'object' ? data : {};
        let result = new InactiveOrDeletedUserRefusedAccessException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInactiveOrDeletedUserRefusedAccessException extends IPictureparkForbiddenException {
}

export class TermsOfServiceNotNewestException extends PictureparkBusinessException implements ITermsOfServiceNotNewestException {

    constructor(data?: ITermsOfServiceNotNewestException) {
        super(data);
        this._discriminator = "TermsOfServiceNotNewestException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): TermsOfServiceNotNewestException {
        data = typeof data === 'object' ? data : {};
        let result = new TermsOfServiceNotNewestException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ITermsOfServiceNotNewestException extends IPictureparkBusinessException {
}

export class IllegalAuthorizationStateTransitionException extends PictureparkValidationException implements IIllegalAuthorizationStateTransitionException {

    constructor(data?: IIllegalAuthorizationStateTransitionException) {
        super(data);
        this._discriminator = "IllegalAuthorizationStateTransitionException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): IllegalAuthorizationStateTransitionException {
        data = typeof data === 'object' ? data : {};
        let result = new IllegalAuthorizationStateTransitionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIllegalAuthorizationStateTransitionException extends IPictureparkValidationException {
}

export class TermsOfServiceConsentRequiredException extends PictureparkForbiddenException implements ITermsOfServiceConsentRequiredException {

    constructor(data?: ITermsOfServiceConsentRequiredException) {
        super(data);
        this._discriminator = "TermsOfServiceConsentRequiredException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): TermsOfServiceConsentRequiredException {
        data = typeof data === 'object' ? data : {};
        let result = new TermsOfServiceConsentRequiredException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ITermsOfServiceConsentRequiredException extends IPictureparkForbiddenException {
}

export class PictureparkNotFoundException extends PictureparkBusinessException implements IPictureparkNotFoundException {
    reference?: string | undefined;

    constructor(data?: IPictureparkNotFoundException) {
        super(data);
        this._discriminator = "PictureparkNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.reference = data["reference"];
        }
    }

    static fromJS(data: any): PictureparkNotFoundException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "UserRolesNotFoundException") {
            let result = new UserRolesNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentVersionNotFoundException") {
            let result = new DocumentVersionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChannelsNotFoundException") {
            let result = new ChannelsNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareNotFoundException") {
            let result = new ShareNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareByTokenNotFoundException") {
            let result = new ShareByTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputIdNotFoundException") {
            let result = new OutputIdNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OwnerTokenNotFoundException") {
            let result = new OwnerTokenNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PermissionSetNotFoundException") {
            let result = new PermissionSetNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ListItemNotFoundException") {
            let result = new ListItemNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferInfoNotFoundException") {
            let result = new TransferInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FileTransferNotFoundException") {
            let result = new FileTransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TransferNotFoundException") {
            let result = new TransferNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaInfoNotFoundException") {
            let result = new SchemaInfoNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaNotFoundException") {
            let result = new SchemaNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentNotFoundException") {
            let result = new ContentNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessNotFoundException") {
            let result = new BusinessProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDefinitionNotFoundException") {
            let result = new BusinessProcessDefinitionNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnvironmentProcessNotFoundException") {
            let result = new EnvironmentProcessNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ModelNotFoundException") {
            let result = new ModelNotFoundException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputFormatNotFoundException") {
            let result = new OutputFormatNotFoundException();
            result.init(data);
            return result;
        }
        let result = new PictureparkNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reference"] = this.reference;
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkNotFoundException extends IPictureparkBusinessException {
    reference?: string | undefined;
}

export class UserRolesNotFoundException extends PictureparkNotFoundException implements IUserRolesNotFoundException {
    userRoleIds?: string[] | undefined;

    constructor(data?: IUserRolesNotFoundException) {
        super(data);
        this._discriminator = "UserRolesNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["userRoleIds"])) {
                this.userRoleIds = [] as any;
                for (let item of data["userRoleIds"])
                    this.userRoleIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRolesNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new UserRolesNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userRoleIds)) {
            data["userRoleIds"] = [];
            for (let item of this.userRoleIds)
                data["userRoleIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUserRolesNotFoundException extends IPictureparkNotFoundException {
    userRoleIds?: string[] | undefined;
}

export class UnauthorizedException extends PictureparkBusinessException implements IUnauthorizedException {

    constructor(data?: IUnauthorizedException) {
        super(data);
        this._discriminator = "UnauthorizedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UnauthorizedException {
        data = typeof data === 'object' ? data : {};
        let result = new UnauthorizedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUnauthorizedException extends IPictureparkBusinessException {
}

export class UserUnlockDisallowedException extends PictureparkValidationException implements IUserUnlockDisallowedException {

    constructor(data?: IUserUnlockDisallowedException) {
        super(data);
        this._discriminator = "UserUnlockDisallowedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UserUnlockDisallowedException {
        data = typeof data === 'object' ? data : {};
        let result = new UserUnlockDisallowedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUserUnlockDisallowedException extends IPictureparkValidationException {
}

export class RenderingException extends PictureparkBusinessException implements IRenderingException {

    constructor(data?: IRenderingException) {
        super(data);
        this._discriminator = "RenderingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): RenderingException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FormatNotApplicableForRenderingException") {
            let result = new FormatNotApplicableForRenderingException();
            result.init(data);
            return result;
        }
        let result = new RenderingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRenderingException extends IPictureparkBusinessException {
}

export class FormatNotApplicableForRenderingException extends RenderingException implements IFormatNotApplicableForRenderingException {
    contentRenderingType!: RenderingService;
    outputFormatId?: string | undefined;

    constructor(data?: IFormatNotApplicableForRenderingException) {
        super(data);
        this._discriminator = "FormatNotApplicableForRenderingException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentRenderingType = data["contentRenderingType"];
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): FormatNotApplicableForRenderingException {
        data = typeof data === 'object' ? data : {};
        let result = new FormatNotApplicableForRenderingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentRenderingType"] = this.contentRenderingType;
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFormatNotApplicableForRenderingException extends IRenderingException {
    contentRenderingType: RenderingService;
    outputFormatId?: string | undefined;
}

export enum RenderingService {
    Unknown = "Unknown",
    Image = "Image",
    Document = "Document",
    Video = "Video",
    Audio = "Audio",
}

export class ServiceProviderDeleteException extends PictureparkException implements IServiceProviderDeleteException {
    serviceProviderId?: string | undefined;
    detailedErrorMessage?: string | undefined;

    constructor(data?: IServiceProviderDeleteException) {
        super(data);
        this._discriminator = "ServiceProviderDeleteException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.serviceProviderId = data["serviceProviderId"];
            this.detailedErrorMessage = data["detailedErrorMessage"];
        }
    }

    static fromJS(data: any): ServiceProviderDeleteException {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceProviderDeleteException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceProviderId"] = this.serviceProviderId;
        data["detailedErrorMessage"] = this.detailedErrorMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceProviderDeleteException extends IPictureparkException {
    serviceProviderId?: string | undefined;
    detailedErrorMessage?: string | undefined;
}

export class ServiceProviderCreateException extends PictureparkException implements IServiceProviderCreateException {
    externalId?: string | undefined;
    detailErrorMessage?: string | undefined;

    constructor(data?: IServiceProviderCreateException) {
        super(data);
        this._discriminator = "ServiceProviderCreateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.externalId = data["externalId"];
            this.detailErrorMessage = data["detailErrorMessage"];
        }
    }

    static fromJS(data: any): ServiceProviderCreateException {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceProviderCreateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["externalId"] = this.externalId;
        data["detailErrorMessage"] = this.detailErrorMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceProviderCreateException extends IPictureparkException {
    externalId?: string | undefined;
    detailErrorMessage?: string | undefined;
}

export class ServiceProviderNotFoundException extends PictureparkException implements IServiceProviderNotFoundException {
    missingServiceProviderId?: string | undefined;

    constructor(data?: IServiceProviderNotFoundException) {
        super(data);
        this._discriminator = "ServiceProviderNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.missingServiceProviderId = data["missingServiceProviderId"];
        }
    }

    static fromJS(data: any): ServiceProviderNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceProviderNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["missingServiceProviderId"] = this.missingServiceProviderId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceProviderNotFoundException extends IPictureparkException {
    missingServiceProviderId?: string | undefined;
}

export class DocumentVersionNotFoundException extends PictureparkNotFoundException implements IDocumentVersionNotFoundException {
    documentType?: string | undefined;
    documentId?: string | undefined;
    documentVersion?: string | undefined;

    constructor(data?: IDocumentVersionNotFoundException) {
        super(data);
        this._discriminator = "DocumentVersionNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.documentType = data["documentType"];
            this.documentId = data["documentId"];
            this.documentVersion = data["documentVersion"];
        }
    }

    static fromJS(data: any): DocumentVersionNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentVersionNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentType"] = this.documentType;
        data["documentId"] = this.documentId;
        data["documentVersion"] = this.documentVersion;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentVersionNotFoundException extends IPictureparkNotFoundException {
    documentType?: string | undefined;
    documentId?: string | undefined;
    documentVersion?: string | undefined;
}

export class DefaultChannelDeleteException extends PictureparkValidationException implements IDefaultChannelDeleteException {

    constructor(data?: IDefaultChannelDeleteException) {
        super(data);
        this._discriminator = "DefaultChannelDeleteException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DefaultChannelDeleteException {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultChannelDeleteException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDefaultChannelDeleteException extends IPictureparkValidationException {
}

export class ChannelsNotFoundException extends PictureparkNotFoundException implements IChannelsNotFoundException {

    constructor(data?: IChannelsNotFoundException) {
        super(data);
        this._discriminator = "ChannelsNotFoundException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ChannelsNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelsNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IChannelsNotFoundException extends IPictureparkNotFoundException {
}

export class SuperAdminRolesNotAssignableToChannelException extends PictureparkValidationException implements ISuperAdminRolesNotAssignableToChannelException {

    constructor(data?: ISuperAdminRolesNotAssignableToChannelException) {
        super(data);
        this._discriminator = "SuperAdminRolesNotAssignableToChannelException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SuperAdminRolesNotAssignableToChannelException {
        data = typeof data === 'object' ? data : {};
        let result = new SuperAdminRolesNotAssignableToChannelException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISuperAdminRolesNotAssignableToChannelException extends IPictureparkValidationException {
}

export class ElasticVersionUpdateException extends PictureparkException implements IElasticVersionUpdateException {
    expectedVersion?: string | undefined;
    actualVersion?: string | undefined;

    constructor(data?: IElasticVersionUpdateException) {
        super(data);
        this._discriminator = "ElasticVersionUpdateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.expectedVersion = data["expectedVersion"];
            this.actualVersion = data["actualVersion"];
        }
    }

    static fromJS(data: any): ElasticVersionUpdateException {
        data = typeof data === 'object' ? data : {};
        let result = new ElasticVersionUpdateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expectedVersion"] = this.expectedVersion;
        data["actualVersion"] = this.actualVersion;
        super.toJSON(data);
        return data; 
    }
}

export interface IElasticVersionUpdateException extends IPictureparkException {
    expectedVersion?: string | undefined;
    actualVersion?: string | undefined;
}

export class InvalidVersionException extends PictureparkException implements IInvalidVersionException {
    component?: string | undefined;
    version?: string | undefined;
    expectedVersion?: string | undefined;

    constructor(data?: IInvalidVersionException) {
        super(data);
        this._discriminator = "InvalidVersionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.component = data["component"];
            this.version = data["version"];
            this.expectedVersion = data["expectedVersion"];
        }
    }

    static fromJS(data: any): InvalidVersionException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidVersionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["component"] = this.component;
        data["version"] = this.version;
        data["expectedVersion"] = this.expectedVersion;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidVersionException extends IPictureparkException {
    component?: string | undefined;
    version?: string | undefined;
    expectedVersion?: string | undefined;
}

export class EnvironmentNotDeactivatedException extends PictureparkException implements IEnvironmentNotDeactivatedException {

    constructor(data?: IEnvironmentNotDeactivatedException) {
        super(data);
        this._discriminator = "EnvironmentNotDeactivatedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): EnvironmentNotDeactivatedException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentNotDeactivatedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentNotDeactivatedException extends IPictureparkException {
}

export class EnvironmentNotFoundException extends PictureparkException implements IEnvironmentNotFoundException {

    constructor(data?: IEnvironmentNotFoundException) {
        super(data);
        this._discriminator = "EnvironmentNotFoundException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): EnvironmentNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentNotFoundException extends IPictureparkException {
}

export class EnvironmentDeactivationException extends PictureparkException implements IEnvironmentDeactivationException {
    deactivationMessage?: string | undefined;

    constructor(data?: IEnvironmentDeactivationException) {
        super(data);
        this._discriminator = "EnvironmentDeactivationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.deactivationMessage = data["deactivationMessage"];
        }
    }

    static fromJS(data: any): EnvironmentDeactivationException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentDeactivationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deactivationMessage"] = this.deactivationMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentDeactivationException extends IPictureparkException {
    deactivationMessage?: string | undefined;
}

export class CustomerClonesNotAcceptedException extends PictureparkValidationException implements ICustomerClonesNotAcceptedException {

    constructor(data?: ICustomerClonesNotAcceptedException) {
        super(data);
        this._discriminator = "CustomerClonesNotAcceptedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CustomerClonesNotAcceptedException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerClonesNotAcceptedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerClonesNotAcceptedException extends IPictureparkValidationException {
}

export class ShareNotFoundException extends PictureparkNotFoundException implements IShareNotFoundException {
    shareId?: string | undefined;

    constructor(data?: IShareNotFoundException) {
        super(data);
        this._discriminator = "ShareNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.shareId = data["shareId"];
        }
    }

    static fromJS(data: any): ShareNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ShareNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareId"] = this.shareId;
        super.toJSON(data);
        return data; 
    }
}

export interface IShareNotFoundException extends IPictureparkNotFoundException {
    shareId?: string | undefined;
}

export class ShareByTokenNotFoundException extends PictureparkNotFoundException implements IShareByTokenNotFoundException {
    token?: string | undefined;

    constructor(data?: IShareByTokenNotFoundException) {
        super(data);
        this._discriminator = "ShareByTokenNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): ShareByTokenNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ShareByTokenNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        super.toJSON(data);
        return data; 
    }
}

export interface IShareByTokenNotFoundException extends IPictureparkNotFoundException {
    token?: string | undefined;
}

export class TokenGenerationException extends PictureparkBusinessException implements ITokenGenerationException {
    retries!: number;

    constructor(data?: ITokenGenerationException) {
        super(data);
        this._discriminator = "TokenGenerationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.retries = data["retries"];
        }
    }

    static fromJS(data: any): TokenGenerationException {
        data = typeof data === 'object' ? data : {};
        let result = new TokenGenerationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retries"] = this.retries;
        super.toJSON(data);
        return data; 
    }
}

export interface ITokenGenerationException extends IPictureparkBusinessException {
    retries: number;
}

export class ShareExpiredException extends PictureparkBusinessException implements IShareExpiredException {
    token?: string | undefined;

    constructor(data?: IShareExpiredException) {
        super(data);
        this._discriminator = "ShareExpiredException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): ShareExpiredException {
        data = typeof data === 'object' ? data : {};
        let result = new ShareExpiredException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        super.toJSON(data);
        return data; 
    }
}

export interface IShareExpiredException extends IPictureparkBusinessException {
    token?: string | undefined;
}

export class ShareSizeLimitExceededException extends PictureparkValidationException implements IShareSizeLimitExceededException {
    shareId?: string | undefined;
    limit!: number;

    constructor(data?: IShareSizeLimitExceededException) {
        super(data);
        this._discriminator = "ShareSizeLimitExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.shareId = data["shareId"];
            this.limit = data["limit"];
        }
    }

    static fromJS(data: any): ShareSizeLimitExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new ShareSizeLimitExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareId"] = this.shareId;
        data["limit"] = this.limit;
        super.toJSON(data);
        return data; 
    }
}

export interface IShareSizeLimitExceededException extends IPictureparkValidationException {
    shareId?: string | undefined;
    limit: number;
}

export class OutputIdNotFoundException extends PictureparkNotFoundException implements IOutputIdNotFoundException {
    outputId?: string | undefined;

    constructor(data?: IOutputIdNotFoundException) {
        super(data);
        this._discriminator = "OutputIdNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.outputId = data["outputId"];
        }
    }

    static fromJS(data: any): OutputIdNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputIdNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outputId"] = this.outputId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputIdNotFoundException extends IPictureparkNotFoundException {
    outputId?: string | undefined;
}

export class OutputNotFoundException extends PictureparkBusinessException implements IOutputNotFoundException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;

    constructor(data?: IOutputNotFoundException) {
        super(data);
        this._discriminator = "OutputNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): OutputNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputNotFoundException extends IPictureparkBusinessException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
}

export class UnableToCreateOrModifyStaticOutputFormatException extends PictureparkValidationException implements IUnableToCreateOrModifyStaticOutputFormatException {

    constructor(data?: IUnableToCreateOrModifyStaticOutputFormatException) {
        super(data);
        this._discriminator = "UnableToCreateOrModifyStaticOutputFormatException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UnableToCreateOrModifyStaticOutputFormatException {
        data = typeof data === 'object' ? data : {};
        let result = new UnableToCreateOrModifyStaticOutputFormatException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUnableToCreateOrModifyStaticOutputFormatException extends IPictureparkValidationException {
}

export class NotSupportedFileMappingException extends PictureparkValidationException implements INotSupportedFileMappingException {

    constructor(data?: INotSupportedFileMappingException) {
        super(data);
        this._discriminator = "NotSupportedFileMappingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NotSupportedFileMappingException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "NotSupportedFileMappingForDynamicFormatException") {
            let result = new NotSupportedFileMappingForDynamicFormatException();
            result.init(data);
            return result;
        }
        let result = new NotSupportedFileMappingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INotSupportedFileMappingException extends IPictureparkValidationException {
}

export class NotSupportedFileMappingForDynamicFormatException extends NotSupportedFileMappingException implements INotSupportedFileMappingForDynamicFormatException {

    constructor(data?: INotSupportedFileMappingForDynamicFormatException) {
        super(data);
        this._discriminator = "NotSupportedFileMappingForDynamicFormatException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NotSupportedFileMappingForDynamicFormatException {
        data = typeof data === 'object' ? data : {};
        let result = new NotSupportedFileMappingForDynamicFormatException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INotSupportedFileMappingForDynamicFormatException extends INotSupportedFileMappingException {
}

export class NotSupportedFileExtensionException extends PictureparkValidationException implements INotSupportedFileExtensionException {

    constructor(data?: INotSupportedFileExtensionException) {
        super(data);
        this._discriminator = "NotSupportedFileExtensionException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NotSupportedFileExtensionException {
        data = typeof data === 'object' ? data : {};
        let result = new NotSupportedFileExtensionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INotSupportedFileExtensionException extends IPictureparkValidationException {
}

export class DuplicateOutputFormatIdException extends PictureparkValidationException implements IDuplicateOutputFormatIdException {

    constructor(data?: IDuplicateOutputFormatIdException) {
        super(data);
        this._discriminator = "DuplicateOutputFormatIdException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DuplicateOutputFormatIdException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateOutputFormatIdException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateOutputFormatIdException extends IPictureparkValidationException {
}

export class OutputFormatResizingNotSupportedException extends PictureparkValidationException implements IOutputFormatResizingNotSupportedException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;

    constructor(data?: IOutputFormatResizingNotSupportedException) {
        super(data);
        this._discriminator = "OutputFormatResizingNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): OutputFormatResizingNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatResizingNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputFormatResizingNotSupportedException extends IPictureparkValidationException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
}

export class LeaseNotAcquiredException extends PictureparkBusinessException implements ILeaseNotAcquiredException {
    resourceId?: string | undefined;

    constructor(data?: ILeaseNotAcquiredException) {
        super(data);
        this._discriminator = "LeaseNotAcquiredException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.resourceId = data["resourceId"];
        }
    }

    static fromJS(data: any): LeaseNotAcquiredException {
        data = typeof data === 'object' ? data : {};
        let result = new LeaseNotAcquiredException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resourceId"] = this.resourceId;
        super.toJSON(data);
        return data; 
    }
}

export interface ILeaseNotAcquiredException extends IPictureparkBusinessException {
    resourceId?: string | undefined;
}

export class OperationInProgressException extends PictureparkBusinessException implements IOperationInProgressException {
    leaseResourceType!: LeaseResourceType;

    constructor(data?: IOperationInProgressException) {
        super(data);
        this._discriminator = "OperationInProgressException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.leaseResourceType = data["leaseResourceType"];
        }
    }

    static fromJS(data: any): OperationInProgressException {
        data = typeof data === 'object' ? data : {};
        let result = new OperationInProgressException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leaseResourceType"] = this.leaseResourceType;
        super.toJSON(data);
        return data; 
    }
}

export interface IOperationInProgressException extends IPictureparkBusinessException {
    leaseResourceType: LeaseResourceType;
}

export enum LeaseResourceType {
    SchemaEditing = "SchemaEditing",
}

export class RetryException extends PictureparkBusinessException implements IRetryException {
    retries!: number;
    innerExceptionDetail?: string | undefined;

    constructor(data?: IRetryException) {
        super(data);
        this._discriminator = "RetryException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.retries = data["retries"];
            this.innerExceptionDetail = data["innerExceptionDetail"];
        }
    }

    static fromJS(data: any): RetryException {
        data = typeof data === 'object' ? data : {};
        let result = new RetryException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retries"] = this.retries;
        data["innerExceptionDetail"] = this.innerExceptionDetail;
        super.toJSON(data);
        return data; 
    }
}

export interface IRetryException extends IPictureparkBusinessException {
    retries: number;
    innerExceptionDetail?: string | undefined;
}

export class OwnerTokenNotFoundException extends PictureparkNotFoundException implements IOwnerTokenNotFoundException {
    ownerTokenUserIds?: string[] | undefined;

    constructor(data?: IOwnerTokenNotFoundException) {
        super(data);
        this._discriminator = "OwnerTokenNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["ownerTokenUserIds"])) {
                this.ownerTokenUserIds = [] as any;
                for (let item of data["ownerTokenUserIds"])
                    this.ownerTokenUserIds!.push(item);
            }
        }
    }

    static fromJS(data: any): OwnerTokenNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerTokenNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ownerTokenUserIds)) {
            data["ownerTokenUserIds"] = [];
            for (let item of this.ownerTokenUserIds)
                data["ownerTokenUserIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IOwnerTokenNotFoundException extends IPictureparkNotFoundException {
    ownerTokenUserIds?: string[] | undefined;
}

export class InvalidStateException extends PictureparkValidationException implements IInvalidStateException {
    resourceId?: string | undefined;
    state?: string | undefined;

    constructor(data?: IInvalidStateException) {
        super(data);
        this._discriminator = "InvalidStateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.resourceId = data["resourceId"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): InvalidStateException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "InvalidStateTransitionException") {
            let result = new InvalidStateTransitionException();
            result.init(data);
            return result;
        }
        let result = new InvalidStateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resourceId"] = this.resourceId;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidStateException extends IPictureparkValidationException {
    resourceId?: string | undefined;
    state?: string | undefined;
}

export class PictureparkArgumentNullException extends PictureparkValidationException implements IPictureparkArgumentNullException {
    argumentName?: string | undefined;

    constructor(data?: IPictureparkArgumentNullException) {
        super(data);
        this._discriminator = "PictureparkArgumentNullException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.argumentName = data["argumentName"];
        }
    }

    static fromJS(data: any): PictureparkArgumentNullException {
        data = typeof data === 'object' ? data : {};
        let result = new PictureparkArgumentNullException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["argumentName"] = this.argumentName;
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkArgumentNullException extends IPictureparkValidationException {
    argumentName?: string | undefined;
}

export class ObjectTypeMismatchException extends PictureparkBusinessException implements IObjectTypeMismatchException {
    type?: string | undefined;

    constructor(data?: IObjectTypeMismatchException) {
        super(data);
        this._discriminator = "ObjectTypeMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
        }
    }

    static fromJS(data: any): ObjectTypeMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectTypeMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        super.toJSON(data);
        return data; 
    }
}

export interface IObjectTypeMismatchException extends IPictureparkBusinessException {
    type?: string | undefined;
}

export class InvalidStateTransitionException extends InvalidStateException implements IInvalidStateTransitionException {
    transition?: string | undefined;

    constructor(data?: IInvalidStateTransitionException) {
        super(data);
        this._discriminator = "InvalidStateTransitionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transition = data["transition"];
        }
    }

    static fromJS(data: any): InvalidStateTransitionException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidStateTransitionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transition"] = this.transition;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidStateTransitionException extends IInvalidStateException {
    transition?: string | undefined;
}

export class FailedToLockException extends PictureparkBusinessException implements IFailedToLockException {
    resourceId?: string | undefined;

    constructor(data?: IFailedToLockException) {
        super(data);
        this._discriminator = "FailedToLockException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.resourceId = data["resourceId"];
        }
    }

    static fromJS(data: any): FailedToLockException {
        data = typeof data === 'object' ? data : {};
        let result = new FailedToLockException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resourceId"] = this.resourceId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFailedToLockException extends IPictureparkBusinessException {
    resourceId?: string | undefined;
}

export class PictureparkOperationCanceledException extends PictureparkBusinessException implements IPictureparkOperationCanceledException {

    constructor(data?: IPictureparkOperationCanceledException) {
        super(data);
        this._discriminator = "PictureparkOperationCanceledException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PictureparkOperationCanceledException {
        data = typeof data === 'object' ? data : {};
        let result = new PictureparkOperationCanceledException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkOperationCanceledException extends IPictureparkBusinessException {
}

export class PictureparkApplicationException extends PictureparkBusinessException implements IPictureparkApplicationException {

    constructor(data?: IPictureparkApplicationException) {
        super(data);
        this._discriminator = "PictureparkApplicationException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PictureparkApplicationException {
        data = typeof data === 'object' ? data : {};
        let result = new PictureparkApplicationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPictureparkApplicationException extends IPictureparkBusinessException {
}

export class MissingCustomerDefaultLanguageException extends PictureparkValidationException implements IMissingCustomerDefaultLanguageException {
    customerDefaultLanguage?: string | undefined;

    constructor(data?: IMissingCustomerDefaultLanguageException) {
        super(data);
        this._discriminator = "MissingCustomerDefaultLanguageException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerDefaultLanguage = data["customerDefaultLanguage"];
        }
    }

    static fromJS(data: any): MissingCustomerDefaultLanguageException {
        data = typeof data === 'object' ? data : {};
        let result = new MissingCustomerDefaultLanguageException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerDefaultLanguage"] = this.customerDefaultLanguage;
        super.toJSON(data);
        return data; 
    }
}

export interface IMissingCustomerDefaultLanguageException extends IPictureparkValidationException {
    customerDefaultLanguage?: string | undefined;
}

export class PartialOperationNotSupportedException extends PictureparkValidationException implements IPartialOperationNotSupportedException {

    constructor(data?: IPartialOperationNotSupportedException) {
        super(data);
        this._discriminator = "PartialOperationNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PartialOperationNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new PartialOperationNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPartialOperationNotSupportedException extends IPictureparkValidationException {
}

export class ContractMismatchException extends PictureparkValidationException implements IContractMismatchException {

    constructor(data?: IContractMismatchException) {
        super(data);
        this._discriminator = "ContractMismatchException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContractMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new ContractMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContractMismatchException extends IPictureparkValidationException {
}

export class InvalidArgumentException extends PictureparkValidationException implements IInvalidArgumentException {
    argumentName?: string | undefined;
    argumentValue?: string | undefined;

    constructor(data?: IInvalidArgumentException) {
        super(data);
        this._discriminator = "InvalidArgumentException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.argumentName = data["argumentName"];
            this.argumentValue = data["argumentValue"];
        }
    }

    static fromJS(data: any): InvalidArgumentException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ArgumentRangeException") {
            throw new Error("The abstract class 'ArgumentRangeException' cannot be instantiated.");
        }
        if (data["kind"] === "OutputFormatRetentionTimeOutOfRangeException") {
            let result = new OutputFormatRetentionTimeOutOfRangeException();
            result.init(data);
            return result;
        }
        let result = new InvalidArgumentException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["argumentName"] = this.argumentName;
        data["argumentValue"] = this.argumentValue;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidArgumentException extends IPictureparkValidationException {
    argumentName?: string | undefined;
    argumentValue?: string | undefined;
}

export abstract class ArgumentRangeException extends InvalidArgumentException implements IArgumentRangeException {
    minAcceptableValue?: string | undefined;
    maxAcceptableValue?: string | undefined;

    constructor(data?: IArgumentRangeException) {
        super(data);
        this._discriminator = "ArgumentRangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.minAcceptableValue = data["minAcceptableValue"];
            this.maxAcceptableValue = data["maxAcceptableValue"];
        }
    }

    static fromJS(data: any): ArgumentRangeException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "OutputFormatRetentionTimeOutOfRangeException") {
            let result = new OutputFormatRetentionTimeOutOfRangeException();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ArgumentRangeException' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minAcceptableValue"] = this.minAcceptableValue;
        data["maxAcceptableValue"] = this.maxAcceptableValue;
        super.toJSON(data);
        return data; 
    }
}

export interface IArgumentRangeException extends IInvalidArgumentException {
    minAcceptableValue?: string | undefined;
    maxAcceptableValue?: string | undefined;
}

export class UnknownException extends PictureparkBusinessException implements IUnknownException {

    constructor(data?: IUnknownException) {
        super(data);
        this._discriminator = "UnknownException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UnknownException {
        data = typeof data === 'object' ? data : {};
        let result = new UnknownException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUnknownException extends IPictureparkBusinessException {
}

export class OwnerTokenInUseException extends PictureparkValidationException implements IOwnerTokenInUseException {
    ownerTokenUserId?: string | undefined;

    constructor(data?: IOwnerTokenInUseException) {
        super(data);
        this._discriminator = "OwnerTokenInUseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.ownerTokenUserId = data["ownerTokenUserId"];
        }
    }

    static fromJS(data: any): OwnerTokenInUseException {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerTokenInUseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerTokenUserId"] = this.ownerTokenUserId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOwnerTokenInUseException extends IPictureparkValidationException {
    ownerTokenUserId?: string | undefined;
}

export class InvalidValueFormatException extends PictureparkValidationException implements IInvalidValueFormatException {

    constructor(data?: IInvalidValueFormatException) {
        super(data);
        this._discriminator = "InvalidValueFormatException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): InvalidValueFormatException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidValueFormatException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidValueFormatException extends IPictureparkValidationException {
}

export class ItemIdDuplicatedException extends PictureparkValidationException implements IItemIdDuplicatedException {
    id?: string | undefined;

    constructor(data?: IItemIdDuplicatedException) {
        super(data);
        this._discriminator = "ItemIdDuplicatedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ItemIdDuplicatedException {
        data = typeof data === 'object' ? data : {};
        let result = new ItemIdDuplicatedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IItemIdDuplicatedException extends IPictureparkValidationException {
    id?: string | undefined;
}

export class RequestSizeLimitExceededException extends PictureparkValidationException implements IRequestSizeLimitExceededException {
    argumentName?: string | undefined;
    limit!: number;
    requestedAmount!: number;

    constructor(data?: IRequestSizeLimitExceededException) {
        super(data);
        this._discriminator = "RequestSizeLimitExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.argumentName = data["argumentName"];
            this.limit = data["limit"];
            this.requestedAmount = data["requestedAmount"];
        }
    }

    static fromJS(data: any): RequestSizeLimitExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new RequestSizeLimitExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["argumentName"] = this.argumentName;
        data["limit"] = this.limit;
        data["requestedAmount"] = this.requestedAmount;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestSizeLimitExceededException extends IPictureparkValidationException {
    argumentName?: string | undefined;
    limit: number;
    requestedAmount: number;
}

export class CustomerViolationException extends PictureparkException implements ICustomerViolationException {
    expectedCustomerId?: string | undefined;
    currentCustomerId?: string | undefined;

    constructor(data?: ICustomerViolationException) {
        super(data);
        this._discriminator = "CustomerViolationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.expectedCustomerId = data["expectedCustomerId"];
            this.currentCustomerId = data["currentCustomerId"];
        }
    }

    static fromJS(data: any): CustomerViolationException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerViolationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expectedCustomerId"] = this.expectedCustomerId;
        data["currentCustomerId"] = this.currentCustomerId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerViolationException extends IPictureparkException {
    expectedCustomerId?: string | undefined;
    currentCustomerId?: string | undefined;
}

export class CustomerAliasNotFoundException extends PictureparkException implements ICustomerAliasNotFoundException {
    customerAlias?: string | undefined;

    constructor(data?: ICustomerAliasNotFoundException) {
        super(data);
        this._discriminator = "CustomerAliasNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerAlias = data["customerAlias"];
        }
    }

    static fromJS(data: any): CustomerAliasNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerAliasNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerAlias"] = this.customerAlias;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerAliasNotFoundException extends IPictureparkException {
    customerAlias?: string | undefined;
}

export class CustomerAliasInUseException extends PictureparkBusinessException implements ICustomerAliasInUseException {
    existingCustomerId?: string | undefined;
    alias?: string | undefined;

    constructor(data?: ICustomerAliasInUseException) {
        super(data);
        this._discriminator = "CustomerAliasInUseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.existingCustomerId = data["existingCustomerId"];
            this.alias = data["alias"];
        }
    }

    static fromJS(data: any): CustomerAliasInUseException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerAliasInUseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["existingCustomerId"] = this.existingCustomerId;
        data["alias"] = this.alias;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerAliasInUseException extends IPictureparkBusinessException {
    existingCustomerId?: string | undefined;
    alias?: string | undefined;
}

export class CustomerNotDeactivatedException extends PictureparkException implements ICustomerNotDeactivatedException {
    customerId?: string | undefined;

    constructor(data?: ICustomerNotDeactivatedException) {
        super(data);
        this._discriminator = "CustomerNotDeactivatedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
        }
    }

    static fromJS(data: any): CustomerNotDeactivatedException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerNotDeactivatedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerNotDeactivatedException extends IPictureparkException {
    customerId?: string | undefined;
}

export class CustomerDeactivationException extends PictureparkException implements ICustomerDeactivationException {
    customerId?: string | undefined;
    deactivationMessage?: string | undefined;

    constructor(data?: ICustomerDeactivationException) {
        super(data);
        this._discriminator = "CustomerDeactivationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
            this.deactivationMessage = data["deactivationMessage"];
        }
    }

    static fromJS(data: any): CustomerDeactivationException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDeactivationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["deactivationMessage"] = this.deactivationMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerDeactivationException extends IPictureparkException {
    customerId?: string | undefined;
    deactivationMessage?: string | undefined;
}

export class CustomerHostNotFoundException extends PictureparkException implements ICustomerHostNotFoundException {
    hostName?: string | undefined;

    constructor(data?: ICustomerHostNotFoundException) {
        super(data);
        this._discriminator = "CustomerHostNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.hostName = data["hostName"];
        }
    }

    static fromJS(data: any): CustomerHostNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerHostNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostName"] = this.hostName;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerHostNotFoundException extends IPictureparkException {
    hostName?: string | undefined;
}

export class CustomerNotFoundException extends PictureparkException implements ICustomerNotFoundException {
    customerId?: string | undefined;

    constructor(data?: ICustomerNotFoundException) {
        super(data);
        this._discriminator = "CustomerNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
        }
    }

    static fromJS(data: any): CustomerNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerNotFoundException extends IPictureparkException {
    customerId?: string | undefined;
}

export class CustomerNotActiveException extends PictureparkException implements ICustomerNotActiveException {
    customerId?: string | undefined;

    constructor(data?: ICustomerNotActiveException) {
        super(data);
        this._discriminator = "CustomerNotActiveException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
        }
    }

    static fromJS(data: any): CustomerNotActiveException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerNotActiveException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerNotActiveException extends IPictureparkException {
    customerId?: string | undefined;
}

export class CustomerBoostValuesInvalidException extends PictureparkValidationException implements ICustomerBoostValuesInvalidException {

    constructor(data?: ICustomerBoostValuesInvalidException) {
        super(data);
        this._discriminator = "CustomerBoostValuesInvalidException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CustomerBoostValuesInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerBoostValuesInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerBoostValuesInvalidException extends IPictureparkValidationException {
}

export class SnapshotRetentionTimeTooShortException extends PictureparkValidationException implements ISnapshotRetentionTimeTooShortException {
    snapshotRetentionTime!: string;
    minimumRetentionTime!: string;

    constructor(data?: ISnapshotRetentionTimeTooShortException) {
        super(data);
        this._discriminator = "SnapshotRetentionTimeTooShortException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.snapshotRetentionTime = data["snapshotRetentionTime"];
            this.minimumRetentionTime = data["minimumRetentionTime"];
        }
    }

    static fromJS(data: any): SnapshotRetentionTimeTooShortException {
        data = typeof data === 'object' ? data : {};
        let result = new SnapshotRetentionTimeTooShortException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["snapshotRetentionTime"] = this.snapshotRetentionTime;
        data["minimumRetentionTime"] = this.minimumRetentionTime;
        super.toJSON(data);
        return data; 
    }
}

export interface ISnapshotRetentionTimeTooShortException extends IPictureparkValidationException {
    snapshotRetentionTime: string;
    minimumRetentionTime: string;
}

export class ConfigurationIndexNotFoundException extends PictureparkException implements IConfigurationIndexNotFoundException {
    configurationIndex?: string | undefined;

    constructor(data?: IConfigurationIndexNotFoundException) {
        super(data);
        this._discriminator = "ConfigurationIndexNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.configurationIndex = data["configurationIndex"];
        }
    }

    static fromJS(data: any): ConfigurationIndexNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationIndexNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configurationIndex"] = this.configurationIndex;
        super.toJSON(data);
        return data; 
    }
}

export interface IConfigurationIndexNotFoundException extends IPictureparkException {
    configurationIndex?: string | undefined;
}

export class DuplicateSearchIndexDocException extends PictureparkBusinessException implements IDuplicateSearchIndexDocException {
    searchIndexDocId?: string | undefined;

    constructor(data?: IDuplicateSearchIndexDocException) {
        super(data);
        this._discriminator = "DuplicateSearchIndexDocException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchIndexDocId = data["searchIndexDocId"];
        }
    }

    static fromJS(data: any): DuplicateSearchIndexDocException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateSearchIndexDocException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchIndexDocId"] = this.searchIndexDocId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateSearchIndexDocException extends IPictureparkBusinessException {
    searchIndexDocId?: string | undefined;
}

export class SearchIndexDocNotFoundException extends PictureparkBusinessException implements ISearchIndexDocNotFoundException {
    searchIndexDocId?: string | undefined;

    constructor(data?: ISearchIndexDocNotFoundException) {
        super(data);
        this._discriminator = "SearchIndexDocNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchIndexDocId = data["searchIndexDocId"];
        }
    }

    static fromJS(data: any): SearchIndexDocNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new SearchIndexDocNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchIndexDocId"] = this.searchIndexDocId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchIndexDocNotFoundException extends IPictureparkBusinessException {
    searchIndexDocId?: string | undefined;
}

export class IndexDocumentNotFoundException extends PictureparkBusinessException implements IIndexDocumentNotFoundException {
    indexId?: string | undefined;

    constructor(data?: IIndexDocumentNotFoundException) {
        super(data);
        this._discriminator = "IndexDocumentNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.indexId = data["indexId"];
        }
    }

    static fromJS(data: any): IndexDocumentNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new IndexDocumentNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexId"] = this.indexId;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndexDocumentNotFoundException extends IPictureparkBusinessException {
    indexId?: string | undefined;
}

export class DuplicateAliasException extends PictureparkException implements IDuplicateAliasException {
    indexAlias?: string | undefined;

    constructor(data?: IDuplicateAliasException) {
        super(data);
        this._discriminator = "DuplicateAliasException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.indexAlias = data["indexAlias"];
        }
    }

    static fromJS(data: any): DuplicateAliasException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateAliasException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexAlias"] = this.indexAlias;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateAliasException extends IPictureparkException {
    indexAlias?: string | undefined;
}

export class SearchIndexNotFoundException extends PictureparkBusinessException implements ISearchIndexNotFoundException {
    searchIndexId?: string | undefined;

    constructor(data?: ISearchIndexNotFoundException) {
        super(data);
        this._discriminator = "SearchIndexNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchIndexId = data["searchIndexId"];
        }
    }

    static fromJS(data: any): SearchIndexNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new SearchIndexNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchIndexId"] = this.searchIndexId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchIndexNotFoundException extends IPictureparkBusinessException {
    searchIndexId?: string | undefined;
}

export class DefaultSearchIndexDeleteException extends PictureparkBusinessException implements IDefaultSearchIndexDeleteException {

    constructor(data?: IDefaultSearchIndexDeleteException) {
        super(data);
        this._discriminator = "DefaultSearchIndexDeleteException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DefaultSearchIndexDeleteException {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultSearchIndexDeleteException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDefaultSearchIndexDeleteException extends IPictureparkBusinessException {
}

export class SearchIndexInUseException extends PictureparkBusinessException implements ISearchIndexInUseException {
    searchIndex?: string | undefined;

    constructor(data?: ISearchIndexInUseException) {
        super(data);
        this._discriminator = "SearchIndexInUseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchIndex = data["searchIndex"];
        }
    }

    static fromJS(data: any): SearchIndexInUseException {
        data = typeof data === 'object' ? data : {};
        let result = new SearchIndexInUseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchIndex"] = this.searchIndex;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchIndexInUseException extends IPictureparkBusinessException {
    searchIndex?: string | undefined;
}

export class IndexException extends PictureparkBusinessException implements IIndexException {
    indexName?: string | undefined;
    debugInformation?: string | undefined;

    constructor(data?: IIndexException) {
        super(data);
        this._discriminator = "IndexException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.indexName = data["indexName"];
            this.debugInformation = data["debugInformation"];
        }
    }

    static fromJS(data: any): IndexException {
        data = typeof data === 'object' ? data : {};
        let result = new IndexException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexName"] = this.indexName;
        data["debugInformation"] = this.debugInformation;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndexException extends IPictureparkBusinessException {
    indexName?: string | undefined;
    debugInformation?: string | undefined;
}

export class IndexMappingException extends PictureparkBusinessException implements IIndexMappingException {
    indexName?: string | undefined;
    debugInformation?: string | undefined;

    constructor(data?: IIndexMappingException) {
        super(data);
        this._discriminator = "IndexMappingException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.indexName = data["indexName"];
            this.debugInformation = data["debugInformation"];
        }
    }

    static fromJS(data: any): IndexMappingException {
        data = typeof data === 'object' ? data : {};
        let result = new IndexMappingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexName"] = this.indexName;
        data["debugInformation"] = this.debugInformation;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndexMappingException extends IPictureparkBusinessException {
    indexName?: string | undefined;
    debugInformation?: string | undefined;
}

export class DuplicatedSearchBehaviorException extends PictureparkValidationException implements IDuplicatedSearchBehaviorException {
    duplicatedSearchBehaviors?: string | undefined;

    constructor(data?: IDuplicatedSearchBehaviorException) {
        super(data);
        this._discriminator = "DuplicatedSearchBehaviorException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.duplicatedSearchBehaviors = data["duplicatedSearchBehaviors"];
        }
    }

    static fromJS(data: any): DuplicatedSearchBehaviorException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicatedSearchBehaviorException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["duplicatedSearchBehaviors"] = this.duplicatedSearchBehaviors;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicatedSearchBehaviorException extends IPictureparkValidationException {
    duplicatedSearchBehaviors?: string | undefined;
}

export class SearchStringLeadingWildcardException extends PictureparkValidationException implements ISearchStringLeadingWildcardException {

    constructor(data?: ISearchStringLeadingWildcardException) {
        super(data);
        this._discriminator = "SearchStringLeadingWildcardException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SearchStringLeadingWildcardException {
        data = typeof data === 'object' ? data : {};
        let result = new SearchStringLeadingWildcardException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchStringLeadingWildcardException extends IPictureparkValidationException {
}

export class DuplicateAggregatorException extends PictureparkValidationException implements IDuplicateAggregatorException {
    aggregatorName?: string | undefined;

    constructor(data?: IDuplicateAggregatorException) {
        super(data);
        this._discriminator = "DuplicateAggregatorException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.aggregatorName = data["aggregatorName"];
        }
    }

    static fromJS(data: any): DuplicateAggregatorException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateAggregatorException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregatorName"] = this.aggregatorName;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateAggregatorException extends IPictureparkValidationException {
    aggregatorName?: string | undefined;
}

export class InvalidDateTimeFormatException extends PictureparkValidationException implements IInvalidDateTimeFormatException {
    value?: string | undefined;
    expectedFormat?: string | undefined;

    constructor(data?: IInvalidDateTimeFormatException) {
        super(data);
        this._discriminator = "InvalidDateTimeFormatException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.value = data["value"];
            this.expectedFormat = data["expectedFormat"];
        }
    }

    static fromJS(data: any): InvalidDateTimeFormatException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidDateTimeFormatException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["expectedFormat"] = this.expectedFormat;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidDateTimeFormatException extends IPictureparkValidationException {
    value?: string | undefined;
    expectedFormat?: string | undefined;
}

export class InvalidSortFieldException extends PictureparkValidationException implements IInvalidSortFieldException {
    fieldName?: string | undefined;

    constructor(data?: IInvalidSortFieldException) {
        super(data);
        this._discriminator = "InvalidSortFieldException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldName = data["fieldName"];
        }
    }

    static fromJS(data: any): InvalidSortFieldException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidSortFieldException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidSortFieldException extends IPictureparkValidationException {
    fieldName?: string | undefined;
}

export class DocumentVersionConflictException extends PictureparkConflictException implements IDocumentVersionConflictException {
    documentId?: string | undefined;
    documentType?: string | undefined;
    documentVersion!: number;

    constructor(data?: IDocumentVersionConflictException) {
        super(data);
        this._discriminator = "DocumentVersionConflictException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.documentId = data["documentId"];
            this.documentType = data["documentType"];
            this.documentVersion = data["documentVersion"];
        }
    }

    static fromJS(data: any): DocumentVersionConflictException {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentVersionConflictException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["documentType"] = this.documentType;
        data["documentVersion"] = this.documentVersion;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentVersionConflictException extends IPictureparkConflictException {
    documentId?: string | undefined;
    documentType?: string | undefined;
    documentVersion: number;
}

export class RedisDatabaseExceededException extends PictureparkException implements IRedisDatabaseExceededException {
    customerId?: string | undefined;
    customerCount!: number;
    maxCount!: number;
    startIndex!: number;
    redisDatabaseCount!: number;

    constructor(data?: IRedisDatabaseExceededException) {
        super(data);
        this._discriminator = "RedisDatabaseExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
            this.customerCount = data["customerCount"];
            this.maxCount = data["maxCount"];
            this.startIndex = data["startIndex"];
            this.redisDatabaseCount = data["redisDatabaseCount"];
        }
    }

    static fromJS(data: any): RedisDatabaseExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new RedisDatabaseExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["customerCount"] = this.customerCount;
        data["maxCount"] = this.maxCount;
        data["startIndex"] = this.startIndex;
        data["redisDatabaseCount"] = this.redisDatabaseCount;
        super.toJSON(data);
        return data; 
    }
}

export interface IRedisDatabaseExceededException extends IPictureparkException {
    customerId?: string | undefined;
    customerCount: number;
    maxCount: number;
    startIndex: number;
    redisDatabaseCount: number;
}

export class DuplicateDocumentException extends PictureparkValidationException implements IDuplicateDocumentException {
    documentId?: string | undefined;
    documentType?: string | undefined;

    constructor(data?: IDuplicateDocumentException) {
        super(data);
        this._discriminator = "DuplicateDocumentException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.documentId = data["documentId"];
            this.documentType = data["documentType"];
        }
    }

    static fromJS(data: any): DuplicateDocumentException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateDocumentException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["documentType"] = this.documentType;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateDocumentException extends IPictureparkValidationException {
    documentId?: string | undefined;
    documentType?: string | undefined;
}

export class ObjectStoreResponseException extends PictureparkBusinessException implements IObjectStoreResponseException {
    rowErrorMessages?: string | undefined;
    message?: string | undefined;

    constructor(data?: IObjectStoreResponseException) {
        super(data);
        this._discriminator = "ObjectStoreResponseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.rowErrorMessages = data["rowErrorMessages"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ObjectStoreResponseException {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectStoreResponseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowErrorMessages"] = this.rowErrorMessages;
        data["message"] = this.message;
        super.toJSON(data);
        return data; 
    }
}

export interface IObjectStoreResponseException extends IPictureparkBusinessException {
    rowErrorMessages?: string | undefined;
    message?: string | undefined;
}

export class ObjectStoreException extends PictureparkBusinessException implements IObjectStoreException {
    rowErrorMessages?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IObjectStoreException) {
        super(data);
        this._discriminator = "ObjectStoreException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.rowErrorMessages = data["rowErrorMessages"];
            this.errorMessage = data["errorMessage"];
        }
    }

    static fromJS(data: any): ObjectStoreException {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectStoreException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowErrorMessages"] = this.rowErrorMessages;
        data["errorMessage"] = this.errorMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IObjectStoreException extends IPictureparkBusinessException {
    rowErrorMessages?: string | undefined;
    errorMessage?: string | undefined;
}

export class QueryException extends PictureparkBusinessException implements IQueryException {
    debugInformation?: string | undefined;

    constructor(data?: IQueryException) {
        super(data);
        this._discriminator = "QueryException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.debugInformation = data["debugInformation"];
        }
    }

    static fromJS(data: any): QueryException {
        data = typeof data === 'object' ? data : {};
        let result = new QueryException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["debugInformation"] = this.debugInformation;
        super.toJSON(data);
        return data; 
    }
}

export interface IQueryException extends IPictureparkBusinessException {
    debugInformation?: string | undefined;
}

export class PermissionOwnershipTransferException extends PictureparkValidationException implements IPermissionOwnershipTransferException {
    transferUserId?: string | undefined;
    missingUserRight!: UserRight;

    constructor(data?: IPermissionOwnershipTransferException) {
        super(data);
        this._discriminator = "PermissionOwnershipTransferException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferUserId = data["transferUserId"];
            this.missingUserRight = data["missingUserRight"];
        }
    }

    static fromJS(data: any): PermissionOwnershipTransferException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionOwnershipTransferException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferUserId"] = this.transferUserId;
        data["missingUserRight"] = this.missingUserRight;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionOwnershipTransferException extends IPictureparkValidationException {
    transferUserId?: string | undefined;
    missingUserRight: UserRight;
}

export enum UserRight {
    ManageContent = "ManageContent",
    ManageSharings = "ManageSharings",
    ManageTransfer = "ManageTransfer",
    ManageChannels = "ManageChannels",
    ManageSchemas = "ManageSchemas",
    ManageUsers = "ManageUsers",
    ManageUserRoles = "ManageUserRoles",
    ManagePermissions = "ManagePermissions",
    ManageSearchIndexes = "ManageSearchIndexes",
    ManageCollections = "ManageCollections",
    ManageListItems = "ManageListItems",
    ManageServiceProviders = "ManageServiceProviders",
    ManageEmbeds = "ManageEmbeds",
    ManageTemplates = "ManageTemplates",
    ManageTermsOfService = "ManageTermsOfService",
    ManageLiveStream = "ManageLiveStream",
    ManageDocumentHistory = "ManageDocumentHistory",
    ManageAllShares = "ManageAllShares",
    ManageOutputFormats = "ManageOutputFormats",
    ManageBusinessProcesses = "ManageBusinessProcesses",
}

export class PermissionSetNotFoundException extends PictureparkNotFoundException implements IPermissionSetNotFoundException {
    permissionSetIds?: string[] | undefined;

    constructor(data?: IPermissionSetNotFoundException) {
        super(data);
        this._discriminator = "PermissionSetNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["permissionSetIds"])) {
                this.permissionSetIds = [] as any;
                for (let item of data["permissionSetIds"])
                    this.permissionSetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionSetNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.permissionSetIds)) {
            data["permissionSetIds"] = [];
            for (let item of this.permissionSetIds)
                data["permissionSetIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetNotFoundException extends IPictureparkNotFoundException {
    permissionSetIds?: string[] | undefined;
}

export class PermissionSetAggregateException extends PictureparkValidationException implements IPermissionSetAggregateException {
    exceptions?: PictureparkException[] | undefined;

    constructor(data?: IPermissionSetAggregateException) {
        super(data);
        this._discriminator = "PermissionSetAggregateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["exceptions"])) {
                this.exceptions = [] as any;
                for (let item of data["exceptions"])
                    this.exceptions!.push(PictureparkException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionSetAggregateException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetAggregateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.exceptions)) {
            data["exceptions"] = [];
            for (let item of this.exceptions)
                data["exceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetAggregateException extends IPictureparkValidationException {
    exceptions?: PictureparkException[] | undefined;
}

export class DuplicateRightException extends PictureparkValidationException implements IDuplicateRightException {
    permissionSetId?: string | undefined;

    constructor(data?: IDuplicateRightException) {
        super(data);
        this._discriminator = "DuplicateRightException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): DuplicateRightException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateRightException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateRightException extends IPictureparkValidationException {
    permissionSetId?: string | undefined;
}

export class PermissionValidationException extends PictureparkValidationException implements IPermissionValidationException {
    permission?: string | undefined;
    operation?: string | undefined;

    constructor(data?: IPermissionValidationException) {
        super(data);
        this._discriminator = "PermissionValidationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permission = data["permission"];
            this.operation = data["operation"];
        }
    }

    static fromJS(data: any): PermissionValidationException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permission"] = this.permission;
        data["operation"] = this.operation;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionValidationException extends IPictureparkValidationException {
    permission?: string | undefined;
    operation?: string | undefined;
}

export class PermissionSetInUseException extends PictureparkValidationException implements IPermissionSetInUseException {
    reference?: string | undefined;
    referenceCount!: number;

    constructor(data?: IPermissionSetInUseException) {
        super(data);
        this._discriminator = "PermissionSetInUseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.reference = data["reference"];
            this.referenceCount = data["referenceCount"];
        }
    }

    static fromJS(data: any): PermissionSetInUseException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetInUseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reference"] = this.reference;
        data["referenceCount"] = this.referenceCount;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetInUseException extends IPictureparkValidationException {
    reference?: string | undefined;
    referenceCount: number;
}

export class ContentPermissionException extends PictureparkValidationException implements IContentPermissionException {
    contentId?: string | undefined;
    contentRights?: ContentRight[] | undefined;

    constructor(data?: IContentPermissionException) {
        super(data);
        this._discriminator = "ContentPermissionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            if (Array.isArray(data["contentRights"])) {
                this.contentRights = [] as any;
                for (let item of data["contentRights"])
                    this.contentRights!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentPermissionException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        if (Array.isArray(this.contentRights)) {
            data["contentRights"] = [];
            for (let item of this.contentRights)
                data["contentRights"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IContentPermissionException extends IPictureparkValidationException {
    contentId?: string | undefined;
    contentRights?: ContentRight[] | undefined;
}

/** Content rights */
export enum ContentRight {
    View = "View",
    AccessOriginal = "AccessOriginal",
    EditMetadata = "EditMetadata",
    EditContent = "EditContent",
    ManagePermissions = "ManagePermissions",
    Delete = "Delete",
}

export class ListItemPermissionException extends PictureparkValidationException implements IListItemPermissionException {
    listItemId?: string | undefined;
    metadataRight!: MetadataRight;

    constructor(data?: IListItemPermissionException) {
        super(data);
        this._discriminator = "ListItemPermissionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.listItemId = data["listItemId"];
            this.metadataRight = data["metadataRight"];
        }
    }

    static fromJS(data: any): ListItemPermissionException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemPermissionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        data["metadataRight"] = this.metadataRight;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemPermissionException extends IPictureparkValidationException {
    listItemId?: string | undefined;
    metadataRight: MetadataRight;
}

/** Metadata rights */
export enum MetadataRight {
    View = "View",
    ManageItems = "ManageItems",
    ManageSchema = "ManageSchema",
}

export class SchemaPermissionException extends PictureparkValidationException implements ISchemaPermissionException {
    schemaId?: string | undefined;
    metadataRight!: MetadataRight;

    constructor(data?: ISchemaPermissionException) {
        super(data);
        this._discriminator = "SchemaPermissionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.metadataRight = data["metadataRight"];
        }
    }

    static fromJS(data: any): SchemaPermissionException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["metadataRight"] = this.metadataRight;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaPermissionException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    metadataRight: MetadataRight;
}

/** This exception is an abstract base for permission set validation. */
export class PermissionSetValidationException extends PictureparkValidationException implements IPermissionSetValidationException {
    permissionSetId?: string | undefined;

    constructor(data?: IPermissionSetValidationException) {
        super(data);
        this._discriminator = "PermissionSetValidationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): PermissionSetValidationException {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "PermissionSetInvalidRightCombinationException") {
            let result = new PermissionSetInvalidRightCombinationException();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AmbiguousUserRoleRightsException") {
            let result = new AmbiguousUserRoleRightsException();
            result.init(data);
            return result;
        }
        let result = new PermissionSetValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

/** This exception is an abstract base for permission set validation. */
export interface IPermissionSetValidationException extends IPictureparkValidationException {
    permissionSetId?: string | undefined;
}

export class PermissionSetInvalidRightCombinationException extends PermissionSetValidationException implements IPermissionSetInvalidRightCombinationException {

    constructor(data?: IPermissionSetInvalidRightCombinationException) {
        super(data);
        this._discriminator = "PermissionSetInvalidRightCombinationException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PermissionSetInvalidRightCombinationException {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetInvalidRightCombinationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetInvalidRightCombinationException extends IPermissionSetValidationException {
}

export class AmbiguousUserRoleRightsException extends PermissionSetValidationException implements IAmbiguousUserRoleRightsException {

    constructor(data?: IAmbiguousUserRoleRightsException) {
        super(data);
        this._discriminator = "AmbiguousUserRoleRightsException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AmbiguousUserRoleRightsException {
        data = typeof data === 'object' ? data : {};
        let result = new AmbiguousUserRoleRightsException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAmbiguousUserRoleRightsException extends IPermissionSetValidationException {
}

export class UnsupportedListItemChangeCommandException extends PictureparkValidationException implements IUnsupportedListItemChangeCommandException {
    commandType?: string | undefined;

    constructor(data?: IUnsupportedListItemChangeCommandException) {
        super(data);
        this._discriminator = "UnsupportedListItemChangeCommandException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.commandType = data["commandType"];
        }
    }

    static fromJS(data: any): UnsupportedListItemChangeCommandException {
        data = typeof data === 'object' ? data : {};
        let result = new UnsupportedListItemChangeCommandException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commandType"] = this.commandType;
        super.toJSON(data);
        return data; 
    }
}

export interface IUnsupportedListItemChangeCommandException extends IPictureparkValidationException {
    commandType?: string | undefined;
}

export class ListItemLayerException extends PictureparkValidationException implements IListItemLayerException {
    listItemId?: string | undefined;

    constructor(data?: IListItemLayerException) {
        super(data);
        this._discriminator = "ListItemLayerException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.listItemId = data["listItemId"];
        }
    }

    static fromJS(data: any): ListItemLayerException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemLayerException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemLayerException extends IPictureparkValidationException {
    listItemId?: string | undefined;
}

export class ListItemNotFoundException extends PictureparkNotFoundException implements IListItemNotFoundException {
    listItemIds?: string[] | undefined;

    constructor(data?: IListItemNotFoundException) {
        super(data);
        this._discriminator = "ListItemNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ListItemNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemNotFoundException extends IPictureparkNotFoundException {
    listItemIds?: string[] | undefined;
}

export class ListItemCyclicDependencyException extends PictureparkBusinessException implements IListItemCyclicDependencyException {
    listItemIds?: string[] | undefined;

    constructor(data?: IListItemCyclicDependencyException) {
        super(data);
        this._discriminator = "ListItemCyclicDependencyException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ListItemCyclicDependencyException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemCyclicDependencyException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemCyclicDependencyException extends IPictureparkBusinessException {
    listItemIds?: string[] | undefined;
}

export class DeleteListItemsWithReferencesException extends PictureparkValidationException implements IDeleteListItemsWithReferencesException {
    numberOfReferences!: number;

    constructor(data?: IDeleteListItemsWithReferencesException) {
        super(data);
        this._discriminator = "DeleteListItemsWithReferencesException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.numberOfReferences = data["numberOfReferences"];
        }
    }

    static fromJS(data: any): DeleteListItemsWithReferencesException {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteListItemsWithReferencesException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfReferences"] = this.numberOfReferences;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteListItemsWithReferencesException extends IPictureparkValidationException {
    numberOfReferences: number;
}

export class ListItemUpdateManyException extends PictureparkBusinessException implements IListItemUpdateManyException {
    failedItemsCount!: number;
    totalItemsCount!: number;

    constructor(data?: IListItemUpdateManyException) {
        super(data);
        this._discriminator = "ListItemUpdateManyException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.failedItemsCount = data["failedItemsCount"];
            this.totalItemsCount = data["totalItemsCount"];
        }
    }

    static fromJS(data: any): ListItemUpdateManyException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemUpdateManyException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failedItemsCount"] = this.failedItemsCount;
        data["totalItemsCount"] = this.totalItemsCount;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemUpdateManyException extends IPictureparkBusinessException {
    failedItemsCount: number;
    totalItemsCount: number;
}

export class ListItemSchemaMismatchException extends PictureparkValidationException implements IListItemSchemaMismatchException {
    listItemId?: string | undefined;
    listItemSchemaId?: string | undefined;
    fieldSchemaId?: string | undefined;

    constructor(data?: IListItemSchemaMismatchException) {
        super(data);
        this._discriminator = "ListItemSchemaMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.listItemId = data["listItemId"];
            this.listItemSchemaId = data["listItemSchemaId"];
            this.fieldSchemaId = data["fieldSchemaId"];
        }
    }

    static fromJS(data: any): ListItemSchemaMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemSchemaMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        data["listItemSchemaId"] = this.listItemSchemaId;
        data["fieldSchemaId"] = this.fieldSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemSchemaMismatchException extends IPictureparkValidationException {
    listItemId?: string | undefined;
    listItemSchemaId?: string | undefined;
    fieldSchemaId?: string | undefined;
}

export class TransferInfoNotFoundException extends PictureparkNotFoundException implements ITransferInfoNotFoundException {
    transferInfoId?: string | undefined;

    constructor(data?: ITransferInfoNotFoundException) {
        super(data);
        this._discriminator = "TransferInfoNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferInfoId = data["transferInfoId"];
        }
    }

    static fromJS(data: any): TransferInfoNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new TransferInfoNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferInfoId"] = this.transferInfoId;
        super.toJSON(data);
        return data; 
    }
}

export interface ITransferInfoNotFoundException extends IPictureparkNotFoundException {
    transferInfoId?: string | undefined;
}

export class FileTransferNotFoundException extends PictureparkNotFoundException implements IFileTransferNotFoundException {
    fileTransferId?: string | undefined;

    constructor(data?: IFileTransferNotFoundException) {
        super(data);
        this._discriminator = "FileTransferNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fileTransferId = data["fileTransferId"];
        }
    }

    static fromJS(data: any): FileTransferNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileTransferId"] = this.fileTransferId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFileTransferNotFoundException extends IPictureparkNotFoundException {
    fileTransferId?: string | undefined;
}

export class InvalidTransferTypeException extends PictureparkBusinessException implements IInvalidTransferTypeException {
    transferType!: TransferType;

    constructor(data?: IInvalidTransferTypeException) {
        super(data);
        this._discriminator = "InvalidTransferTypeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferType = data["transferType"];
        }
    }

    static fromJS(data: any): InvalidTransferTypeException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidTransferTypeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferType"] = this.transferType;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidTransferTypeException extends IPictureparkBusinessException {
    transferType: TransferType;
}

/** Type of the transfer */
export enum TransferType {
    FileUpload = "FileUpload",
    FileUploadAutoImport = "FileUploadAutoImport",
    WebDownload = "WebDownload",
    SchemaImport = "SchemaImport",
}

export class TransferNotFoundException extends PictureparkNotFoundException implements ITransferNotFoundException {
    transferId?: string | undefined;

    constructor(data?: ITransferNotFoundException) {
        super(data);
        this._discriminator = "TransferNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferId = data["transferId"];
        }
    }

    static fromJS(data: any): TransferNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new TransferNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferId"] = this.transferId;
        super.toJSON(data);
        return data; 
    }
}

export interface ITransferNotFoundException extends IPictureparkNotFoundException {
    transferId?: string | undefined;
}

export class WrongChunkSizeException extends PictureparkValidationException implements IWrongChunkSizeException {
    actual!: number;
    expected!: number;

    constructor(data?: IWrongChunkSizeException) {
        super(data);
        this._discriminator = "WrongChunkSizeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.actual = data["actual"];
            this.expected = data["expected"];
        }
    }

    static fromJS(data: any): WrongChunkSizeException {
        data = typeof data === 'object' ? data : {};
        let result = new WrongChunkSizeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actual"] = this.actual;
        data["expected"] = this.expected;
        super.toJSON(data);
        return data; 
    }
}

export interface IWrongChunkSizeException extends IPictureparkValidationException {
    actual: number;
    expected: number;
}

export class ChunkSizeOutOfRangeException extends PictureparkValidationException implements IChunkSizeOutOfRangeException {
    actual!: number;
    minimum!: number;
    maximum!: number;

    constructor(data?: IChunkSizeOutOfRangeException) {
        super(data);
        this._discriminator = "ChunkSizeOutOfRangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.actual = data["actual"];
            this.minimum = data["minimum"];
            this.maximum = data["maximum"];
        }
    }

    static fromJS(data: any): ChunkSizeOutOfRangeException {
        data = typeof data === 'object' ? data : {};
        let result = new ChunkSizeOutOfRangeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actual"] = this.actual;
        data["minimum"] = this.minimum;
        data["maximum"] = this.maximum;
        super.toJSON(data);
        return data; 
    }
}

export interface IChunkSizeOutOfRangeException extends IPictureparkValidationException {
    actual: number;
    minimum: number;
    maximum: number;
}

export class MaximumTransferSizeException extends PictureparkException implements IMaximumTransferSizeException {
    transferSize!: number;
    maximumTransferSize!: number;
    transferId?: string | undefined;

    constructor(data?: IMaximumTransferSizeException) {
        super(data);
        this._discriminator = "MaximumTransferSizeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferSize = data["transferSize"];
            this.maximumTransferSize = data["maximumTransferSize"];
            this.transferId = data["transferId"];
        }
    }

    static fromJS(data: any): MaximumTransferSizeException {
        data = typeof data === 'object' ? data : {};
        let result = new MaximumTransferSizeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferSize"] = this.transferSize;
        data["maximumTransferSize"] = this.maximumTransferSize;
        data["transferId"] = this.transferId;
        super.toJSON(data);
        return data; 
    }
}

export interface IMaximumTransferSizeException extends IPictureparkException {
    transferSize: number;
    maximumTransferSize: number;
    transferId?: string | undefined;
}

export class FileIdDuplicatedException extends PictureparkValidationException implements IFileIdDuplicatedException {
    fileId?: string | undefined;

    constructor(data?: IFileIdDuplicatedException) {
        super(data);
        this._discriminator = "FileIdDuplicatedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fileId = data["fileId"];
        }
    }

    static fromJS(data: any): FileIdDuplicatedException {
        data = typeof data === 'object' ? data : {};
        let result = new FileIdDuplicatedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        super.toJSON(data);
        return data; 
    }
}

export interface IFileIdDuplicatedException extends IPictureparkValidationException {
    fileId?: string | undefined;
}

export class MissingDependenciesException extends PictureparkValidationException implements IMissingDependenciesException {
    itemIds?: string | undefined;

    constructor(data?: IMissingDependenciesException) {
        super(data);
        this._discriminator = "MissingDependenciesException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.itemIds = data["itemIds"];
        }
    }

    static fromJS(data: any): MissingDependenciesException {
        data = typeof data === 'object' ? data : {};
        let result = new MissingDependenciesException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemIds"] = this.itemIds;
        super.toJSON(data);
        return data; 
    }
}

export interface IMissingDependenciesException extends IPictureparkValidationException {
    itemIds?: string | undefined;
}

export class RelationSelfReferencingException extends PictureparkValidationException implements IRelationSelfReferencingException {
    itemId?: string | undefined;
    itemType?: string | undefined;

    constructor(data?: IRelationSelfReferencingException) {
        super(data);
        this._discriminator = "RelationSelfReferencingException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.itemId = data["itemId"];
            this.itemType = data["itemType"];
        }
    }

    static fromJS(data: any): RelationSelfReferencingException {
        data = typeof data === 'object' ? data : {};
        let result = new RelationSelfReferencingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        data["itemType"] = this.itemType;
        super.toJSON(data);
        return data; 
    }
}

export interface IRelationSelfReferencingException extends IPictureparkValidationException {
    itemId?: string | undefined;
    itemType?: string | undefined;
}

export class InvalidChangeCommandFieldTypeInvalidException extends PictureparkValidationException implements IInvalidChangeCommandFieldTypeInvalidException {
    commandType?: string | undefined;
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    fieldActualType?: string | undefined;
    fieldExpectedType?: string | undefined;

    constructor(data?: IInvalidChangeCommandFieldTypeInvalidException) {
        super(data);
        this._discriminator = "InvalidChangeCommandFieldTypeInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.commandType = data["commandType"];
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
            this.fieldActualType = data["fieldActualType"];
            this.fieldExpectedType = data["fieldExpectedType"];
        }
    }

    static fromJS(data: any): InvalidChangeCommandFieldTypeInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidChangeCommandFieldTypeInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commandType"] = this.commandType;
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        data["fieldActualType"] = this.fieldActualType;
        data["fieldExpectedType"] = this.fieldExpectedType;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidChangeCommandFieldTypeInvalidException extends IPictureparkValidationException {
    commandType?: string | undefined;
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    fieldActualType?: string | undefined;
    fieldExpectedType?: string | undefined;
}

export class InvalidChangeCommandFieldNotFoundException extends PictureparkValidationException implements IInvalidChangeCommandFieldNotFoundException {
    commandTypeName?: string | undefined;
    fieldId?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: IInvalidChangeCommandFieldNotFoundException) {
        super(data);
        this._discriminator = "InvalidChangeCommandFieldNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.commandTypeName = data["commandTypeName"];
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): InvalidChangeCommandFieldNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidChangeCommandFieldNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commandTypeName"] = this.commandTypeName;
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidChangeCommandFieldNotFoundException extends IPictureparkValidationException {
    commandTypeName?: string | undefined;
    fieldId?: string | undefined;
    schemaId?: string | undefined;
}

export class InvalidChangeCommandSchemaChangeInvalidException extends PictureparkValidationException implements IInvalidChangeCommandSchemaChangeInvalidException {
    commandTypeName?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: IInvalidChangeCommandSchemaChangeInvalidException) {
        super(data);
        this._discriminator = "InvalidChangeCommandSchemaChangeInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.commandTypeName = data["commandTypeName"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): InvalidChangeCommandSchemaChangeInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidChangeCommandSchemaChangeInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commandTypeName"] = this.commandTypeName;
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidChangeCommandSchemaChangeInvalidException extends IPictureparkValidationException {
    commandTypeName?: string | undefined;
    schemaId?: string | undefined;
}

export class InvalidMetadataException extends PictureparkValidationException implements IInvalidMetadataException {
    metadataErrors?: MetadataError[] | undefined;
    validationErrors?: PictureparkBusinessException[] | undefined;

    constructor(data?: IInvalidMetadataException) {
        super(data);
        if (data) {
            if (data.metadataErrors) {
                this.metadataErrors = [];
                for (let i = 0; i < data.metadataErrors.length; i++) {
                    let item = data.metadataErrors[i];
                    this.metadataErrors[i] = item && !(<any>item).toJSON ? new MetadataError(item) : <MetadataError>item;
                }
            }
        }
        this._discriminator = "InvalidMetadataException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["metadataErrors"])) {
                this.metadataErrors = [] as any;
                for (let item of data["metadataErrors"])
                    this.metadataErrors!.push(MetadataError.fromJS(item));
            }
            if (Array.isArray(data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of data["validationErrors"])
                    this.validationErrors!.push(PictureparkBusinessException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InvalidMetadataException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidMetadataException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.metadataErrors)) {
            data["metadataErrors"] = [];
            for (let item of this.metadataErrors)
                data["metadataErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidMetadataException extends IPictureparkValidationException {
    metadataErrors?: IMetadataError[] | undefined;
    validationErrors?: PictureparkBusinessException[] | undefined;
}

export class MetadataError implements IMetadataError {
    errorType?: string | undefined;
    lineNumber!: number;
    linePosition!: number;
    path?: string | undefined;
    message?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: IMetadataError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.errorType = data["errorType"];
            this.lineNumber = data["lineNumber"];
            this.linePosition = data["linePosition"];
            this.path = data["path"];
            this.message = data["message"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): MetadataError {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorType"] = this.errorType;
        data["lineNumber"] = this.lineNumber;
        data["linePosition"] = this.linePosition;
        data["path"] = this.path;
        data["message"] = this.message;
        data["schemaId"] = this.schemaId;
        return data; 
    }
}

export interface IMetadataError {
    errorType?: string | undefined;
    lineNumber: number;
    linePosition: number;
    path?: string | undefined;
    message?: string | undefined;
    schemaId?: string | undefined;
}

export class RelationNotFoundException extends PictureparkBusinessException implements IRelationNotFoundException {
    relationId?: string | undefined;

    constructor(data?: IRelationNotFoundException) {
        super(data);
        this._discriminator = "RelationNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.relationId = data["relationId"];
        }
    }

    static fromJS(data: any): RelationNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new RelationNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationId"] = this.relationId;
        super.toJSON(data);
        return data; 
    }
}

export interface IRelationNotFoundException extends IPictureparkBusinessException {
    relationId?: string | undefined;
}

export class RelationTypeNotFoundException extends PictureparkBusinessException implements IRelationTypeNotFoundException {
    relationType?: string | undefined;

    constructor(data?: IRelationTypeNotFoundException) {
        super(data);
        this._discriminator = "RelationTypeNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.relationType = data["relationType"];
        }
    }

    static fromJS(data: any): RelationTypeNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new RelationTypeNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationType"] = this.relationType;
        super.toJSON(data);
        return data; 
    }
}

export interface IRelationTypeNotFoundException extends IPictureparkBusinessException {
    relationType?: string | undefined;
}

export class RelationTypeTargetDocTypeMismatchException extends PictureparkBusinessException implements IRelationTypeTargetDocTypeMismatchException {
    relationType?: string | undefined;
    targetDocType?: string | undefined;
    expectedTargetDocType?: string | undefined;

    constructor(data?: IRelationTypeTargetDocTypeMismatchException) {
        super(data);
        this._discriminator = "RelationTypeTargetDocTypeMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.relationType = data["relationType"];
            this.targetDocType = data["targetDocType"];
            this.expectedTargetDocType = data["expectedTargetDocType"];
        }
    }

    static fromJS(data: any): RelationTypeTargetDocTypeMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new RelationTypeTargetDocTypeMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationType"] = this.relationType;
        data["targetDocType"] = this.targetDocType;
        data["expectedTargetDocType"] = this.expectedTargetDocType;
        super.toJSON(data);
        return data; 
    }
}

export interface IRelationTypeTargetDocTypeMismatchException extends IPictureparkBusinessException {
    relationType?: string | undefined;
    targetDocType?: string | undefined;
    expectedTargetDocType?: string | undefined;
}

export class AggregationNameInvalidException extends PictureparkValidationException implements IAggregationNameInvalidException {
    aggregationName?: string | undefined;
    aggregationPrefix?: string | undefined;

    constructor(data?: IAggregationNameInvalidException) {
        super(data);
        this._discriminator = "AggregationNameInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.aggregationName = data["aggregationName"];
            this.aggregationPrefix = data["aggregationPrefix"];
        }
    }

    static fromJS(data: any): AggregationNameInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationNameInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregationName"] = this.aggregationName;
        data["aggregationPrefix"] = this.aggregationPrefix;
        super.toJSON(data);
        return data; 
    }
}

export interface IAggregationNameInvalidException extends IPictureparkValidationException {
    aggregationName?: string | undefined;
    aggregationPrefix?: string | undefined;
}

/** Size of the aggregation is invalid. */
export class AggregationSizeInvalidException extends PictureparkValidationException implements IAggregationSizeInvalidException {
    /** The name identifying the aggregation. */
    aggregationName?: string | undefined;
    /** The invalid size of the aggregation: size must be equal or greater than 1. */
    aggregationSize!: number;

    constructor(data?: IAggregationSizeInvalidException) {
        super(data);
        this._discriminator = "AggregationSizeInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.aggregationName = data["aggregationName"];
            this.aggregationSize = data["aggregationSize"];
        }
    }

    static fromJS(data: any): AggregationSizeInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationSizeInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregationName"] = this.aggregationName;
        data["aggregationSize"] = this.aggregationSize;
        super.toJSON(data);
        return data; 
    }
}

/** Size of the aggregation is invalid. */
export interface IAggregationSizeInvalidException extends IPictureparkValidationException {
    /** The name identifying the aggregation. */
    aggregationName?: string | undefined;
    /** The invalid size of the aggregation: size must be equal or greater than 1. */
    aggregationSize: number;
}

export class AggregationFilterNotSupportedException extends PictureparkValidationException implements IAggregationFilterNotSupportedException {
    aggregationName?: string | undefined;
    notSupportedFilterType?: string | undefined;
    supportedFilterTypes?: string[] | undefined;

    constructor(data?: IAggregationFilterNotSupportedException) {
        super(data);
        this._discriminator = "AggregationFilterNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.aggregationName = data["aggregationName"];
            this.notSupportedFilterType = data["notSupportedFilterType"];
            if (Array.isArray(data["supportedFilterTypes"])) {
                this.supportedFilterTypes = [] as any;
                for (let item of data["supportedFilterTypes"])
                    this.supportedFilterTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): AggregationFilterNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationFilterNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregationName"] = this.aggregationName;
        data["notSupportedFilterType"] = this.notSupportedFilterType;
        if (Array.isArray(this.supportedFilterTypes)) {
            data["supportedFilterTypes"] = [];
            for (let item of this.supportedFilterTypes)
                data["supportedFilterTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAggregationFilterNotSupportedException extends IPictureparkValidationException {
    aggregationName?: string | undefined;
    notSupportedFilterType?: string | undefined;
    supportedFilterTypes?: string[] | undefined;
}

export class RelationTypeMissingException extends PictureparkBusinessException implements IRelationTypeMissingException {

    constructor(data?: IRelationTypeMissingException) {
        super(data);
        this._discriminator = "RelationTypeMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): RelationTypeMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new RelationTypeMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRelationTypeMissingException extends IPictureparkBusinessException {
}

export class ReferencesUpdateException extends PictureparkBusinessException implements IReferencesUpdateException {
    exceptions?: ReferenceUpdateException[] | undefined;

    constructor(data?: IReferencesUpdateException) {
        super(data);
        this._discriminator = "ReferencesUpdateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["exceptions"])) {
                this.exceptions = [] as any;
                for (let item of data["exceptions"])
                    this.exceptions!.push(ReferenceUpdateException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReferencesUpdateException {
        data = typeof data === 'object' ? data : {};
        let result = new ReferencesUpdateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.exceptions)) {
            data["exceptions"] = [];
            for (let item of this.exceptions)
                data["exceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IReferencesUpdateException extends IPictureparkBusinessException {
    exceptions?: ReferenceUpdateException[] | undefined;
}

export class ReferenceUpdateException extends PictureparkBusinessException implements IReferenceUpdateException {
    /** This is the source of the reference. */
    referenceItemId?: string | undefined;
    /** This is the DocType of the source of the reference. */
    referenceType?: string | undefined;
    /** These exceptions describe why the source metadata item could not be updated. */
    exceptions?: PictureparkException[] | undefined;

    constructor(data?: IReferenceUpdateException) {
        super(data);
        this._discriminator = "ReferenceUpdateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.referenceItemId = data["referenceItemId"];
            this.referenceType = data["referenceType"];
            if (Array.isArray(data["exceptions"])) {
                this.exceptions = [] as any;
                for (let item of data["exceptions"])
                    this.exceptions!.push(PictureparkException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReferenceUpdateException {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceUpdateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceItemId"] = this.referenceItemId;
        data["referenceType"] = this.referenceType;
        if (Array.isArray(this.exceptions)) {
            data["exceptions"] = [];
            for (let item of this.exceptions)
                data["exceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IReferenceUpdateException extends IPictureparkBusinessException {
    /** This is the source of the reference. */
    referenceItemId?: string | undefined;
    /** This is the DocType of the source of the reference. */
    referenceType?: string | undefined;
    /** These exceptions describe why the source metadata item could not be updated. */
    exceptions?: PictureparkException[] | undefined;
}

export class DuplicatedItemAssignedException extends PictureparkValidationException implements IDuplicatedItemAssignedException {
    itemId?: string | undefined;
    itemPath?: string | undefined;

    constructor(data?: IDuplicatedItemAssignedException) {
        super(data);
        this._discriminator = "DuplicatedItemAssignedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.itemId = data["itemId"];
            this.itemPath = data["itemPath"];
        }
    }

    static fromJS(data: any): DuplicatedItemAssignedException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicatedItemAssignedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        data["itemPath"] = this.itemPath;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicatedItemAssignedException extends IPictureparkValidationException {
    itemId?: string | undefined;
    itemPath?: string | undefined;
}

export class InvalidDataTypeException extends PictureparkValidationException implements IInvalidDataTypeException {
    value?: any | undefined;

    constructor(data?: IInvalidDataTypeException) {
        super(data);
        this._discriminator = "InvalidDataTypeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.value = data["value"];
        }
    }

    static fromJS(data: any): InvalidDataTypeException {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidDataTypeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvalidDataTypeException extends IPictureparkValidationException {
    value?: any | undefined;
}

export class LayerAssignmentInvalidException extends PictureparkValidationException implements ILayerAssignmentInvalidException {
    layerId?: string | undefined;
    value?: any | undefined;

    constructor(data?: ILayerAssignmentInvalidException) {
        super(data);
        this._discriminator = "LayerAssignmentInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.layerId = data["layerId"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): LayerAssignmentInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new LayerAssignmentInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layerId"] = this.layerId;
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface ILayerAssignmentInvalidException extends IPictureparkValidationException {
    layerId?: string | undefined;
    value?: any | undefined;
}

export class OutdatedMetadataUpdateInProgressException extends PictureparkValidationException implements IOutdatedMetadataUpdateInProgressException {

    constructor(data?: IOutdatedMetadataUpdateInProgressException) {
        super(data);
        this._discriminator = "OutdatedMetadataUpdateInProgressException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OutdatedMetadataUpdateInProgressException {
        data = typeof data === 'object' ? data : {};
        let result = new OutdatedMetadataUpdateInProgressException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOutdatedMetadataUpdateInProgressException extends IPictureparkValidationException {
}

export class SchemaFieldOverwriteTypeMismatchException extends PictureparkValidationException implements ISchemaFieldOverwriteTypeMismatchException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    fieldOverwriteType?: string | undefined;
    fieldType?: string | undefined;

    constructor(data?: ISchemaFieldOverwriteTypeMismatchException) {
        super(data);
        this._discriminator = "SchemaFieldOverwriteTypeMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.fieldOverwriteType = data["fieldOverwriteType"];
            this.fieldType = data["fieldType"];
        }
    }

    static fromJS(data: any): SchemaFieldOverwriteTypeMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldOverwriteTypeMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["fieldOverwriteType"] = this.fieldOverwriteType;
        data["fieldType"] = this.fieldType;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldOverwriteTypeMismatchException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    fieldOverwriteType?: string | undefined;
    fieldType?: string | undefined;
}

export class SchemaFieldOverwriteIdException extends PictureparkValidationException implements ISchemaFieldOverwriteIdException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldOverwriteIdException) {
        super(data);
        this._discriminator = "SchemaFieldOverwriteIdException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldOverwriteIdException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldOverwriteIdException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldOverwriteIdException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldIdDuplicatedException extends PictureparkValidationException implements ISchemaFieldIdDuplicatedException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldIdDuplicatedException) {
        super(data);
        this._discriminator = "SchemaFieldIdDuplicatedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldIdDuplicatedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIdDuplicatedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIdDuplicatedException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldIdPreviouslyUsedException extends PictureparkValidationException implements ISchemaFieldIdPreviouslyUsedException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    usedInSchemaId?: string | undefined;

    constructor(data?: ISchemaFieldIdPreviouslyUsedException) {
        super(data);
        this._discriminator = "SchemaFieldIdPreviouslyUsedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.usedInSchemaId = data["usedInSchemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldIdPreviouslyUsedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIdPreviouslyUsedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["usedInSchemaId"] = this.usedInSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIdPreviouslyUsedException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    usedInSchemaId?: string | undefined;
}

export class SchemaFieldIdAlreadyExistsInSchemaHierarchyException extends PictureparkValidationException implements ISchemaFieldIdAlreadyExistsInSchemaHierarchyException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    existingInSchemaId?: string | undefined;

    constructor(data?: ISchemaFieldIdAlreadyExistsInSchemaHierarchyException) {
        super(data);
        this._discriminator = "SchemaFieldIdAlreadyExistsInSchemaHierarchyException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.existingInSchemaId = data["existingInSchemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldIdAlreadyExistsInSchemaHierarchyException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIdAlreadyExistsInSchemaHierarchyException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["existingInSchemaId"] = this.existingInSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIdAlreadyExistsInSchemaHierarchyException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    existingInSchemaId?: string | undefined;
}

export class SchemaFieldSchemaIndexInfoSimpleSearchNestingException extends PictureparkValidationException implements ISchemaFieldSchemaIndexInfoSimpleSearchNestingException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relatedFieldId?: string | undefined;
    relatedOuterFieldId?: string | undefined;

    constructor(data?: ISchemaFieldSchemaIndexInfoSimpleSearchNestingException) {
        super(data);
        this._discriminator = "SchemaFieldSchemaIndexInfoSimpleSearchNestingException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.relatedFieldId = data["relatedFieldId"];
            this.relatedOuterFieldId = data["relatedOuterFieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldSchemaIndexInfoSimpleSearchNestingException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldSchemaIndexInfoSimpleSearchNestingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["relatedFieldId"] = this.relatedFieldId;
        data["relatedOuterFieldId"] = this.relatedOuterFieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldSchemaIndexInfoSimpleSearchNestingException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relatedFieldId?: string | undefined;
    relatedOuterFieldId?: string | undefined;
}

export class SchemaFieldSchemaIndexInfoNestingException extends PictureparkValidationException implements ISchemaFieldSchemaIndexInfoNestingException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relatedFieldId?: string | undefined;
    relatedOuterFieldId?: string | undefined;

    constructor(data?: ISchemaFieldSchemaIndexInfoNestingException) {
        super(data);
        this._discriminator = "SchemaFieldSchemaIndexInfoNestingException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.relatedFieldId = data["relatedFieldId"];
            this.relatedOuterFieldId = data["relatedOuterFieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldSchemaIndexInfoNestingException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldSchemaIndexInfoNestingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["relatedFieldId"] = this.relatedFieldId;
        data["relatedOuterFieldId"] = this.relatedOuterFieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldSchemaIndexInfoNestingException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relatedFieldId?: string | undefined;
    relatedOuterFieldId?: string | undefined;
}

export class SchemaFieldIdUppercaseException extends PictureparkValidationException implements ISchemaFieldIdUppercaseException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldIdUppercaseException) {
        super(data);
        this._discriminator = "SchemaFieldIdUppercaseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldIdUppercaseException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIdUppercaseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIdUppercaseException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaIdLowercaseException extends PictureparkValidationException implements ISchemaIdLowercaseException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaIdLowercaseException) {
        super(data);
        this._discriminator = "SchemaIdLowercaseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaIdLowercaseException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaIdLowercaseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaIdLowercaseException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaInfoNotFoundException extends PictureparkNotFoundException implements ISchemaInfoNotFoundException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaInfoNotFoundException) {
        super(data);
        this._discriminator = "SchemaInfoNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaInfoNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInfoNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInfoNotFoundException extends IPictureparkNotFoundException {
    schemaId?: string | undefined;
}

export class IndexedFieldThresholdExceededException extends PictureparkValidationException implements IIndexedFieldThresholdExceededException {
    schemaIds?: string[] | undefined;
    indexedFieldCount!: number;
    indexedFieldThreshold!: number;

    constructor(data?: IIndexedFieldThresholdExceededException) {
        super(data);
        this._discriminator = "IndexedFieldThresholdExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            this.indexedFieldCount = data["indexedFieldCount"];
            this.indexedFieldThreshold = data["indexedFieldThreshold"];
        }
    }

    static fromJS(data: any): IndexedFieldThresholdExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new IndexedFieldThresholdExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        data["indexedFieldCount"] = this.indexedFieldCount;
        data["indexedFieldThreshold"] = this.indexedFieldThreshold;
        super.toJSON(data);
        return data; 
    }
}

export interface IIndexedFieldThresholdExceededException extends IPictureparkValidationException {
    schemaIds?: string[] | undefined;
    indexedFieldCount: number;
    indexedFieldThreshold: number;
}

export class SortableFieldThresholdExceededException extends PictureparkValidationException implements ISortableFieldThresholdExceededException {
    schemaIds?: string[] | undefined;
    sortableFieldCount!: number;
    sortableFieldThreshold!: number;

    constructor(data?: ISortableFieldThresholdExceededException) {
        super(data);
        this._discriminator = "SortableFieldThresholdExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            this.sortableFieldCount = data["sortableFieldCount"];
            this.sortableFieldThreshold = data["sortableFieldThreshold"];
        }
    }

    static fromJS(data: any): SortableFieldThresholdExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new SortableFieldThresholdExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        data["sortableFieldCount"] = this.sortableFieldCount;
        data["sortableFieldThreshold"] = this.sortableFieldThreshold;
        super.toJSON(data);
        return data; 
    }
}

export interface ISortableFieldThresholdExceededException extends IPictureparkValidationException {
    schemaIds?: string[] | undefined;
    sortableFieldCount: number;
    sortableFieldThreshold: number;
}

export class DuplicateSchemaInfoException extends PictureparkBusinessException implements IDuplicateSchemaInfoException {
    schemaId?: string | undefined;

    constructor(data?: IDuplicateSchemaInfoException) {
        super(data);
        this._discriminator = "DuplicateSchemaInfoException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): DuplicateSchemaInfoException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateSchemaInfoException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateSchemaInfoException extends IPictureparkBusinessException {
    schemaId?: string | undefined;
}

export class SchemaFieldNumberRangeException extends PictureparkValidationException implements ISchemaFieldNumberRangeException {
    fieldId?: string | undefined;
    propertyName?: string | undefined;
    minValue!: number;
    maxValue!: number;

    constructor(data?: ISchemaFieldNumberRangeException) {
        super(data);
        this._discriminator = "SchemaFieldNumberRangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.propertyName = data["propertyName"];
            this.minValue = data["minValue"];
            this.maxValue = data["maxValue"];
        }
    }

    static fromJS(data: any): SchemaFieldNumberRangeException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldNumberRangeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["propertyName"] = this.propertyName;
        data["minValue"] = this.minValue;
        data["maxValue"] = this.maxValue;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldNumberRangeException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    propertyName?: string | undefined;
    minValue: number;
    maxValue: number;
}

export class SchemaInUseContentSchemaException extends PictureparkValidationException implements ISchemaInUseContentSchemaException {
    schemaId?: string | undefined;
    contentSchemaIds?: string[] | undefined;

    constructor(data?: ISchemaInUseContentSchemaException) {
        super(data);
        this._discriminator = "SchemaInUseContentSchemaException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["contentSchemaIds"])) {
                this.contentSchemaIds = [] as any;
                for (let item of data["contentSchemaIds"])
                    this.contentSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaInUseContentSchemaException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInUseContentSchemaException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.contentSchemaIds)) {
            data["contentSchemaIds"] = [];
            for (let item of this.contentSchemaIds)
                data["contentSchemaIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInUseContentSchemaException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    contentSchemaIds?: string[] | undefined;
}

export class LayerAssignmentInUseWithContentsException extends PictureparkValidationException implements ILayerAssignmentInUseWithContentsException {
    schemaId?: string | undefined;
    usedAssignmentSchemaIds?: string[] | undefined;

    constructor(data?: ILayerAssignmentInUseWithContentsException) {
        super(data);
        this._discriminator = "LayerAssignmentInUseWithContentsException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["usedAssignmentSchemaIds"])) {
                this.usedAssignmentSchemaIds = [] as any;
                for (let item of data["usedAssignmentSchemaIds"])
                    this.usedAssignmentSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): LayerAssignmentInUseWithContentsException {
        data = typeof data === 'object' ? data : {};
        let result = new LayerAssignmentInUseWithContentsException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.usedAssignmentSchemaIds)) {
            data["usedAssignmentSchemaIds"] = [];
            for (let item of this.usedAssignmentSchemaIds)
                data["usedAssignmentSchemaIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ILayerAssignmentInUseWithContentsException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    usedAssignmentSchemaIds?: string[] | undefined;
}

export class SchemaInUseListItemException extends PictureparkValidationException implements ISchemaInUseListItemException {
    schemaId?: string | undefined;
    listItemCount!: number;

    constructor(data?: ISchemaInUseListItemException) {
        super(data);
        this._discriminator = "SchemaInUseListItemException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.listItemCount = data["listItemCount"];
        }
    }

    static fromJS(data: any): SchemaInUseListItemException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInUseListItemException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["listItemCount"] = this.listItemCount;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInUseListItemException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    listItemCount: number;
}

export class SchemaInUseContentException extends PictureparkValidationException implements ISchemaInUseContentException {
    schemaId?: string | undefined;
    contentCount!: number;

    constructor(data?: ISchemaInUseContentException) {
        super(data);
        this._discriminator = "SchemaInUseContentException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.contentCount = data["contentCount"];
        }
    }

    static fromJS(data: any): SchemaInUseContentException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInUseContentException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["contentCount"] = this.contentCount;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInUseContentException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    contentCount: number;
}

export class SchemaInUseFieldException extends PictureparkValidationException implements ISchemaInUseFieldException {
    schemaId?: string | undefined;
    fieldNamespaces?: string[] | undefined;

    constructor(data?: ISchemaInUseFieldException) {
        super(data);
        this._discriminator = "SchemaInUseFieldException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["fieldNamespaces"])) {
                this.fieldNamespaces = [] as any;
                for (let item of data["fieldNamespaces"])
                    this.fieldNamespaces!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaInUseFieldException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInUseFieldException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.fieldNamespaces)) {
            data["fieldNamespaces"] = [];
            for (let item of this.fieldNamespaces)
                data["fieldNamespaces"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInUseFieldException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldNamespaces?: string[] | undefined;
}

export class DuplicateMetadataDisplayPatternException extends PictureparkValidationException implements IDuplicateMetadataDisplayPatternException {
    schemaId?: string | undefined;
    displayPatternId?: string | undefined;

    constructor(data?: IDuplicateMetadataDisplayPatternException) {
        super(data);
        this._discriminator = "DuplicateMetadataDisplayPatternException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.displayPatternId = data["displayPatternId"];
        }
    }

    static fromJS(data: any): DuplicateMetadataDisplayPatternException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateMetadataDisplayPatternException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["displayPatternId"] = this.displayPatternId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateMetadataDisplayPatternException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    displayPatternId?: string | undefined;
}

export class DuplicateSchemaException extends PictureparkValidationException implements IDuplicateSchemaException {
    schemaId?: string | undefined;

    constructor(data?: IDuplicateSchemaException) {
        super(data);
        this._discriminator = "DuplicateSchemaException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): DuplicateSchemaException {
        data = typeof data === 'object' ? data : {};
        let result = new DuplicateSchemaException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDuplicateSchemaException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaImportEmptyException extends PictureparkValidationException implements ISchemaImportEmptyException {

    constructor(data?: ISchemaImportEmptyException) {
        super(data);
        this._discriminator = "SchemaImportEmptyException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaImportEmptyException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaImportEmptyException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaImportEmptyException extends IPictureparkValidationException {
}

export class SchemaImportVersionMismatchException extends PictureparkValidationException implements ISchemaImportVersionMismatchException {
    providedVersion?: string | undefined;
    expectedVersion?: string | undefined;

    constructor(data?: ISchemaImportVersionMismatchException) {
        super(data);
        this._discriminator = "SchemaImportVersionMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.providedVersion = data["providedVersion"];
            this.expectedVersion = data["expectedVersion"];
        }
    }

    static fromJS(data: any): SchemaImportVersionMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaImportVersionMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["providedVersion"] = this.providedVersion;
        data["expectedVersion"] = this.expectedVersion;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaImportVersionMismatchException extends IPictureparkValidationException {
    providedVersion?: string | undefined;
    expectedVersion?: string | undefined;
}

export class SchemaInheritanceFieldIndexDeviationException extends PictureparkValidationException implements ISchemaInheritanceFieldIndexDeviationException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaInheritanceFieldIndexDeviationException) {
        super(data);
        this._discriminator = "SchemaInheritanceFieldIndexDeviationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaInheritanceFieldIndexDeviationException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInheritanceFieldIndexDeviationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInheritanceFieldIndexDeviationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaInheritanceTypeDeviationException extends PictureparkValidationException implements ISchemaInheritanceTypeDeviationException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaInheritanceTypeDeviationException) {
        super(data);
        this._discriminator = "SchemaInheritanceTypeDeviationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaInheritanceTypeDeviationException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInheritanceTypeDeviationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInheritanceTypeDeviationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaValidationException extends PictureparkValidationException implements ISchemaValidationException {
    schemaId?: string | undefined;
    exceptions?: PictureparkBusinessException[] | undefined;

    constructor(data?: ISchemaValidationException) {
        super(data);
        this._discriminator = "SchemaValidationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["exceptions"])) {
                this.exceptions = [] as any;
                for (let item of data["exceptions"])
                    this.exceptions!.push(PictureparkBusinessException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaValidationException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.exceptions)) {
            data["exceptions"] = [];
            for (let item of this.exceptions)
                data["exceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaValidationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    exceptions?: PictureparkBusinessException[] | undefined;
}

export class SchemaSortFieldException extends PictureparkValidationException implements ISchemaSortFieldException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaSortFieldException) {
        super(data);
        this._discriminator = "SchemaSortFieldException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaSortFieldException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaSortFieldException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaSortFieldException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldIdException extends PictureparkValidationException implements ISchemaFieldIdException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldIdException) {
        super(data);
        this._discriminator = "SchemaFieldIdException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldIdException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIdException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIdException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldTypeChangeException extends PictureparkValidationException implements ISchemaFieldTypeChangeException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    oldTypeName?: string | undefined;
    newTypeName?: string | undefined;

    constructor(data?: ISchemaFieldTypeChangeException) {
        super(data);
        this._discriminator = "SchemaFieldTypeChangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.oldTypeName = data["oldTypeName"];
            this.newTypeName = data["newTypeName"];
        }
    }

    static fromJS(data: any): SchemaFieldTypeChangeException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldTypeChangeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["oldTypeName"] = this.oldTypeName;
        data["newTypeName"] = this.newTypeName;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldTypeChangeException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    oldTypeName?: string | undefined;
    newTypeName?: string | undefined;
}

export class SchemaFieldIndexException extends PictureparkValidationException implements ISchemaFieldIndexException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldIndexException) {
        super(data);
        this._discriminator = "SchemaFieldIndexException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldIndexException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldIndexException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldIndexException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldNotSortableException extends PictureparkValidationException implements ISchemaFieldNotSortableException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: ISchemaFieldNotSortableException) {
        super(data);
        this._discriminator = "SchemaFieldNotSortableException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldNotSortableException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldNotSortableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldNotSortableException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
}

export class SchemaFieldNotSearchableException extends PictureparkValidationException implements ISchemaFieldNotSearchableException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: ISchemaFieldNotSearchableException) {
        super(data);
        this._discriminator = "SchemaFieldNotSearchableException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldNotSearchableException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldNotSearchableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldNotSearchableException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
}

export class SchemaFieldInvalidBoostException extends PictureparkValidationException implements ISchemaFieldInvalidBoostException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    boost!: number;
    allowedBoostValues?: number[] | undefined;

    constructor(data?: ISchemaFieldInvalidBoostException) {
        super(data);
        this._discriminator = "SchemaFieldInvalidBoostException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
            this.boost = data["boost"];
            if (Array.isArray(data["allowedBoostValues"])) {
                this.allowedBoostValues = [] as any;
                for (let item of data["allowedBoostValues"])
                    this.allowedBoostValues!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaFieldInvalidBoostException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldInvalidBoostException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        data["boost"] = this.boost;
        if (Array.isArray(this.allowedBoostValues)) {
            data["allowedBoostValues"] = [];
            for (let item of this.allowedBoostValues)
                data["allowedBoostValues"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldInvalidBoostException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    boost: number;
    allowedBoostValues?: number[] | undefined;
}

export class SchemaNoContentException extends PictureparkValidationException implements ISchemaNoContentException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaNoContentException) {
        super(data);
        this._discriminator = "SchemaNoContentException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaNoContentException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaNoContentException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaNoContentException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaParentChangeException extends PictureparkValidationException implements ISchemaParentChangeException {
    schemaId?: string | undefined;
    oldSchemaParentId?: string | undefined;
    newSchemaParentId?: string | undefined;

    constructor(data?: ISchemaParentChangeException) {
        super(data);
        this._discriminator = "SchemaParentChangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.oldSchemaParentId = data["oldSchemaParentId"];
            this.newSchemaParentId = data["newSchemaParentId"];
        }
    }

    static fromJS(data: any): SchemaParentChangeException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaParentChangeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["oldSchemaParentId"] = this.oldSchemaParentId;
        data["newSchemaParentId"] = this.newSchemaParentId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaParentChangeException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    oldSchemaParentId?: string | undefined;
    newSchemaParentId?: string | undefined;
}

export class SchemaMissingTypeException extends PictureparkValidationException implements ISchemaMissingTypeException {
    schemaId?: string | undefined;
    expectedSchemaTypes?: SchemaType[] | undefined;

    constructor(data?: ISchemaMissingTypeException) {
        super(data);
        this._discriminator = "SchemaMissingTypeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["expectedSchemaTypes"])) {
                this.expectedSchemaTypes = [] as any;
                for (let item of data["expectedSchemaTypes"])
                    this.expectedSchemaTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaMissingTypeException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaMissingTypeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.expectedSchemaTypes)) {
            data["expectedSchemaTypes"] = [];
            for (let item of this.expectedSchemaTypes)
                data["expectedSchemaTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaMissingTypeException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    expectedSchemaTypes?: SchemaType[] | undefined;
}

/** Type of the schema */
export enum SchemaType {
    Content = "Content",
    Layer = "Layer",
    List = "List",
    Struct = "Struct",
}

export class SchemaPermissionConfigurationException extends PictureparkValidationException implements ISchemaPermissionConfigurationException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaPermissionConfigurationException) {
        super(data);
        this._discriminator = "SchemaPermissionConfigurationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaPermissionConfigurationException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionConfigurationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaPermissionConfigurationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaNoLayerException extends PictureparkValidationException implements ISchemaNoLayerException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaNoLayerException) {
        super(data);
        this._discriminator = "SchemaNoLayerException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaNoLayerException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaNoLayerException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaNoLayerException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaIdException extends PictureparkValidationException implements ISchemaIdException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaIdException) {
        super(data);
        this._discriminator = "SchemaIdException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaIdException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaIdException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaIdException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaInUseException extends PictureparkValidationException implements ISchemaInUseException {
    schemaId?: string | undefined;
    exceptions?: PictureparkBusinessException[] | undefined;

    constructor(data?: ISchemaInUseException) {
        super(data);
        this._discriminator = "SchemaInUseException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["exceptions"])) {
                this.exceptions = [] as any;
                for (let item of data["exceptions"])
                    this.exceptions!.push(PictureparkBusinessException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaInUseException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaInUseException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.exceptions)) {
            data["exceptions"] = [];
            for (let item of this.exceptions)
                data["exceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaInUseException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    exceptions?: PictureparkBusinessException[] | undefined;
}

export class SchemaNotFoundException extends PictureparkNotFoundException implements ISchemaNotFoundException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaNotFoundException) {
        super(data);
        this._discriminator = "SchemaNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaNotFoundException extends IPictureparkNotFoundException {
    schemaId?: string | undefined;
}

export class SchemaCountLimitReachedException extends PictureparkBusinessException implements ISchemaCountLimitReachedException {

    constructor(data?: ISchemaCountLimitReachedException) {
        super(data);
        this._discriminator = "SchemaCountLimitReachedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaCountLimitReachedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaCountLimitReachedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaCountLimitReachedException extends IPictureparkBusinessException {
}

export class SystemSchemaInvalidModificationException extends PictureparkValidationException implements ISystemSchemaInvalidModificationException {
    schemaId?: string | undefined;

    constructor(data?: ISystemSchemaInvalidModificationException) {
        super(data);
        this._discriminator = "SystemSchemaInvalidModificationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SystemSchemaInvalidModificationException {
        data = typeof data === 'object' ? data : {};
        let result = new SystemSchemaInvalidModificationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemSchemaInvalidModificationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaFieldRelationSchemaSystemSchemaException extends PictureparkValidationException implements ISchemaFieldRelationSchemaSystemSchemaException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relationSchemaId?: string | undefined;

    constructor(data?: ISchemaFieldRelationSchemaSystemSchemaException) {
        super(data);
        this._discriminator = "SchemaFieldRelationSchemaSystemSchemaException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.relationSchemaId = data["relationSchemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldRelationSchemaSystemSchemaException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldRelationSchemaSystemSchemaException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["relationSchemaId"] = this.relationSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldRelationSchemaSystemSchemaException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relationSchemaId?: string | undefined;
}

export class SchemaFieldRelationSchemaTypeUnsupportedException extends PictureparkValidationException implements ISchemaFieldRelationSchemaTypeUnsupportedException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relationSchemaId?: string | undefined;

    constructor(data?: ISchemaFieldRelationSchemaTypeUnsupportedException) {
        super(data);
        this._discriminator = "SchemaFieldRelationSchemaTypeUnsupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.relationSchemaId = data["relationSchemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldRelationSchemaTypeUnsupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldRelationSchemaTypeUnsupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["relationSchemaId"] = this.relationSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldRelationSchemaTypeUnsupportedException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    relationSchemaId?: string | undefined;
}

export class SchemaMultipleTypesException extends PictureparkValidationException implements ISchemaMultipleTypesException {
    schemaId?: string | undefined;
    schemaTypes?: string[] | undefined;

    constructor(data?: ISchemaMultipleTypesException) {
        super(data);
        this._discriminator = "SchemaMultipleTypesException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["schemaTypes"])) {
                this.schemaTypes = [] as any;
                for (let item of data["schemaTypes"])
                    this.schemaTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaMultipleTypesException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaMultipleTypesException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.schemaTypes)) {
            data["schemaTypes"] = [];
            for (let item of this.schemaTypes)
                data["schemaTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaMultipleTypesException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    schemaTypes?: string[] | undefined;
}

export class MissingDisplayPatternForCustomerDefaultLanguageException extends PictureparkValidationException implements IMissingDisplayPatternForCustomerDefaultLanguageException {
    schemaId?: string | undefined;
    missingTypes?: DisplayPatternType[] | undefined;

    constructor(data?: IMissingDisplayPatternForCustomerDefaultLanguageException) {
        super(data);
        this._discriminator = "MissingDisplayPatternForCustomerDefaultLanguageException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["missingTypes"])) {
                this.missingTypes = [] as any;
                for (let item of data["missingTypes"])
                    this.missingTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): MissingDisplayPatternForCustomerDefaultLanguageException {
        data = typeof data === 'object' ? data : {};
        let result = new MissingDisplayPatternForCustomerDefaultLanguageException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.missingTypes)) {
            data["missingTypes"] = [];
            for (let item of this.missingTypes)
                data["missingTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IMissingDisplayPatternForCustomerDefaultLanguageException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    missingTypes?: DisplayPatternType[] | undefined;
}

/** The display pattern type */
export enum DisplayPatternType {
    Thumbnail = "Thumbnail",
    List = "List",
    Detail = "Detail",
    Name = "Name",
    DownloadFileName = "DownloadFileName",
}

export class SchemaViewForAllException extends PictureparkValidationException implements ISchemaViewForAllException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaViewForAllException) {
        super(data);
        this._discriminator = "SchemaViewForAllException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaViewForAllException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaViewForAllException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaViewForAllException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SystemLayerReferenceInvalidModificationException extends PictureparkValidationException implements ISystemLayerReferenceInvalidModificationException {
    schemaId?: string | undefined;

    constructor(data?: ISystemLayerReferenceInvalidModificationException) {
        super(data);
        this._discriminator = "SystemLayerReferenceInvalidModificationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SystemLayerReferenceInvalidModificationException {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLayerReferenceInvalidModificationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemLayerReferenceInvalidModificationException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class SchemaFieldAnalyzerInvalidException extends PictureparkValidationException implements ISchemaFieldAnalyzerInvalidException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    analyzers?: Analyzer[] | undefined;
    allowedAnalyzers?: Analyzer[] | undefined;

    constructor(data?: ISchemaFieldAnalyzerInvalidException) {
        super(data);
        this._discriminator = "SchemaFieldAnalyzerInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["analyzers"])) {
                this.analyzers = [] as any;
                for (let item of data["analyzers"])
                    this.analyzers!.push(item);
            }
            if (Array.isArray(data["allowedAnalyzers"])) {
                this.allowedAnalyzers = [] as any;
                for (let item of data["allowedAnalyzers"])
                    this.allowedAnalyzers!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaFieldAnalyzerInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldAnalyzerInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.analyzers)) {
            data["analyzers"] = [];
            for (let item of this.analyzers)
                data["analyzers"].push(item);
        }
        if (Array.isArray(this.allowedAnalyzers)) {
            data["allowedAnalyzers"] = [];
            for (let item of this.allowedAnalyzers)
                data["allowedAnalyzers"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldAnalyzerInvalidException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    analyzers?: Analyzer[] | undefined;
    allowedAnalyzers?: Analyzer[] | undefined;
}

export enum Analyzer {
    None = "None",
    Simple = "Simple",
    Language = "Language",
    PathHierarchy = "PathHierarchy",
    EdgeNGram = "EdgeNGram",
    NGram = "NGram",
}

export class SchemaFieldRelationMultipleTypesException extends PictureparkValidationException implements ISchemaFieldRelationMultipleTypesException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;

    constructor(data?: ISchemaFieldRelationMultipleTypesException) {
        super(data);
        this._discriminator = "SchemaFieldRelationMultipleTypesException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): SchemaFieldRelationMultipleTypesException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldRelationMultipleTypesException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldRelationMultipleTypesException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
}

export class SchemaFieldNotRequirableException extends PictureparkValidationException implements ISchemaFieldNotRequirableException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;

    constructor(data?: ISchemaFieldNotRequirableException) {
        super(data);
        this._discriminator = "SchemaFieldNotRequirableException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldNotRequirableException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldNotRequirableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldNotRequirableException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
}

export class DisplayPatternTypeNotSupportedException extends PictureparkValidationException implements IDisplayPatternTypeNotSupportedException {
    schemaId?: string | undefined;
    displayPatternId?: string | undefined;

    constructor(data?: IDisplayPatternTypeNotSupportedException) {
        super(data);
        this._discriminator = "DisplayPatternTypeNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.displayPatternId = data["displayPatternId"];
        }
    }

    static fromJS(data: any): DisplayPatternTypeNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayPatternTypeNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["displayPatternId"] = this.displayPatternId;
        super.toJSON(data);
        return data; 
    }
}

export interface IDisplayPatternTypeNotSupportedException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    displayPatternId?: string | undefined;
}

export class DeleteContentsWithReferencesException extends PictureparkValidationException implements IDeleteContentsWithReferencesException {
    numberOfReferences!: number;
    numberOfShares!: number;

    constructor(data?: IDeleteContentsWithReferencesException) {
        super(data);
        this._discriminator = "DeleteContentsWithReferencesException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.numberOfReferences = data["numberOfReferences"];
            this.numberOfShares = data["numberOfShares"];
        }
    }

    static fromJS(data: any): DeleteContentsWithReferencesException {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteContentsWithReferencesException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfReferences"] = this.numberOfReferences;
        data["numberOfShares"] = this.numberOfShares;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteContentsWithReferencesException extends IPictureparkValidationException {
    numberOfReferences: number;
    numberOfShares: number;
}

export class ContentMetadataUpdateManyException extends PictureparkBusinessException implements IContentMetadataUpdateManyException {
    failedItemsCount!: number;
    totalItemsCount!: number;

    constructor(data?: IContentMetadataUpdateManyException) {
        super(data);
        this._discriminator = "ContentMetadataUpdateManyException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.failedItemsCount = data["failedItemsCount"];
            this.totalItemsCount = data["totalItemsCount"];
        }
    }

    static fromJS(data: any): ContentMetadataUpdateManyException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMetadataUpdateManyException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failedItemsCount"] = this.failedItemsCount;
        data["totalItemsCount"] = this.totalItemsCount;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentMetadataUpdateManyException extends IPictureparkBusinessException {
    failedItemsCount: number;
    totalItemsCount: number;
}

export class ContentNotFoundException extends PictureparkNotFoundException implements IContentNotFoundException {
    contentIds?: string[] | undefined;

    constructor(data?: IContentNotFoundException) {
        super(data);
        this._discriminator = "ContentNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IContentNotFoundException extends IPictureparkNotFoundException {
    contentIds?: string[] | undefined;
}

export class ContentLayerInvalidException extends PictureparkValidationException implements IContentLayerInvalidException {
    contentId?: string | undefined;
    layerIds?: string | undefined;

    constructor(data?: IContentLayerInvalidException) {
        super(data);
        this._discriminator = "ContentLayerInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.layerIds = data["layerIds"];
        }
    }

    static fromJS(data: any): ContentLayerInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentLayerInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["layerIds"] = this.layerIds;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentLayerInvalidException extends IPictureparkValidationException {
    contentId?: string | undefined;
    layerIds?: string | undefined;
}

export class ContentFileReplaceTypeMismatchException extends PictureparkValidationException implements IContentFileReplaceTypeMismatchException {
    contentId?: string | undefined;
    originalContentType!: ContentType;
    newContentType!: ContentType;

    constructor(data?: IContentFileReplaceTypeMismatchException) {
        super(data);
        this._discriminator = "ContentFileReplaceTypeMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.originalContentType = data["originalContentType"];
            this.newContentType = data["newContentType"];
        }
    }

    static fromJS(data: any): ContentFileReplaceTypeMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFileReplaceTypeMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["originalContentType"] = this.originalContentType;
        data["newContentType"] = this.newContentType;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentFileReplaceTypeMismatchException extends IPictureparkValidationException {
    contentId?: string | undefined;
    originalContentType: ContentType;
    newContentType: ContentType;
}

/** Content types */
export enum ContentType {
    Unknown = "Unknown",
    Bitmap = "Bitmap",
    VectorGraphic = "VectorGraphic",
    RawImage = "RawImage",
    InterchangeDocument = "InterchangeDocument",
    WordProcessingDocument = "WordProcessingDocument",
    TextDocument = "TextDocument",
    DesktopPublishingDocument = "DesktopPublishingDocument",
    Presentation = "Presentation",
    Spreadsheet = "Spreadsheet",
    Archive = "Archive",
    Audio = "Audio",
    Video = "Video",
    Font = "Font",
    Multimedia = "Multimedia",
    Application = "Application",
    SourceCode = "SourceCode",
    Database = "Database",
    Cad = "Cad",
    Model3d = "Model3d",
    Virtual = "Virtual",
}

export class ContentBackupFailedException extends PictureparkBusinessException implements IContentBackupFailedException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    outputId?: string | undefined;

    constructor(data?: IContentBackupFailedException) {
        super(data);
        this._discriminator = "ContentBackupFailedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
            this.outputId = data["outputId"];
        }
    }

    static fromJS(data: any): ContentBackupFailedException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentBackupFailedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        data["outputId"] = this.outputId;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentBackupFailedException extends IPictureparkBusinessException {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    outputId?: string | undefined;
}

export class ContentLayerSameRootException extends PictureparkValidationException implements IContentLayerSameRootException {
    contentId?: string | undefined;
    layerIdsByRootSchema?: LayerIdsByRootSchema[] | undefined;

    constructor(data?: IContentLayerSameRootException) {
        super(data);
        if (data) {
            if (data.layerIdsByRootSchema) {
                this.layerIdsByRootSchema = [];
                for (let i = 0; i < data.layerIdsByRootSchema.length; i++) {
                    let item = data.layerIdsByRootSchema[i];
                    this.layerIdsByRootSchema[i] = item && !(<any>item).toJSON ? new LayerIdsByRootSchema(item) : <LayerIdsByRootSchema>item;
                }
            }
        }
        this._discriminator = "ContentLayerSameRootException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            if (Array.isArray(data["layerIdsByRootSchema"])) {
                this.layerIdsByRootSchema = [] as any;
                for (let item of data["layerIdsByRootSchema"])
                    this.layerIdsByRootSchema!.push(LayerIdsByRootSchema.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentLayerSameRootException {
        data = typeof data === 'object' ? data : {};
        let result = new ContentLayerSameRootException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        if (Array.isArray(this.layerIdsByRootSchema)) {
            data["layerIdsByRootSchema"] = [];
            for (let item of this.layerIdsByRootSchema)
                data["layerIdsByRootSchema"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IContentLayerSameRootException extends IPictureparkValidationException {
    contentId?: string | undefined;
    layerIdsByRootSchema?: ILayerIdsByRootSchema[] | undefined;
}

export class LayerIdsByRootSchema implements ILayerIdsByRootSchema {
    rootSchemaId?: string | undefined;
    layerSchemaIds?: string[] | undefined;

    constructor(data?: ILayerIdsByRootSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rootSchemaId = data["rootSchemaId"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): LayerIdsByRootSchema {
        data = typeof data === 'object' ? data : {};
        let result = new LayerIdsByRootSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rootSchemaId"] = this.rootSchemaId;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        return data; 
    }
}

export interface ILayerIdsByRootSchema {
    rootSchemaId?: string | undefined;
    layerSchemaIds?: string[] | undefined;
}

export class BusinessProcessEngineRequestException extends PictureparkBusinessException implements IBusinessProcessEngineRequestException {
    businessProcessId?: string | undefined;
    engineError?: string | undefined;

    constructor(data?: IBusinessProcessEngineRequestException) {
        super(data);
        this._discriminator = "BusinessProcessEngineRequestException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
            this.engineError = data["engineError"];
        }
    }

    static fromJS(data: any): BusinessProcessEngineRequestException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessEngineRequestException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        data["engineError"] = this.engineError;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessEngineRequestException extends IPictureparkBusinessException {
    businessProcessId?: string | undefined;
    engineError?: string | undefined;
}

export class BusinessProcessNotFoundException extends PictureparkNotFoundException implements IBusinessProcessNotFoundException {
    businessProcessId?: string | undefined;

    constructor(data?: IBusinessProcessNotFoundException) {
        super(data);
        this._discriminator = "BusinessProcessNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
        }
    }

    static fromJS(data: any): BusinessProcessNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessNotFoundException extends IPictureparkNotFoundException {
    businessProcessId?: string | undefined;
}

export class BusinessProcessDefinitionNotFoundException extends PictureparkNotFoundException implements IBusinessProcessDefinitionNotFoundException {
    processDefinitionId?: string | undefined;

    constructor(data?: IBusinessProcessDefinitionNotFoundException) {
        super(data);
        this._discriminator = "BusinessProcessDefinitionNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.processDefinitionId = data["processDefinitionId"];
        }
    }

    static fromJS(data: any): BusinessProcessDefinitionNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDefinitionNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["processDefinitionId"] = this.processDefinitionId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessDefinitionNotFoundException extends IPictureparkNotFoundException {
    processDefinitionId?: string | undefined;
}

export class BusinessProcessDefinitionCreateException extends PictureparkBusinessException implements IBusinessProcessDefinitionCreateException {
    processDefinitionIds?: string[] | undefined;

    constructor(data?: IBusinessProcessDefinitionCreateException) {
        super(data);
        this._discriminator = "BusinessProcessDefinitionCreateException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["processDefinitionIds"])) {
                this.processDefinitionIds = [] as any;
                for (let item of data["processDefinitionIds"])
                    this.processDefinitionIds!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessProcessDefinitionCreateException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDefinitionCreateException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.processDefinitionIds)) {
            data["processDefinitionIds"] = [];
            for (let item of this.processDefinitionIds)
                data["processDefinitionIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessDefinitionCreateException extends IPictureparkBusinessException {
    processDefinitionIds?: string[] | undefined;
}

export class BusinessProcessNotExternalException extends PictureparkForbiddenException implements IBusinessProcessNotExternalException {
    businessProcessId?: string | undefined;

    constructor(data?: IBusinessProcessNotExternalException) {
        super(data);
        this._discriminator = "BusinessProcessNotExternalException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
        }
    }

    static fromJS(data: any): BusinessProcessNotExternalException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessNotExternalException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessNotExternalException extends IPictureparkForbiddenException {
    businessProcessId?: string | undefined;
}

export class BusinessProcessCancellationNotSupportedException extends PictureparkValidationException implements IBusinessProcessCancellationNotSupportedException {
    businessProcessId?: string | undefined;

    constructor(data?: IBusinessProcessCancellationNotSupportedException) {
        super(data);
        this._discriminator = "BusinessProcessCancellationNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
        }
    }

    static fromJS(data: any): BusinessProcessCancellationNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessCancellationNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessCancellationNotSupportedException extends IPictureparkValidationException {
    businessProcessId?: string | undefined;
}

export class BusinessProcessContinuationException extends PictureparkBusinessException implements IBusinessProcessContinuationException {
    continuationBusinessProcessId?: string | undefined;
    precedingBusinessProcessId?: string | undefined;
    precedingBusinessProcessException?: PictureparkException | undefined;

    constructor(data?: IBusinessProcessContinuationException) {
        super(data);
        this._discriminator = "BusinessProcessContinuationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.continuationBusinessProcessId = data["continuationBusinessProcessId"];
            this.precedingBusinessProcessId = data["precedingBusinessProcessId"];
            this.precedingBusinessProcessException = data["precedingBusinessProcessException"] ? PictureparkException.fromJS(data["precedingBusinessProcessException"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessProcessContinuationException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessContinuationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["continuationBusinessProcessId"] = this.continuationBusinessProcessId;
        data["precedingBusinessProcessId"] = this.precedingBusinessProcessId;
        data["precedingBusinessProcessException"] = this.precedingBusinessProcessException ? this.precedingBusinessProcessException.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessContinuationException extends IPictureparkBusinessException {
    continuationBusinessProcessId?: string | undefined;
    precedingBusinessProcessId?: string | undefined;
    precedingBusinessProcessException?: PictureparkException | undefined;
}

export class SchemaFieldImportMismatchException extends PictureparkValidationException implements ISchemaFieldImportMismatchException {
    schemaId?: string | undefined;
    importingFieldIds?: string | undefined;
    existingFieldIds?: string | undefined;

    constructor(data?: ISchemaFieldImportMismatchException) {
        super(data);
        this._discriminator = "SchemaFieldImportMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.importingFieldIds = data["importingFieldIds"];
            this.existingFieldIds = data["existingFieldIds"];
        }
    }

    static fromJS(data: any): SchemaFieldImportMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldImportMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["importingFieldIds"] = this.importingFieldIds;
        data["existingFieldIds"] = this.existingFieldIds;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldImportMismatchException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    importingFieldIds?: string | undefined;
    existingFieldIds?: string | undefined;
}

export class SchemaFieldImportRelatedSchemaMismatchException extends PictureparkValidationException implements ISchemaFieldImportRelatedSchemaMismatchException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    importingRelatedSchemaId?: string | undefined;
    existingRelatedSchemaId?: string | undefined;

    constructor(data?: ISchemaFieldImportRelatedSchemaMismatchException) {
        super(data);
        this._discriminator = "SchemaFieldImportRelatedSchemaMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.importingRelatedSchemaId = data["importingRelatedSchemaId"];
            this.existingRelatedSchemaId = data["existingRelatedSchemaId"];
        }
    }

    static fromJS(data: any): SchemaFieldImportRelatedSchemaMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldImportRelatedSchemaMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["importingRelatedSchemaId"] = this.importingRelatedSchemaId;
        data["existingRelatedSchemaId"] = this.existingRelatedSchemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldImportRelatedSchemaMismatchException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    importingRelatedSchemaId?: string | undefined;
    existingRelatedSchemaId?: string | undefined;
}

export class SchemaFieldImportTypeMismatchException extends PictureparkValidationException implements ISchemaFieldImportTypeMismatchException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    importingFieldType?: string | undefined;
    existingFieldType?: string | undefined;

    constructor(data?: ISchemaFieldImportTypeMismatchException) {
        super(data);
        this._discriminator = "SchemaFieldImportTypeMismatchException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.fieldId = data["fieldId"];
            this.importingFieldType = data["importingFieldType"];
            this.existingFieldType = data["existingFieldType"];
        }
    }

    static fromJS(data: any): SchemaFieldImportTypeMismatchException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldImportTypeMismatchException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["fieldId"] = this.fieldId;
        data["importingFieldType"] = this.importingFieldType;
        data["existingFieldType"] = this.existingFieldType;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldImportTypeMismatchException extends IPictureparkValidationException {
    schemaId?: string | undefined;
    fieldId?: string | undefined;
    importingFieldType?: string | undefined;
    existingFieldType?: string | undefined;
}

export class SchemaFieldNotSupportedException extends PictureparkValidationException implements ISchemaFieldNotSupportedException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    fieldType?: string | undefined;

    constructor(data?: ISchemaFieldNotSupportedException) {
        super(data);
        this._discriminator = "SchemaFieldNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.schemaId = data["schemaId"];
            this.fieldType = data["fieldType"];
        }
    }

    static fromJS(data: any): SchemaFieldNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["schemaId"] = this.schemaId;
        data["fieldType"] = this.fieldType;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldNotSupportedException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    schemaId?: string | undefined;
    fieldType?: string | undefined;
}

export class SchemaFieldDisplayPatternTypeNotSupportedException extends PictureparkValidationException implements ISchemaFieldDisplayPatternTypeNotSupportedException {
    fieldId?: string | undefined;
    displayPatternType!: DisplayPatternType;
    supportedDisplayPatternTypes?: DisplayPatternType[] | undefined;

    constructor(data?: ISchemaFieldDisplayPatternTypeNotSupportedException) {
        super(data);
        this._discriminator = "SchemaFieldDisplayPatternTypeNotSupportedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
            this.displayPatternType = data["displayPatternType"];
            if (Array.isArray(data["supportedDisplayPatternTypes"])) {
                this.supportedDisplayPatternTypes = [] as any;
                for (let item of data["supportedDisplayPatternTypes"])
                    this.supportedDisplayPatternTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaFieldDisplayPatternTypeNotSupportedException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaFieldDisplayPatternTypeNotSupportedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        data["displayPatternType"] = this.displayPatternType;
        if (Array.isArray(this.supportedDisplayPatternTypes)) {
            data["supportedDisplayPatternTypes"] = [];
            for (let item of this.supportedDisplayPatternTypes)
                data["supportedDisplayPatternTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaFieldDisplayPatternTypeNotSupportedException extends IPictureparkValidationException {
    fieldId?: string | undefined;
    displayPatternType: DisplayPatternType;
    supportedDisplayPatternTypes?: DisplayPatternType[] | undefined;
}

export class SnapshotTimeoutException extends PictureparkTimeoutException implements ISnapshotTimeoutException {

    constructor(data?: ISnapshotTimeoutException) {
        super(data);
        this._discriminator = "SnapshotTimeoutException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SnapshotTimeoutException {
        data = typeof data === 'object' ? data : {};
        let result = new SnapshotTimeoutException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISnapshotTimeoutException extends IPictureparkTimeoutException {
}

export class SnapshotFailedException extends PictureparkBusinessException implements ISnapshotFailedException {

    constructor(data?: ISnapshotFailedException) {
        super(data);
        this._discriminator = "SnapshotFailedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SnapshotFailedException {
        data = typeof data === 'object' ? data : {};
        let result = new SnapshotFailedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISnapshotFailedException extends IPictureparkBusinessException {
}

export class SnapshotSkippedException extends PictureparkBusinessException implements ISnapshotSkippedException {

    constructor(data?: ISnapshotSkippedException) {
        super(data);
        this._discriminator = "SnapshotSkippedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SnapshotSkippedException {
        data = typeof data === 'object' ? data : {};
        let result = new SnapshotSkippedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISnapshotSkippedException extends IPictureparkBusinessException {
}

export class AddMetadataLanguageTimeoutException extends PictureparkTimeoutException implements IAddMetadataLanguageTimeoutException {
    environmentProcessId?: string | undefined;

    constructor(data?: IAddMetadataLanguageTimeoutException) {
        super(data);
        this._discriminator = "AddMetadataLanguageTimeoutException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.environmentProcessId = data["environmentProcessId"];
        }
    }

    static fromJS(data: any): AddMetadataLanguageTimeoutException {
        data = typeof data === 'object' ? data : {};
        let result = new AddMetadataLanguageTimeoutException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["environmentProcessId"] = this.environmentProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddMetadataLanguageTimeoutException extends IPictureparkTimeoutException {
    environmentProcessId?: string | undefined;
}

export class EnvironmentProcessAlreadyRunningException extends PictureparkValidationException implements IEnvironmentProcessAlreadyRunningException {
    environmentProcessType!: EnvironmentProcessType;

    constructor(data?: IEnvironmentProcessAlreadyRunningException) {
        super(data);
        this._discriminator = "EnvironmentProcessAlreadyRunningException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.environmentProcessType = data["environmentProcessType"];
        }
    }

    static fromJS(data: any): EnvironmentProcessAlreadyRunningException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentProcessAlreadyRunningException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["environmentProcessType"] = this.environmentProcessType;
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentProcessAlreadyRunningException extends IPictureparkValidationException {
    environmentProcessType: EnvironmentProcessType;
}

export enum EnvironmentProcessType {
    AddMetadataLanguage = "AddMetadataLanguage",
    CustomerUpdate = "CustomerUpdate",
    EnvironmentUpdate = "EnvironmentUpdate",
    CustomerBoostValuesUpdate = "CustomerBoostValuesUpdate",
}

export class EnvironmentProcessNotFoundException extends PictureparkNotFoundException implements IEnvironmentProcessNotFoundException {
    environmentProcessId?: string | undefined;

    constructor(data?: IEnvironmentProcessNotFoundException) {
        super(data);
        this._discriminator = "EnvironmentProcessNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.environmentProcessId = data["environmentProcessId"];
        }
    }

    static fromJS(data: any): EnvironmentProcessNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentProcessNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["environmentProcessId"] = this.environmentProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentProcessNotFoundException extends IPictureparkNotFoundException {
    environmentProcessId?: string | undefined;
}

export class EnvironmentProcessWaitTimeoutException extends PictureparkTimeoutException implements IEnvironmentProcessWaitTimeoutException {
    environmentProcessId?: string | undefined;
    waitedLifecycles?: string | undefined;

    constructor(data?: IEnvironmentProcessWaitTimeoutException) {
        super(data);
        this._discriminator = "EnvironmentProcessWaitTimeoutException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.environmentProcessId = data["environmentProcessId"];
            this.waitedLifecycles = data["waitedLifecycles"];
        }
    }

    static fromJS(data: any): EnvironmentProcessWaitTimeoutException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentProcessWaitTimeoutException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["environmentProcessId"] = this.environmentProcessId;
        data["waitedLifecycles"] = this.waitedLifecycles;
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentProcessWaitTimeoutException extends IPictureparkTimeoutException {
    environmentProcessId?: string | undefined;
    waitedLifecycles?: string | undefined;
}

export class CustomerBoostValuesUpdateTimeoutException extends PictureparkTimeoutException implements ICustomerBoostValuesUpdateTimeoutException {
    environmentProcessId?: string | undefined;

    constructor(data?: ICustomerBoostValuesUpdateTimeoutException) {
        super(data);
        this._discriminator = "CustomerBoostValuesUpdateTimeoutException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.environmentProcessId = data["environmentProcessId"];
        }
    }

    static fromJS(data: any): CustomerBoostValuesUpdateTimeoutException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerBoostValuesUpdateTimeoutException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["environmentProcessId"] = this.environmentProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerBoostValuesUpdateTimeoutException extends IPictureparkTimeoutException {
    environmentProcessId?: string | undefined;
}

export class NoTermsOfServiceDefinedException extends PictureparkBusinessException implements INoTermsOfServiceDefinedException {

    constructor(data?: INoTermsOfServiceDefinedException) {
        super(data);
        this._discriminator = "NoTermsOfServiceDefinedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NoTermsOfServiceDefinedException {
        data = typeof data === 'object' ? data : {};
        let result = new NoTermsOfServiceDefinedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INoTermsOfServiceDefinedException extends IPictureparkBusinessException {
}

export class AtLeastOneActiveTermsOfServiceMustExistException extends PictureparkValidationException implements IAtLeastOneActiveTermsOfServiceMustExistException {

    constructor(data?: IAtLeastOneActiveTermsOfServiceMustExistException) {
        super(data);
        this._discriminator = "AtLeastOneActiveTermsOfServiceMustExistException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AtLeastOneActiveTermsOfServiceMustExistException {
        data = typeof data === 'object' ? data : {};
        let result = new AtLeastOneActiveTermsOfServiceMustExistException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAtLeastOneActiveTermsOfServiceMustExistException extends IPictureparkValidationException {
}

export class ForbiddenHtmlElementsUsedException extends PictureparkValidationException implements IForbiddenHtmlElementsUsedException {

    constructor(data?: IForbiddenHtmlElementsUsedException) {
        super(data);
        this._discriminator = "ForbiddenHtmlElementsUsedException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ForbiddenHtmlElementsUsedException {
        data = typeof data === 'object' ? data : {};
        let result = new ForbiddenHtmlElementsUsedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IForbiddenHtmlElementsUsedException extends IPictureparkValidationException {
}

export class BusinessProcessStateNotHitException extends PictureparkTimeoutException implements IBusinessProcessStateNotHitException {
    businessProcessId?: string | undefined;
    expected?: string[] | undefined;
    actual?: string | undefined;

    constructor(data?: IBusinessProcessStateNotHitException) {
        super(data);
        this._discriminator = "BusinessProcessStateNotHitException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
            if (Array.isArray(data["expected"])) {
                this.expected = [] as any;
                for (let item of data["expected"])
                    this.expected!.push(item);
            }
            this.actual = data["actual"];
        }
    }

    static fromJS(data: any): BusinessProcessStateNotHitException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessStateNotHitException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        if (Array.isArray(this.expected)) {
            data["expected"] = [];
            for (let item of this.expected)
                data["expected"].push(item);
        }
        data["actual"] = this.actual;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessStateNotHitException extends IPictureparkTimeoutException {
    businessProcessId?: string | undefined;
    expected?: string[] | undefined;
    actual?: string | undefined;
}

export class BusinessProcessLifeCycleNotHitException extends PictureparkTimeoutException implements IBusinessProcessLifeCycleNotHitException {
    businessProcessId?: string | undefined;
    expected?: BusinessProcessLifeCycle[] | undefined;
    actual!: BusinessProcessLifeCycle;

    constructor(data?: IBusinessProcessLifeCycleNotHitException) {
        super(data);
        this._discriminator = "BusinessProcessLifeCycleNotHitException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
            if (Array.isArray(data["expected"])) {
                this.expected = [] as any;
                for (let item of data["expected"])
                    this.expected!.push(item);
            }
            this.actual = data["actual"];
        }
    }

    static fromJS(data: any): BusinessProcessLifeCycleNotHitException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessLifeCycleNotHitException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        if (Array.isArray(this.expected)) {
            data["expected"] = [];
            for (let item of this.expected)
                data["expected"].push(item);
        }
        data["actual"] = this.actual;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessLifeCycleNotHitException extends IPictureparkTimeoutException {
    businessProcessId?: string | undefined;
    expected?: BusinessProcessLifeCycle[] | undefined;
    actual: BusinessProcessLifeCycle;
}

export class OnlyAccessibleToRecipientException extends PictureparkValidationException implements IOnlyAccessibleToRecipientException {

    constructor(data?: IOnlyAccessibleToRecipientException) {
        super(data);
        this._discriminator = "OnlyAccessibleToRecipientException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OnlyAccessibleToRecipientException {
        data = typeof data === 'object' ? data : {};
        let result = new OnlyAccessibleToRecipientException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOnlyAccessibleToRecipientException extends IPictureparkValidationException {
}

export class EnvironmentNotAvailableException extends PictureparkException implements IEnvironmentNotAvailableException {

    constructor(data?: IEnvironmentNotAvailableException) {
        super(data);
        this._discriminator = "EnvironmentNotAvailableException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): EnvironmentNotAvailableException {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentNotAvailableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IEnvironmentNotAvailableException extends IPictureparkException {
}

export class CustomerNotAvailableException extends PictureparkException implements ICustomerNotAvailableException {
    customerId?: string | undefined;

    constructor(data?: ICustomerNotAvailableException) {
        super(data);
        this._discriminator = "CustomerNotAvailableException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
        }
    }

    static fromJS(data: any): CustomerNotAvailableException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerNotAvailableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerNotAvailableException extends IPictureparkException {
    customerId?: string | undefined;
}

export class CustomerAliasHeaderMissingException extends PictureparkValidationException implements ICustomerAliasHeaderMissingException {

    constructor(data?: ICustomerAliasHeaderMissingException) {
        super(data);
        this._discriminator = "CustomerAliasHeaderMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CustomerAliasHeaderMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerAliasHeaderMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerAliasHeaderMissingException extends IPictureparkValidationException {
}

export class BusinessRuleActionInvalidDocumentTypeException extends PictureparkValidationException implements IBusinessRuleActionInvalidDocumentTypeException {
    allowedDocumentTypes?: BusinessRuleTriggerDocType[] | undefined;

    constructor(data?: IBusinessRuleActionInvalidDocumentTypeException) {
        super(data);
        this._discriminator = "BusinessRuleActionInvalidDocumentTypeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["allowedDocumentTypes"])) {
                this.allowedDocumentTypes = [] as any;
                for (let item of data["allowedDocumentTypes"])
                    this.allowedDocumentTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessRuleActionInvalidDocumentTypeException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleActionInvalidDocumentTypeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedDocumentTypes)) {
            data["allowedDocumentTypes"] = [];
            for (let item of this.allowedDocumentTypes)
                data["allowedDocumentTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleActionInvalidDocumentTypeException extends IPictureparkValidationException {
    allowedDocumentTypes?: BusinessRuleTriggerDocType[] | undefined;
}

export enum BusinessRuleTriggerDocType {
    Content = "Content",
}

export class BusinessRuleActionInvalidExecutionScopeException extends PictureparkValidationException implements IBusinessRuleActionInvalidExecutionScopeException {
    allowedScopes?: BusinessRuleExecutionScope[] | undefined;

    constructor(data?: IBusinessRuleActionInvalidExecutionScopeException) {
        super(data);
        this._discriminator = "BusinessRuleActionInvalidExecutionScopeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["allowedScopes"])) {
                this.allowedScopes = [] as any;
                for (let item of data["allowedScopes"])
                    this.allowedScopes!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessRuleActionInvalidExecutionScopeException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleActionInvalidExecutionScopeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedScopes)) {
            data["allowedScopes"] = [];
            for (let item of this.allowedScopes)
                data["allowedScopes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleActionInvalidExecutionScopeException extends IPictureparkValidationException {
    allowedScopes?: BusinessRuleExecutionScope[] | undefined;
}

export enum BusinessRuleExecutionScope {
    MainDoc = "MainDoc",
    SearchDoc = "SearchDoc",
}

export class BusinessRuleActionsMissingException extends PictureparkValidationException implements IBusinessRuleActionsMissingException {

    constructor(data?: IBusinessRuleActionsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleActionsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleActionsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleActionsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleActionsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleConditionMissingException extends PictureparkValidationException implements IBusinessRuleConditionMissingException {

    constructor(data?: IBusinessRuleConditionMissingException) {
        super(data);
        this._discriminator = "BusinessRuleConditionMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleConditionMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConditionMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleConditionMissingException extends IPictureparkValidationException {
}

export class BusinessRuleConditionsMissingException extends PictureparkValidationException implements IBusinessRuleConditionsMissingException {

    constructor(data?: IBusinessRuleConditionsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleConditionsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleConditionsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConditionsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleConditionsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleConfigurationValidationException extends PictureparkValidationException implements IBusinessRuleConfigurationValidationException {
    innerExceptions?: PictureparkValidationException[] | undefined;

    constructor(data?: IBusinessRuleConfigurationValidationException) {
        super(data);
        this._discriminator = "BusinessRuleConfigurationValidationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["innerExceptions"])) {
                this.innerExceptions = [] as any;
                for (let item of data["innerExceptions"])
                    this.innerExceptions!.push(PictureparkValidationException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleConfigurationValidationException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConfigurationValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.innerExceptions)) {
            data["innerExceptions"] = [];
            for (let item of this.innerExceptions)
                data["innerExceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleConfigurationValidationException extends IPictureparkValidationException {
    innerExceptions?: PictureparkValidationException[] | undefined;
}

export class BusinessRuleSchemaIdInvalidException extends PictureparkValidationException implements IBusinessRuleSchemaIdInvalidException {
    schemaId?: string | undefined;

    constructor(data?: IBusinessRuleSchemaIdInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleSchemaIdInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): BusinessRuleSchemaIdInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleSchemaIdInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleSchemaIdInvalidException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class BusinessRulePermissionSetIdInvalidException extends PictureparkValidationException implements IBusinessRulePermissionSetIdInvalidException {
    permissionSetId?: string | undefined;

    constructor(data?: IBusinessRulePermissionSetIdInvalidException) {
        super(data);
        this._discriminator = "BusinessRulePermissionSetIdInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): BusinessRulePermissionSetIdInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRulePermissionSetIdInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRulePermissionSetIdInvalidException extends IPictureparkValidationException {
    permissionSetId?: string | undefined;
}

export class BusinessRuleRuleIdDuplicationException extends PictureparkValidationException implements IBusinessRuleRuleIdDuplicationException {

    constructor(data?: IBusinessRuleRuleIdDuplicationException) {
        super(data);
        this._discriminator = "BusinessRuleRuleIdDuplicationException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleRuleIdDuplicationException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleRuleIdDuplicationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleRuleIdDuplicationException extends IPictureparkValidationException {
}

export class BusinessRuleRuleIdMissingException extends PictureparkValidationException implements IBusinessRuleRuleIdMissingException {

    constructor(data?: IBusinessRuleRuleIdMissingException) {
        super(data);
        this._discriminator = "BusinessRuleRuleIdMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleRuleIdMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleRuleIdMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleRuleIdMissingException extends IPictureparkValidationException {
}

export class BusinessRuleTriggerPointMissingException extends PictureparkValidationException implements IBusinessRuleTriggerPointMissingException {

    constructor(data?: IBusinessRuleTriggerPointMissingException) {
        super(data);
        this._discriminator = "BusinessRuleTriggerPointMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleTriggerPointMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleTriggerPointMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleTriggerPointMissingException extends IPictureparkValidationException {
}

export class BusinessRuleValidationException extends PictureparkValidationException implements IBusinessRuleValidationException {
    ruleId?: string | undefined;
    innerExceptions?: PictureparkValidationException[] | undefined;

    constructor(data?: IBusinessRuleValidationException) {
        super(data);
        this._discriminator = "BusinessRuleValidationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.ruleId = data["ruleId"];
            if (Array.isArray(data["innerExceptions"])) {
                this.innerExceptions = [] as any;
                for (let item of data["innerExceptions"])
                    this.innerExceptions!.push(PictureparkValidationException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleValidationException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleId"] = this.ruleId;
        if (Array.isArray(this.innerExceptions)) {
            data["innerExceptions"] = [];
            for (let item of this.innerExceptions)
                data["innerExceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleValidationException extends IPictureparkValidationException {
    ruleId?: string | undefined;
    innerExceptions?: PictureparkValidationException[] | undefined;
}

export class BusinessRuleConditionInvalidTriggerPointDocumentTypeException extends PictureparkValidationException implements IBusinessRuleConditionInvalidTriggerPointDocumentTypeException {
    allowedDocumentTypes?: BusinessRuleTriggerDocType[] | undefined;

    constructor(data?: IBusinessRuleConditionInvalidTriggerPointDocumentTypeException) {
        super(data);
        this._discriminator = "BusinessRuleConditionInvalidTriggerPointDocumentTypeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["allowedDocumentTypes"])) {
                this.allowedDocumentTypes = [] as any;
                for (let item of data["allowedDocumentTypes"])
                    this.allowedDocumentTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessRuleConditionInvalidTriggerPointDocumentTypeException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConditionInvalidTriggerPointDocumentTypeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedDocumentTypes)) {
            data["allowedDocumentTypes"] = [];
            for (let item of this.allowedDocumentTypes)
                data["allowedDocumentTypes"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleConditionInvalidTriggerPointDocumentTypeException extends IPictureparkValidationException {
    allowedDocumentTypes?: BusinessRuleTriggerDocType[] | undefined;
}

export class BusinessRuleRegularExpressionInvalidException extends PictureparkValidationException implements IBusinessRuleRegularExpressionInvalidException {
    regex?: string | undefined;

    constructor(data?: IBusinessRuleRegularExpressionInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleRegularExpressionInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.regex = data["regex"];
        }
    }

    static fromJS(data: any): BusinessRuleRegularExpressionInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleRegularExpressionInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regex"] = this.regex;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleRegularExpressionInvalidException extends IPictureparkValidationException {
    regex?: string | undefined;
}

export class BusinessRuleConditionInvalidTriggerPointActionException extends PictureparkValidationException implements IBusinessRuleConditionInvalidTriggerPointActionException {
    allowedActions?: BusinessRuleTriggerAction[] | undefined;

    constructor(data?: IBusinessRuleConditionInvalidTriggerPointActionException) {
        super(data);
        this._discriminator = "BusinessRuleConditionInvalidTriggerPointActionException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["allowedActions"])) {
                this.allowedActions = [] as any;
                for (let item of data["allowedActions"])
                    this.allowedActions!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessRuleConditionInvalidTriggerPointActionException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConditionInvalidTriggerPointActionException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedActions)) {
            data["allowedActions"] = [];
            for (let item of this.allowedActions)
                data["allowedActions"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleConditionInvalidTriggerPointActionException extends IPictureparkValidationException {
    allowedActions?: BusinessRuleTriggerAction[] | undefined;
}

export enum BusinessRuleTriggerAction {
    Create = "Create",
    Update = "Update",
    FileReplacement = "FileReplacement",
}

export class BusinessRuleRefIdsMissingException extends PictureparkValidationException implements IBusinessRuleRefIdsMissingException {

    constructor(data?: IBusinessRuleRefIdsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleRefIdsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleRefIdsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleRefIdsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleRefIdsMissingException extends IPictureparkValidationException {
}

export class BusinessRulePathInvalidException extends PictureparkValidationException implements IBusinessRulePathInvalidException {
    path?: string | undefined;

    constructor(data?: IBusinessRulePathInvalidException) {
        super(data);
        this._discriminator = "BusinessRulePathInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
        }
    }

    static fromJS(data: any): BusinessRulePathInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRulePathInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRulePathInvalidException extends IPictureparkValidationException {
    path?: string | undefined;
}

export class BusinessRuleFieldIdInvalidException extends PictureparkValidationException implements IBusinessRuleFieldIdInvalidException {
    fieldId?: string | undefined;

    constructor(data?: IBusinessRuleFieldIdInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleFieldIdInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldId = data["fieldId"];
        }
    }

    static fromJS(data: any): BusinessRuleFieldIdInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleFieldIdInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldId"] = this.fieldId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleFieldIdInvalidException extends IPictureparkValidationException {
    fieldId?: string | undefined;
}

export class BusinessRuleContentPermissionSetIdsMissingException extends PictureparkValidationException implements IBusinessRuleContentPermissionSetIdsMissingException {

    constructor(data?: IBusinessRuleContentPermissionSetIdsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleContentPermissionSetIdsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleContentPermissionSetIdsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleContentPermissionSetIdsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleContentPermissionSetIdsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleFieldPathInvalidException extends PictureparkValidationException implements IBusinessRuleFieldPathInvalidException {
    fieldPath?: string | undefined;

    constructor(data?: IBusinessRuleFieldPathInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleFieldPathInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): BusinessRuleFieldPathInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleFieldPathInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleFieldPathInvalidException extends IPictureparkValidationException {
    fieldPath?: string | undefined;
}

export class BusinessRulePolygonInvalidException extends PictureparkValidationException implements IBusinessRulePolygonInvalidException {

    constructor(data?: IBusinessRulePolygonInvalidException) {
        super(data);
        this._discriminator = "BusinessRulePolygonInvalidException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRulePolygonInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRulePolygonInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRulePolygonInvalidException extends IPictureparkValidationException {
}

export class BusinessRuleArrayIndexInvalidException extends PictureparkValidationException implements IBusinessRuleArrayIndexInvalidException {
    index?: string | undefined;

    constructor(data?: IBusinessRuleArrayIndexInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleArrayIndexInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.index = data["index"];
        }
    }

    static fromJS(data: any): BusinessRuleArrayIndexInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleArrayIndexInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleArrayIndexInvalidException extends IPictureparkValidationException {
    index?: string | undefined;
}

export class BusinessRuleDictionaryKeyInvalidException extends PictureparkValidationException implements IBusinessRuleDictionaryKeyInvalidException {
    key?: string | undefined;

    constructor(data?: IBusinessRuleDictionaryKeyInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleDictionaryKeyInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"];
        }
    }

    static fromJS(data: any): BusinessRuleDictionaryKeyInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleDictionaryKeyInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleDictionaryKeyInvalidException extends IPictureparkValidationException {
    key?: string | undefined;
}

export class BusinessRuleProjectionTransformationsMissingException extends PictureparkValidationException implements IBusinessRuleProjectionTransformationsMissingException {

    constructor(data?: IBusinessRuleProjectionTransformationsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleProjectionTransformationsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleProjectionTransformationsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleProjectionTransformationsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleProjectionTransformationsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleInvalidVariableNameException extends PictureparkValidationException implements IBusinessRuleInvalidVariableNameException {
    name?: string | undefined;

    constructor(data?: IBusinessRuleInvalidVariableNameException) {
        super(data);
        this._discriminator = "BusinessRuleInvalidVariableNameException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): BusinessRuleInvalidVariableNameException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleInvalidVariableNameException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleInvalidVariableNameException extends IPictureparkValidationException {
    name?: string | undefined;
}

export class BusinessRuleTransformationGroupTransformationsMissingException extends PictureparkValidationException implements IBusinessRuleTransformationGroupTransformationsMissingException {

    constructor(data?: IBusinessRuleTransformationGroupTransformationsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleTransformationGroupTransformationsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleTransformationGroupTransformationsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleTransformationGroupTransformationsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleTransformationGroupTransformationsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleTransformationGroupInputsMissingException extends PictureparkValidationException implements IBusinessRuleTransformationGroupInputsMissingException {

    constructor(data?: IBusinessRuleTransformationGroupInputsMissingException) {
        super(data);
        this._discriminator = "BusinessRuleTransformationGroupInputsMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessRuleTransformationGroupInputsMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleTransformationGroupInputsMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleTransformationGroupInputsMissingException extends IPictureparkValidationException {
}

export class BusinessRuleNamedCacheNameInvalidException extends PictureparkValidationException implements IBusinessRuleNamedCacheNameInvalidException {
    cacheName?: string | undefined;

    constructor(data?: IBusinessRuleNamedCacheNameInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleNamedCacheNameInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.cacheName = data["cacheName"];
        }
    }

    static fromJS(data: any): BusinessRuleNamedCacheNameInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleNamedCacheNameInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheName"] = this.cacheName;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleNamedCacheNameInvalidException extends IPictureparkValidationException {
    cacheName?: string | undefined;
}

export class BusinessRuleNGramTransformationSizeInvalidException extends PictureparkValidationException implements IBusinessRuleNGramTransformationSizeInvalidException {
    size!: number;
    minSize!: number;
    maxSize!: number;

    constructor(data?: IBusinessRuleNGramTransformationSizeInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleNGramTransformationSizeInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.size = data["size"];
            this.minSize = data["minSize"];
            this.maxSize = data["maxSize"];
        }
    }

    static fromJS(data: any): BusinessRuleNGramTransformationSizeInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleNGramTransformationSizeInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["minSize"] = this.minSize;
        data["maxSize"] = this.maxSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleNGramTransformationSizeInvalidException extends IPictureparkValidationException {
    size: number;
    minSize: number;
    maxSize: number;
}

export class BusinessRuleNGramTransformationMinWordLengthInvalidException extends PictureparkValidationException implements IBusinessRuleNGramTransformationMinWordLengthInvalidException {
    minWordLength!: number;

    constructor(data?: IBusinessRuleNGramTransformationMinWordLengthInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleNGramTransformationMinWordLengthInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.minWordLength = data["minWordLength"];
        }
    }

    static fromJS(data: any): BusinessRuleNGramTransformationMinWordLengthInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleNGramTransformationMinWordLengthInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minWordLength"] = this.minWordLength;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleNGramTransformationMinWordLengthInvalidException extends IPictureparkValidationException {
    minWordLength: number;
}

export class BusinessRuleNGramTransformationMaxWordLengthInvalidException extends PictureparkValidationException implements IBusinessRuleNGramTransformationMaxWordLengthInvalidException {
    maxWordLength!: number;

    constructor(data?: IBusinessRuleNGramTransformationMaxWordLengthInvalidException) {
        super(data);
        this._discriminator = "BusinessRuleNGramTransformationMaxWordLengthInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.maxWordLength = data["maxWordLength"];
        }
    }

    static fromJS(data: any): BusinessRuleNGramTransformationMaxWordLengthInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleNGramTransformationMaxWordLengthInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxWordLength"] = this.maxWordLength;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleNGramTransformationMaxWordLengthInvalidException extends IPictureparkValidationException {
    maxWordLength: number;
}

export class NamedCacheConfigurationException extends PictureparkValidationException implements INamedCacheConfigurationException {
    innerExceptions?: PictureparkValidationException[] | undefined;

    constructor(data?: INamedCacheConfigurationException) {
        super(data);
        this._discriminator = "NamedCacheConfigurationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["innerExceptions"])) {
                this.innerExceptions = [] as any;
                for (let item of data["innerExceptions"])
                    this.innerExceptions!.push(PictureparkValidationException.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NamedCacheConfigurationException {
        data = typeof data === 'object' ? data : {};
        let result = new NamedCacheConfigurationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.innerExceptions)) {
            data["innerExceptions"] = [];
            for (let item of this.innerExceptions)
                data["innerExceptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface INamedCacheConfigurationException extends IPictureparkValidationException {
    innerExceptions?: PictureparkValidationException[] | undefined;
}

export class NamedCacheNameMissingException extends PictureparkValidationException implements INamedCacheNameMissingException {

    constructor(data?: INamedCacheNameMissingException) {
        super(data);
        this._discriminator = "NamedCacheNameMissingException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NamedCacheNameMissingException {
        data = typeof data === 'object' ? data : {};
        let result = new NamedCacheNameMissingException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INamedCacheNameMissingException extends IPictureparkValidationException {
}

export class NamedCacheNameDuplicationException extends PictureparkValidationException implements INamedCacheNameDuplicationException {
    name?: string | undefined;

    constructor(data?: INamedCacheNameDuplicationException) {
        super(data);
        this._discriminator = "NamedCacheNameDuplicationException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): NamedCacheNameDuplicationException {
        data = typeof data === 'object' ? data : {};
        let result = new NamedCacheNameDuplicationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface INamedCacheNameDuplicationException extends IPictureparkValidationException {
    name?: string | undefined;
}

export class ListItemNamedCacheSchemaIdInvalidException extends PictureparkValidationException implements IListItemNamedCacheSchemaIdInvalidException {
    schemaId?: string | undefined;

    constructor(data?: IListItemNamedCacheSchemaIdInvalidException) {
        super(data);
        this._discriminator = "ListItemNamedCacheSchemaIdInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): ListItemNamedCacheSchemaIdInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemNamedCacheSchemaIdInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemNamedCacheSchemaIdInvalidException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class ListItemNamedCacheKeyFieldsInvalidException extends PictureparkValidationException implements IListItemNamedCacheKeyFieldsInvalidException {

    constructor(data?: IListItemNamedCacheKeyFieldsInvalidException) {
        super(data);
        this._discriminator = "ListItemNamedCacheKeyFieldsInvalidException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ListItemNamedCacheKeyFieldsInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemNamedCacheKeyFieldsInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemNamedCacheKeyFieldsInvalidException extends IPictureparkValidationException {
}

export class SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException extends PictureparkValidationException implements ISchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException {
    schemaId?: string | undefined;

    constructor(data?: ISchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException) {
        super(data);
        this._discriminator = "SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaTagboxFilterLookupNamedCacheSchemaIdInvalidException extends IPictureparkValidationException {
    schemaId?: string | undefined;
}

export class NoTagsFoundException extends PictureparkBusinessException implements INoTagsFoundException {

    constructor(data?: INoTagsFoundException) {
        super(data);
        this._discriminator = "NoTagsFoundException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NoTagsFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new NoTagsFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INoTagsFoundException extends IPictureparkBusinessException {
}

export class OutputNotAvailableException extends PictureparkBusinessException implements IOutputNotAvailableException {

    constructor(data?: IOutputNotAvailableException) {
        super(data);
        this._discriminator = "OutputNotAvailableException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OutputNotAvailableException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputNotAvailableException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputNotAvailableException extends IPictureparkBusinessException {
}

export class ModelNotFoundException extends PictureparkNotFoundException implements IModelNotFoundException {

    constructor(data?: IModelNotFoundException) {
        super(data);
        this._discriminator = "ModelNotFoundException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ModelNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new ModelNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IModelNotFoundException extends IPictureparkNotFoundException {
}

export class DisplayValueRerenderingInProgressException extends PictureparkValidationException implements IDisplayValueRerenderingInProgressException {

    constructor(data?: IDisplayValueRerenderingInProgressException) {
        super(data);
        this._discriminator = "DisplayValueRerenderingInProgressException";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DisplayValueRerenderingInProgressException {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayValueRerenderingInProgressException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDisplayValueRerenderingInProgressException extends IPictureparkValidationException {
}

export class OutputFormatNotFoundException extends PictureparkNotFoundException implements IOutputFormatNotFoundException {
    outputFormatId?: string | undefined;

    constructor(data?: IOutputFormatNotFoundException) {
        super(data);
        this._discriminator = "OutputFormatNotFoundException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): OutputFormatNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputFormatNotFoundException extends IPictureparkNotFoundException {
    outputFormatId?: string | undefined;
}

export class OutputFormatSourceNotDefinedException extends PictureparkValidationException implements IOutputFormatSourceNotDefinedException {
    outputFormatId?: string | undefined;

    constructor(data?: IOutputFormatSourceNotDefinedException) {
        super(data);
        this._discriminator = "OutputFormatSourceNotDefinedException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): OutputFormatSourceNotDefinedException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatSourceNotDefinedException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputFormatSourceNotDefinedException extends IPictureparkValidationException {
    outputFormatId?: string | undefined;
}

export class OutputFormatRetentionTimeOutOfRangeException extends ArgumentRangeException implements IOutputFormatRetentionTimeOutOfRangeException {
    outputFormatId?: string | undefined;

    constructor(data?: IOutputFormatRetentionTimeOutOfRangeException) {
        super(data);
        this._discriminator = "OutputFormatRetentionTimeOutOfRangeException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): OutputFormatRetentionTimeOutOfRangeException {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatRetentionTimeOutOfRangeException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outputFormatId"] = this.outputFormatId;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputFormatRetentionTimeOutOfRangeException extends IArgumentRangeException {
    outputFormatId?: string | undefined;
}

export class CollectionSizeLimitExceededException extends PictureparkValidationException implements ICollectionSizeLimitExceededException {
    collectionId?: string | undefined;
    limit!: number;

    constructor(data?: ICollectionSizeLimitExceededException) {
        super(data);
        this._discriminator = "CollectionSizeLimitExceededException";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.collectionId = data["collectionId"];
            this.limit = data["limit"];
        }
    }

    static fromJS(data: any): CollectionSizeLimitExceededException {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionSizeLimitExceededException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionId"] = this.collectionId;
        data["limit"] = this.limit;
        super.toJSON(data);
        return data; 
    }
}

export interface ICollectionSizeLimitExceededException extends IPictureparkValidationException {
    collectionId?: string | undefined;
    limit: number;
}

/** Search request to search for business processes */
export class BusinessProcessSearchRequest implements IBusinessProcessSearchRequest {
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.
Warning! It severely affects performance. */
    debugMode!: boolean;

    constructor(data?: IBusinessProcessSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.debugMode = data["debugMode"];
        }
    }

    static fromJS(data: any): BusinessProcessSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["debugMode"] = this.debugMode;
        return data; 
    }
}

/** Search request to search for business processes */
export interface IBusinessProcessSearchRequest {
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the BusinessProcessSearchResult.
Warning! It severely affects performance. */
    debugMode: boolean;
}

/** The filters' base class */
export class FilterBase implements IFilterBase {

    protected _discriminator: string;

    getDisplayName(locale: string): string | null {
        return null;
    }

    constructor(data?: IFilterBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "FilterBase";
    }

    init(data?: any) {
    }

    static fromJS(data: any): FilterBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AndFilter") {
            let result = new AndFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OrFilter") {
            let result = new OrFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NotFilter") {
            let result = new NotFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DateRangeFilter") {
            let result = new DateRangeFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ExistsFilter") {
            let result = new ExistsFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "GeoBoundingBoxFilter") {
            let result = new GeoBoundingBoxFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "GeoDistanceFilter") {
            let result = new GeoDistanceFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NestedFilter") {
            let result = new NestedFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NumericRangeFilter") {
            let result = new NumericRangeFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PrefixFilter") {
            let result = new PrefixFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermFilter") {
            let result = new TermFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsFilter") {
            let result = new TermsFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AggregationFilter") {
            let result = new AggregationFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ChildFilter") {
            let result = new ChildFilter();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ParentFilter") {
            let result = new ParentFilter();
            result.init(data);
            return result;
        }
        let result = new FilterBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** The filters' base class */
export interface IFilterBase {
}

/** Used to put filters in "and" */
export class AndFilter extends FilterBase implements IAndFilter {
    /** The filters to put in "and". All kinds of filters are accepted. */
    filters?: FilterBase[] | undefined;

    constructor(data?: IAndFilter) {
        super(data);
        this._discriminator = "AndFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["filters"])) {
                this.filters = [] as any;
                for (let item of data["filters"])
                    this.filters!.push(FilterBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AndFilter {
        data = typeof data === 'object' ? data : {};
        let result = new AndFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Used to put filters in "and" */
export interface IAndFilter extends IFilterBase {
    /** The filters to put in "and". All kinds of filters are accepted. */
    filters?: FilterBase[] | undefined;
}

/** Put filters in "or" */
export class OrFilter extends FilterBase implements IOrFilter {
    /** The filters to put in "or". All kinds of filters are accepted. */
    filters?: FilterBase[] | undefined;

    constructor(data?: IOrFilter) {
        super(data);
        this._discriminator = "OrFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["filters"])) {
                this.filters = [] as any;
                for (let item of data["filters"])
                    this.filters!.push(FilterBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrFilter {
        data = typeof data === 'object' ? data : {};
        let result = new OrFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Put filters in "or" */
export interface IOrFilter extends IFilterBase {
    /** The filters to put in "or". All kinds of filters are accepted. */
    filters?: FilterBase[] | undefined;
}

/** Negates the specified filter */
export class NotFilter extends FilterBase implements INotFilter {
    /** The filter to be negated. */
    filter!: FilterBase;

    constructor(data?: INotFilter) {
        super(data);
        if (!data) {
            this.filter = new FilterBase();
        }
        this._discriminator = "NotFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : new FilterBase();
        }
    }

    static fromJS(data: any): NotFilter {
        data = typeof data === 'object' ? data : {};
        let result = new NotFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Negates the specified filter */
export interface INotFilter extends IFilterBase {
    /** The filter to be negated. */
    filter: FilterBase;
}

/** Filters over a range of date time values */
export class DateRangeFilter extends FilterBase implements IDateRangeFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The date time range. */
    range!: DateRange;

    getDisplayName(locale: string) {
        return this.range && this.range.names ? this.range.names.translate(locale) : 'n/a';
    }

    constructor(data?: IDateRangeFilter) {
        super(data);
        if (data) {
            this.range = data.range && !(<any>data.range).toJSON ? new DateRange(data.range) : <DateRange>this.range; 
        }
        if (!data) {
            this.range = new DateRange();
        }
        this._discriminator = "DateRangeFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.range = data["range"] ? DateRange.fromJS(data["range"]) : new DateRange();
        }
    }

    static fromJS(data: any): DateRangeFilter {
        data = typeof data === 'object' ? data : {};
        let result = new DateRangeFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["range"] = this.range ? this.range.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters over a range of date time values */
export interface IDateRangeFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The date time range. */
    range: IDateRange;
}

/** The date time range class used in filters */
export class DateRange implements IDateRange {
    /** Language specific range names. */
    names?: TranslatedStringDictionary | undefined;
    /** The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    from?: string | undefined;
    /** The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    to?: string | undefined;

    constructor(data?: IDateRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
        }
    }

    static fromJS(data: any): DateRange {
        data = typeof data === 'object' ? data : {};
        let result = new DateRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        return data; 
    }
}

/** The date time range class used in filters */
export interface IDateRange {
    /** Language specific range names. */
    names?: ITranslatedStringDictionary | undefined;
    /** The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    from?: string | undefined;
    /** The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    to?: string | undefined;
}

/** A custom dictionary type to distinguish language specific class properties. */
export class TranslatedStringDictionary implements ITranslatedStringDictionary {

    [key: string]: string | any; 

    translate(locale: string) {
        const language = locale.split('-')[0];
        return this[language] ? this[language] : this[Object.keys(this)[0]];
    }

    constructor(data?: ITranslatedStringDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data: any): TranslatedStringDictionary {
        data = typeof data === 'object' ? data : {};
        let result = new TranslatedStringDictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data; 
    }
}

/** A custom dictionary type to distinguish language specific class properties. */
export interface ITranslatedStringDictionary {

    [key: string]: string | any; 
}

/** Filters over the existence of a field's value */
export class ExistsFilter extends FilterBase implements IExistsFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;

    constructor(data?: IExistsFilter) {
        super(data);
        this._discriminator = "ExistsFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
        }
    }

    static fromJS(data: any): ExistsFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ExistsFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        super.toJSON(data);
        return data; 
    }
}

/** Filters over the existence of a field's value */
export interface IExistsFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
}

/** Filters geo point values based on a bounding box */
export class GeoBoundingBoxFilter extends FilterBase implements IGeoBoundingBoxFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The top left corner of the bounding box's geo location (latitude and longitude). */
    topLeft!: GeoLocation;
    /** The bottom right corner of the bounding box's geo location (latitude and longitude). */
    bottomRight!: GeoLocation;

    constructor(data?: IGeoBoundingBoxFilter) {
        super(data);
        if (data) {
            this.topLeft = data.topLeft && !(<any>data.topLeft).toJSON ? new GeoLocation(data.topLeft) : <GeoLocation>this.topLeft; 
            this.bottomRight = data.bottomRight && !(<any>data.bottomRight).toJSON ? new GeoLocation(data.bottomRight) : <GeoLocation>this.bottomRight; 
        }
        if (!data) {
            this.topLeft = new GeoLocation();
            this.bottomRight = new GeoLocation();
        }
        this._discriminator = "GeoBoundingBoxFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.topLeft = data["topLeft"] ? GeoLocation.fromJS(data["topLeft"]) : new GeoLocation();
            this.bottomRight = data["bottomRight"] ? GeoLocation.fromJS(data["bottomRight"]) : new GeoLocation();
        }
    }

    static fromJS(data: any): GeoBoundingBoxFilter {
        data = typeof data === 'object' ? data : {};
        let result = new GeoBoundingBoxFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["topLeft"] = this.topLeft ? this.topLeft.toJSON() : <any>undefined;
        data["bottomRight"] = this.bottomRight ? this.bottomRight.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters geo point values based on a bounding box */
export interface IGeoBoundingBoxFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The top left corner of the bounding box's geo location (latitude and longitude). */
    topLeft: IGeoLocation;
    /** The bottom right corner of the bounding box's geo location (latitude and longitude). */
    bottomRight: IGeoLocation;
}

/** It stores geo location information (latitude and longitude) */
export class GeoLocation implements IGeoLocation {
    /** The latitude */
    lat!: number;
    /** The longitude */
    lon!: number;

    constructor(data?: IGeoLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lon = data["lon"];
        }
    }

    static fromJS(data: any): GeoLocation {
        data = typeof data === 'object' ? data : {};
        let result = new GeoLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lon"] = this.lon;
        return data; 
    }
}

/** It stores geo location information (latitude and longitude) */
export interface IGeoLocation {
    /** The latitude */
    lat: number;
    /** The longitude */
    lon: number;
}

/** Filters within the radius of the distance from a location */
export class GeoDistanceFilter extends FilterBase implements IGeoDistanceFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The point of origin to calculate the distance from (latitude/longitude). */
    location!: GeoLocation;
    /** The distance in meters from the point of origin. */
    distance!: number;

    constructor(data?: IGeoDistanceFilter) {
        super(data);
        if (data) {
            this.location = data.location && !(<any>data.location).toJSON ? new GeoLocation(data.location) : <GeoLocation>this.location; 
        }
        if (!data) {
            this.location = new GeoLocation();
        }
        this._discriminator = "GeoDistanceFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.location = data["location"] ? GeoLocation.fromJS(data["location"]) : new GeoLocation();
            this.distance = data["distance"];
        }
    }

    static fromJS(data: any): GeoDistanceFilter {
        data = typeof data === 'object' ? data : {};
        let result = new GeoDistanceFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["distance"] = this.distance;
        super.toJSON(data);
        return data; 
    }
}

/** Filters within the radius of the distance from a location */
export interface IGeoDistanceFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The point of origin to calculate the distance from (latitude/longitude). */
    location: IGeoLocation;
    /** The distance in meters from the point of origin. */
    distance: number;
}

/** Filters on nested documents */
export class NestedFilter extends FilterBase implements INestedFilter {
    /** The path pointing to the nested document (i.e. personLayer.nestedAddress). */
    path!: string;
    /** The filter to be applied on the nested documents. */
    filter!: FilterBase;

    constructor(data?: INestedFilter) {
        super(data);
        if (!data) {
            this.filter = new FilterBase();
        }
        this._discriminator = "NestedFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : new FilterBase();
        }
    }

    static fromJS(data: any): NestedFilter {
        data = typeof data === 'object' ? data : {};
        let result = new NestedFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters on nested documents */
export interface INestedFilter extends IFilterBase {
    /** The path pointing to the nested document (i.e. personLayer.nestedAddress). */
    path: string;
    /** The filter to be applied on the nested documents. */
    filter: FilterBase;
}

/** Filters over a range of numeric values */
export class NumericRangeFilter extends FilterBase implements INumericRangeFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The numeric range on which filtering. */
    range!: NumericRange;

    constructor(data?: INumericRangeFilter) {
        super(data);
        if (data) {
            this.range = data.range && !(<any>data.range).toJSON ? new NumericRange(data.range) : <NumericRange>this.range; 
        }
        if (!data) {
            this.range = new NumericRange();
        }
        this._discriminator = "NumericRangeFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.range = data["range"] ? NumericRange.fromJS(data["range"]) : new NumericRange();
        }
    }

    static fromJS(data: any): NumericRangeFilter {
        data = typeof data === 'object' ? data : {};
        let result = new NumericRangeFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["range"] = this.range ? this.range.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters over a range of numeric values */
export interface INumericRangeFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The numeric range on which filtering. */
    range: INumericRange;
}

/** The numeric range class */
export class NumericRange implements INumericRange {
    /** Language specific range names. */
    names?: TranslatedStringDictionary | undefined;
    /** The from value. */
    from?: number | undefined;
    /** The to value. */
    to?: number | undefined;

    constructor(data?: INumericRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
        }
    }

    static fromJS(data: any): NumericRange {
        data = typeof data === 'object' ? data : {};
        let result = new NumericRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        return data; 
    }
}

/** The numeric range class */
export interface INumericRange {
    /** Language specific range names. */
    names?: ITranslatedStringDictionary | undefined;
    /** The from value. */
    from?: number | undefined;
    /** The to value. */
    to?: number | undefined;
}

/** Filters field's values based on a prefix */
export class PrefixFilter extends FilterBase implements IPrefixFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The value to be used as prefix. */
    prefix!: string;

    constructor(data?: IPrefixFilter) {
        super(data);
        this._discriminator = "PrefixFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.prefix = data["prefix"];
        }
    }

    static fromJS(data: any): PrefixFilter {
        data = typeof data === 'object' ? data : {};
        let result = new PrefixFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["prefix"] = this.prefix;
        super.toJSON(data);
        return data; 
    }
}

/** Filters field's values based on a prefix */
export interface IPrefixFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The value to be used as prefix. */
    prefix: string;
}

/** Filters values exactly containing a term */
export class TermFilter extends FilterBase implements ITermFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The value to use to filter on. */
    term!: string;

    constructor(data?: ITermFilter) {
        super(data);
        this._discriminator = "TermFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.term = data["term"];
        }
    }

    static fromJS(data: any): TermFilter {
        data = typeof data === 'object' ? data : {};
        let result = new TermFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["term"] = this.term;
        super.toJSON(data);
        return data; 
    }
}

/** Filters values exactly containing a term */
export interface ITermFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The value to use to filter on. */
    term: string;
}

/** Filters values containing at least one of the terms */
export class TermsFilter extends FilterBase implements ITermsFilter {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field!: string;
    /** The list of values to be filtered on. At least one must match to return results. */
    terms!: string[];

    constructor(data?: ITermsFilter) {
        super(data);
        if (!data) {
            this.terms = [];
        }
        this._discriminator = "TermsFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            if (Array.isArray(data["terms"])) {
                this.terms = [] as any;
                for (let item of data["terms"])
                    this.terms!.push(item);
            }
        }
    }

    static fromJS(data: any): TermsFilter {
        data = typeof data === 'object' ? data : {};
        let result = new TermsFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        if (Array.isArray(this.terms)) {
            data["terms"] = [];
            for (let item of this.terms)
                data["terms"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

/** Filters values containing at least one of the terms */
export interface ITermsFilter extends IFilterBase {
    /** The field's name to execute the filter on. It is composed by the field ids of the hierarchy joined with "."
(i.e. personLayer.address.street). */
    field: string;
    /** The list of values to be filtered on. At least one must match to return results. */
    terms: string[];
}

/** Filters aggregations */
export class AggregationFilter extends FilterBase implements IAggregationFilter {
    /** The name of the aggregation this filter is connected to. */
    aggregationName?: string | undefined;
    /** The filter to be applied. */
    filter?: FilterBase | undefined;
    /** Autogenerated Guid at request time, for precise aggregation result mapping. */
    temporaryAggregatorRequestId?: string | undefined;

    constructor(data?: IAggregationFilter) {
        super(data);
        this._discriminator = "AggregationFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.aggregationName = data["aggregationName"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.temporaryAggregatorRequestId = data["temporaryAggregatorRequestId"];
        }
    }

    static fromJS(data: any): AggregationFilter {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aggregationName"] = this.aggregationName;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["temporaryAggregatorRequestId"] = this.temporaryAggregatorRequestId;
        super.toJSON(data);
        return data; 
    }
}

/** Filters aggregations */
export interface IAggregationFilter extends IFilterBase {
    /** The name of the aggregation this filter is connected to. */
    aggregationName?: string | undefined;
    /** The filter to be applied. */
    filter?: FilterBase | undefined;
    /** Autogenerated Guid at request time, for precise aggregation result mapping. */
    temporaryAggregatorRequestId?: string | undefined;
}

/** Filters on child documents */
export class ChildFilter extends FilterBase implements IChildFilter {
    /** The type of the child document. */
    childType!: string;
    /** The filter to be applied on the child document. All kinds of filters are accepted. */
    filter!: FilterBase;

    constructor(data?: IChildFilter) {
        super(data);
        if (!data) {
            this.filter = new FilterBase();
        }
        this._discriminator = "ChildFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.childType = data["childType"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : new FilterBase();
        }
    }

    static fromJS(data: any): ChildFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ChildFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childType"] = this.childType;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters on child documents */
export interface IChildFilter extends IFilterBase {
    /** The type of the child document. */
    childType: string;
    /** The filter to be applied on the child document. All kinds of filters are accepted. */
    filter: FilterBase;
}

/** Filters on parent documents */
export class ParentFilter extends FilterBase implements IParentFilter {
    /** The type of the parent document. */
    parentType!: string;
    /** The filter to be applied on the child document. All kinds of filters are accepted. */
    filter!: FilterBase;

    constructor(data?: IParentFilter) {
        super(data);
        if (!data) {
            this.filter = new FilterBase();
        }
        this._discriminator = "ParentFilter";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.parentType = data["parentType"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : new FilterBase();
        }
    }

    static fromJS(data: any): ParentFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ParentFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentType"] = this.parentType;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Filters on parent documents */
export interface IParentFilter extends IFilterBase {
    /** The type of the parent document. */
    parentType: string;
    /** The filter to be applied on the child document. All kinds of filters are accepted. */
    filter: FilterBase;
}

/** Search behaviors */
export enum SearchBehavior {
    DropInvalidCharactersOnFailure = "DropInvalidCharactersOnFailure",
    WildcardOnSingleTerm = "WildcardOnSingleTerm",
    SimplifiedSearch = "SimplifiedSearch",
    WildcardOnEveryTerm = "WildcardOnEveryTerm",
    SimplifiedSearchOr = "SimplifiedSearchOr",
}

/** Result from waiting for life cycle(s) on a business process */
export class BusinessProcessWaitForLifeCycleResult implements IBusinessProcessWaitForLifeCycleResult {
    /** The life cycle that was hit. */
    lifeCycleHit?: BusinessProcessLifeCycle | undefined;
    /** The business process. */
    businessProcess!: BusinessProcess;

    constructor(data?: IBusinessProcessWaitForLifeCycleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.businessProcess = new BusinessProcess();
        }
    }

    init(data?: any) {
        if (data) {
            this.lifeCycleHit = data["lifeCycleHit"];
            this.businessProcess = data["businessProcess"] ? BusinessProcess.fromJS(data["businessProcess"]) : new BusinessProcess();
        }
    }

    static fromJS(data: any): BusinessProcessWaitForLifeCycleResult {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessWaitForLifeCycleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lifeCycleHit"] = this.lifeCycleHit;
        data["businessProcess"] = this.businessProcess ? this.businessProcess.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result from waiting for life cycle(s) on a business process */
export interface IBusinessProcessWaitForLifeCycleResult {
    /** The life cycle that was hit. */
    lifeCycleHit?: BusinessProcessLifeCycle | undefined;
    /** The business process. */
    businessProcess: BusinessProcess;
}

/** Result from waiting for state(s) on a business process */
export class BusinessProcessWaitForStateResult implements IBusinessProcessWaitForStateResult {
    /** The state that was hit. */
    stateHit?: string | undefined;
    /** The business process. */
    businessProcess!: BusinessProcess;

    constructor(data?: IBusinessProcessWaitForStateResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.businessProcess = new BusinessProcess();
        }
    }

    init(data?: any) {
        if (data) {
            this.stateHit = data["stateHit"];
            this.businessProcess = data["businessProcess"] ? BusinessProcess.fromJS(data["businessProcess"]) : new BusinessProcess();
        }
    }

    static fromJS(data: any): BusinessProcessWaitForStateResult {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessWaitForStateResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stateHit"] = this.stateHit;
        data["businessProcess"] = this.businessProcess ? this.businessProcess.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result from waiting for state(s) on a business process */
export interface IBusinessProcessWaitForStateResult {
    /** The state that was hit. */
    stateHit?: string | undefined;
    /** The business process. */
    businessProcess: BusinessProcess;
}

/** Detailed representation of a business process */
export class BusinessProcessDetails extends BusinessProcess implements IBusinessProcessDetails {
    /** Details for the business process. */
    details?: BusinessProcessDetailsDataBase | undefined;

    constructor(data?: IBusinessProcessDetails) {
        super(data);
        this._discriminator = "BusinessProcessDetails";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.details = data["details"] ? BusinessProcessDetailsDataBase.fromJS(data["details"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessProcessDetails {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Detailed representation of a business process */
export interface IBusinessProcessDetails extends IBusinessProcess {
    /** Details for the business process. */
    details?: BusinessProcessDetailsDataBase | undefined;
}

/** Base class for the details of a business process */
export abstract class BusinessProcessDetailsDataBase implements IBusinessProcessDetailsDataBase {

    protected _discriminator: string;

    constructor(data?: IBusinessProcessDetailsDataBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "BusinessProcessDetailsDataBase";
    }

    init(data?: any) {
    }

    static fromJS(data: any): BusinessProcessDetailsDataBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "BusinessProcessDetailsDataBatchResponse") {
            let result = new BusinessProcessDetailsDataBatchResponse();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDetailsDataSchemaImport") {
            let result = new BusinessProcessDetailsDataSchemaImport();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDetailsDataCdnPurge") {
            let result = new BusinessProcessDetailsDataCdnPurge();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessDetailsDataContentImport") {
            let result = new BusinessProcessDetailsDataContentImport();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BusinessProcessDetailsDataBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** Base class for the details of a business process */
export interface IBusinessProcessDetailsDataBase {
}

/** Business process detailed information regarding a batch operation */
export class BusinessProcessDetailsDataBatchResponse extends BusinessProcessDetailsDataBase implements IBusinessProcessDetailsDataBatchResponse {
    /** The DocType on which the operation was performed. */
    docType!: string;
    /** The response of the batch operation. */
    response!: BatchResponse;

    constructor(data?: IBusinessProcessDetailsDataBatchResponse) {
        super(data);
        if (data) {
            this.response = data.response && !(<any>data.response).toJSON ? new BatchResponse(data.response) : <BatchResponse>this.response; 
        }
        if (!data) {
            this.response = new BatchResponse();
        }
        this._discriminator = "BusinessProcessDetailsDataBatchResponse";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.docType = data["docType"];
            this.response = data["response"] ? BatchResponse.fromJS(data["response"]) : new BatchResponse();
        }
    }

    static fromJS(data: any): BusinessProcessDetailsDataBatchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDetailsDataBatchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docType"] = this.docType;
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Business process detailed information regarding a batch operation */
export interface IBusinessProcessDetailsDataBatchResponse extends IBusinessProcessDetailsDataBase {
    /** The DocType on which the operation was performed. */
    docType: string;
    /** The response of the batch operation. */
    response: IBatchResponse;
}

/** Response from a batch operation */
export class BatchResponse implements IBatchResponse {
    /** Rows in the response. */
    rows!: BatchResponseRow[];

    constructor(data?: IBatchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.rows) {
                this.rows = [];
                for (let i = 0; i < data.rows.length; i++) {
                    let item = data.rows[i];
                    this.rows[i] = item && !(<any>item).toJSON ? new BatchResponseRow(item) : <BatchResponseRow>item;
                }
            }
        }
        if (!data) {
            this.rows = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["rows"])) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(BatchResponseRow.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BatchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data; 
    }
}

/** Response from a batch operation */
export interface IBatchResponse {
    /** Rows in the response. */
    rows: IBatchResponseRow[];
}

/** Row in a batch operation response */
export class BatchResponseRow implements IBatchResponseRow {
    /** Id of the item. */
    id!: string;
    /** Indicates if the operation succeeded. */
    succeeded!: boolean;
    /** Status code of the operation. */
    status!: number;
    /** New version of the item. */
    version!: number;
    /** If the operation did not succeeded, this contains error information. */
    error?: ErrorResponse | undefined;
    /** The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation. */
    requestId?: string | undefined;

    constructor(data?: IBatchResponseRow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.error = data.error && !(<any>data.error).toJSON ? new ErrorResponse(data.error) : <ErrorResponse>this.error; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.succeeded = data["succeeded"];
            this.status = data["status"];
            this.version = data["version"];
            this.error = data["error"] ? ErrorResponse.fromJS(data["error"]) : <any>undefined;
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): BatchResponseRow {
        data = typeof data === 'object' ? data : {};
        let result = new BatchResponseRow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["succeeded"] = this.succeeded;
        data["status"] = this.status;
        data["version"] = this.version;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["requestId"] = this.requestId;
        return data; 
    }
}

/** Row in a batch operation response */
export interface IBatchResponseRow {
    /** Id of the item. */
    id: string;
    /** Indicates if the operation succeeded. */
    succeeded: boolean;
    /** Status code of the operation. */
    status: number;
    /** New version of the item. */
    version: number;
    /** If the operation did not succeeded, this contains error information. */
    error?: IErrorResponse | undefined;
    /** The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation. */
    requestId?: string | undefined;
}

/** Business process detailed information regarding Schema / ListItems import operation */
export class BusinessProcessDetailsDataSchemaImport extends BusinessProcessDetailsDataBase implements IBusinessProcessDetailsDataSchemaImport {
    /** Result information of a schema import operation */
    schemaImportResult?: SchemaImportResult | undefined;
    /** Result information of a list item import operation */
    listItemImportResult?: ListItemImportResult | undefined;

    constructor(data?: IBusinessProcessDetailsDataSchemaImport) {
        super(data);
        if (data) {
            this.schemaImportResult = data.schemaImportResult && !(<any>data.schemaImportResult).toJSON ? new SchemaImportResult(data.schemaImportResult) : <SchemaImportResult>this.schemaImportResult; 
            this.listItemImportResult = data.listItemImportResult && !(<any>data.listItemImportResult).toJSON ? new ListItemImportResult(data.listItemImportResult) : <ListItemImportResult>this.listItemImportResult; 
        }
        this._discriminator = "BusinessProcessDetailsDataSchemaImport";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaImportResult = data["schemaImportResult"] ? SchemaImportResult.fromJS(data["schemaImportResult"]) : <any>undefined;
            this.listItemImportResult = data["listItemImportResult"] ? ListItemImportResult.fromJS(data["listItemImportResult"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessProcessDetailsDataSchemaImport {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDetailsDataSchemaImport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaImportResult"] = this.schemaImportResult ? this.schemaImportResult.toJSON() : <any>undefined;
        data["listItemImportResult"] = this.listItemImportResult ? this.listItemImportResult.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Business process detailed information regarding Schema / ListItems import operation */
export interface IBusinessProcessDetailsDataSchemaImport extends IBusinessProcessDetailsDataBase {
    /** Result information of a schema import operation */
    schemaImportResult?: ISchemaImportResult | undefined;
    /** Result information of a list item import operation */
    listItemImportResult?: IListItemImportResult | undefined;
}

/** Result information of a schema import operation */
export class SchemaImportResult implements ISchemaImportResult {
    /** Number of schemas imported */
    importedSchemaCount!: number;
    /** Number of schema skipped during import phase because they were already found in the system */
    skippedSchemaCount!: number;
    /** Total number of schemas requested to be imported */
    totalSchemaCount!: number;
    /** Ids of the schemas that were not imported because already found in the system */
    skippedSchemaIds?: string[] | undefined;
    /** Ids of the schemas that were successfully imported */
    importedSchemaIds?: string[] | undefined;

    constructor(data?: ISchemaImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.importedSchemaCount = data["importedSchemaCount"];
            this.skippedSchemaCount = data["skippedSchemaCount"];
            this.totalSchemaCount = data["totalSchemaCount"];
            if (Array.isArray(data["skippedSchemaIds"])) {
                this.skippedSchemaIds = [] as any;
                for (let item of data["skippedSchemaIds"])
                    this.skippedSchemaIds!.push(item);
            }
            if (Array.isArray(data["importedSchemaIds"])) {
                this.importedSchemaIds = [] as any;
                for (let item of data["importedSchemaIds"])
                    this.importedSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["importedSchemaCount"] = this.importedSchemaCount;
        data["skippedSchemaCount"] = this.skippedSchemaCount;
        data["totalSchemaCount"] = this.totalSchemaCount;
        if (Array.isArray(this.skippedSchemaIds)) {
            data["skippedSchemaIds"] = [];
            for (let item of this.skippedSchemaIds)
                data["skippedSchemaIds"].push(item);
        }
        if (Array.isArray(this.importedSchemaIds)) {
            data["importedSchemaIds"] = [];
            for (let item of this.importedSchemaIds)
                data["importedSchemaIds"].push(item);
        }
        return data; 
    }
}

/** Result information of a schema import operation */
export interface ISchemaImportResult {
    /** Number of schemas imported */
    importedSchemaCount: number;
    /** Number of schema skipped during import phase because they were already found in the system */
    skippedSchemaCount: number;
    /** Total number of schemas requested to be imported */
    totalSchemaCount: number;
    /** Ids of the schemas that were not imported because already found in the system */
    skippedSchemaIds?: string[] | undefined;
    /** Ids of the schemas that were successfully imported */
    importedSchemaIds?: string[] | undefined;
}

/** Result information of a list item import operation */
export class ListItemImportResult implements IListItemImportResult {
    /** Number of list items imported */
    importedListItemCount!: number;
    /** Number of list items skipped during import phase because they were already found in the system */
    skippedListItemCount!: number;
    /** Total number of list items requested to be imported */
    totalListItemCount!: number;
    /** Ids of the list items that were not imported because already found in the system */
    skippedListItemIds?: string[] | undefined;
    /** Ids of the list items that were successfully imported */
    importedListItemIds?: string[] | undefined;

    constructor(data?: IListItemImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.importedListItemCount = data["importedListItemCount"];
            this.skippedListItemCount = data["skippedListItemCount"];
            this.totalListItemCount = data["totalListItemCount"];
            if (Array.isArray(data["skippedListItemIds"])) {
                this.skippedListItemIds = [] as any;
                for (let item of data["skippedListItemIds"])
                    this.skippedListItemIds!.push(item);
            }
            if (Array.isArray(data["importedListItemIds"])) {
                this.importedListItemIds = [] as any;
                for (let item of data["importedListItemIds"])
                    this.importedListItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ListItemImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["importedListItemCount"] = this.importedListItemCount;
        data["skippedListItemCount"] = this.skippedListItemCount;
        data["totalListItemCount"] = this.totalListItemCount;
        if (Array.isArray(this.skippedListItemIds)) {
            data["skippedListItemIds"] = [];
            for (let item of this.skippedListItemIds)
                data["skippedListItemIds"].push(item);
        }
        if (Array.isArray(this.importedListItemIds)) {
            data["importedListItemIds"] = [];
            for (let item of this.importedListItemIds)
                data["importedListItemIds"].push(item);
        }
        return data; 
    }
}

/** Result information of a list item import operation */
export interface IListItemImportResult {
    /** Number of list items imported */
    importedListItemCount: number;
    /** Number of list items skipped during import phase because they were already found in the system */
    skippedListItemCount: number;
    /** Total number of list items requested to be imported */
    totalListItemCount: number;
    /** Ids of the list items that were not imported because already found in the system */
    skippedListItemIds?: string[] | undefined;
    /** Ids of the list items that were successfully imported */
    importedListItemIds?: string[] | undefined;
}

/** Business process detailed information regarding a CDN purge operation */
export class BusinessProcessDetailsDataCdnPurge extends BusinessProcessDetailsDataBase implements IBusinessProcessDetailsDataCdnPurge {
    /** Serialized CDN configuration. */
    serializedCdnConfiguration!: string;
    /** Jobs that were processed in the operation. */
    jobs!: CdnPurgeJobBase[];

    constructor(data?: IBusinessProcessDetailsDataCdnPurge) {
        super(data);
        if (!data) {
            this.jobs = [];
        }
        this._discriminator = "BusinessProcessDetailsDataCdnPurge";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.serializedCdnConfiguration = data["serializedCdnConfiguration"];
            if (Array.isArray(data["jobs"])) {
                this.jobs = [] as any;
                for (let item of data["jobs"])
                    this.jobs!.push(CdnPurgeJobBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessProcessDetailsDataCdnPurge {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDetailsDataCdnPurge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serializedCdnConfiguration"] = this.serializedCdnConfiguration;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Business process detailed information regarding a CDN purge operation */
export interface IBusinessProcessDetailsDataCdnPurge extends IBusinessProcessDetailsDataBase {
    /** Serialized CDN configuration. */
    serializedCdnConfiguration: string;
    /** Jobs that were processed in the operation. */
    jobs: CdnPurgeJobBase[];
}

/** Base class for a CDN purge job */
export class CdnPurgeJobBase implements ICdnPurgeJobBase {
    /** Indicates if the operation was performed successfully. */
    success!: boolean;
    /** Number of retries left until the operation is considered as failed. */
    retriesLeft!: number;

    protected _discriminator: string;

    constructor(data?: ICdnPurgeJobBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "CdnPurgeJobBase";
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.retriesLeft = data["retriesLeft"];
        }
    }

    static fromJS(data: any): CdnPurgeJobBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "CdnPurgeJobByTag") {
            let result = new CdnPurgeJobByTag();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CdnPurgeJobByUri") {
            let result = new CdnPurgeJobByUri();
            result.init(data);
            return result;
        }
        let result = new CdnPurgeJobBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["success"] = this.success;
        data["retriesLeft"] = this.retriesLeft;
        return data; 
    }
}

/** Base class for a CDN purge job */
export interface ICdnPurgeJobBase {
    /** Indicates if the operation was performed successfully. */
    success: boolean;
    /** Number of retries left until the operation is considered as failed. */
    retriesLeft: number;
}

/** Represents a CDN purge by tag (e.g. share ID) */
export class CdnPurgeJobByTag extends CdnPurgeJobBase implements ICdnPurgeJobByTag {
    /** The tag that should be purged. */
    tag!: string;

    constructor(data?: ICdnPurgeJobByTag) {
        super(data);
        this._discriminator = "CdnPurgeJobByTag";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.tag = data["tag"];
        }
    }

    static fromJS(data: any): CdnPurgeJobByTag {
        data = typeof data === 'object' ? data : {};
        let result = new CdnPurgeJobByTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        super.toJSON(data);
        return data; 
    }
}

/** Represents a CDN purge by tag (e.g. share ID) */
export interface ICdnPurgeJobByTag extends ICdnPurgeJobBase {
    /** The tag that should be purged. */
    tag: string;
}

export class CdnPurgeJobByUri extends CdnPurgeJobBase implements ICdnPurgeJobByUri {
    uri?: string | undefined;

    constructor(data?: ICdnPurgeJobByUri) {
        super(data);
        this._discriminator = "CdnPurgeJobByUri";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.uri = data["uri"];
        }
    }

    static fromJS(data: any): CdnPurgeJobByUri {
        data = typeof data === 'object' ? data : {};
        let result = new CdnPurgeJobByUri();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uri"] = this.uri;
        super.toJSON(data);
        return data; 
    }
}

export interface ICdnPurgeJobByUri extends ICdnPurgeJobBase {
    uri?: string | undefined;
}

/** Business process detailed information regarding Content import */
export class BusinessProcessDetailsDataContentImport extends BusinessProcessDetailsDataBase implements IBusinessProcessDetailsDataContentImport {
    /** Items that were imported. */
    items?: ContentImportResult[] | undefined;

    constructor(data?: IBusinessProcessDetailsDataContentImport) {
        super(data);
        if (data) {
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new ContentImportResult(item) : <ContentImportResult>item;
                }
            }
        }
        this._discriminator = "BusinessProcessDetailsDataContentImport";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentImportResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessProcessDetailsDataContentImport {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessDetailsDataContentImport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Business process detailed information regarding Content import */
export interface IBusinessProcessDetailsDataContentImport extends IBusinessProcessDetailsDataBase {
    /** Items that were imported. */
    items?: IContentImportResult[] | undefined;
}

/** Represents an item imported during a content import */
export class ContentImportResult implements IContentImportResult {
    /** ID of the file transfer. */
    fileTransferId!: string;
    /** ID of the resulting content. */
    contentId?: string | undefined;
    /** State of the item. */
    state?: string | undefined;
    /** Indicates if the operation succeeded. */
    succeeded!: boolean;
    /** If the operation did not succeeded, this contains error related information. */
    error?: ErrorResponse | undefined;

    constructor(data?: IContentImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.error = data.error && !(<any>data.error).toJSON ? new ErrorResponse(data.error) : <ErrorResponse>this.error; 
        }
    }

    init(data?: any) {
        if (data) {
            this.fileTransferId = data["fileTransferId"];
            this.contentId = data["contentId"];
            this.state = data["state"];
            this.succeeded = data["succeeded"];
            this.error = data["error"] ? ErrorResponse.fromJS(data["error"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContentImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ContentImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileTransferId"] = this.fileTransferId;
        data["contentId"] = this.contentId;
        data["state"] = this.state;
        data["succeeded"] = this.succeeded;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        return data; 
    }
}

/** Represents an item imported during a content import */
export interface IContentImportResult {
    /** ID of the file transfer. */
    fileTransferId: string;
    /** ID of the resulting content. */
    contentId?: string | undefined;
    /** State of the item. */
    state?: string | undefined;
    /** Indicates if the operation succeeded. */
    succeeded: boolean;
    /** If the operation did not succeeded, this contains error related information. */
    error?: IErrorResponse | undefined;
}

/** Create request to create a BusinessProcess. */
export class BusinessProcessCreateRequest implements IBusinessProcessCreateRequest {
    /** Indicates if the system starting the business process supports cancellation. */
    supportsCancellation!: boolean;
    /** Notification data to send to the user when creating the business process.
Set to null to not create a notification. */
    notification?: BusinessProcessNotificationUpdate | undefined;
    /** Initial state of the business process. */
    initialState!: string;

    constructor(data?: IBusinessProcessCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.notification = data.notification && !(<any>data.notification).toJSON ? new BusinessProcessNotificationUpdate(data.notification) : <BusinessProcessNotificationUpdate>this.notification; 
        }
    }

    init(data?: any) {
        if (data) {
            this.supportsCancellation = data["supportsCancellation"];
            this.notification = data["notification"] ? BusinessProcessNotificationUpdate.fromJS(data["notification"]) : <any>undefined;
            this.initialState = data["initialState"];
        }
    }

    static fromJS(data: any): BusinessProcessCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supportsCancellation"] = this.supportsCancellation;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["initialState"] = this.initialState;
        return data; 
    }
}

/** Create request to create a BusinessProcess. */
export interface IBusinessProcessCreateRequest {
    /** Indicates if the system starting the business process supports cancellation. */
    supportsCancellation: boolean;
    /** Notification data to send to the user when creating the business process.
Set to null to not create a notification. */
    notification?: IBusinessProcessNotificationUpdate | undefined;
    /** Initial state of the business process. */
    initialState: string;
}

/** Notification update for a business process. */
export class BusinessProcessNotificationUpdate implements IBusinessProcessNotificationUpdate {
    /** The title the message that is shown to the user should have. */
    title!: TranslatedStringDictionary;
    /** The message shown to the user. */
    message!: TranslatedStringDictionary;
    /** An optional navigation link that allows the user to jump to a page giving more information
about the process. */
    navigationLink?: string | undefined;
    /** The event type of the notification. */
    eventType!: NotificationEventType;

    constructor(data?: IBusinessProcessNotificationUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.title = data.title && !(<any>data.title).toJSON ? new TranslatedStringDictionary(data.title) : <TranslatedStringDictionary>this.title; 
            this.message = data.message && !(<any>data.message).toJSON ? new TranslatedStringDictionary(data.message) : <TranslatedStringDictionary>this.message; 
        }
        if (!data) {
            this.title = new TranslatedStringDictionary();
            this.message = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] ? TranslatedStringDictionary.fromJS(data["title"]) : new TranslatedStringDictionary();
            this.message = data["message"] ? TranslatedStringDictionary.fromJS(data["message"]) : new TranslatedStringDictionary();
            this.navigationLink = data["navigationLink"];
            this.eventType = data["eventType"];
        }
    }

    static fromJS(data: any): BusinessProcessNotificationUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessNotificationUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        data["message"] = this.message ? this.message.toJSON() : <any>undefined;
        data["navigationLink"] = this.navigationLink;
        data["eventType"] = this.eventType;
        return data; 
    }
}

/** Notification update for a business process. */
export interface IBusinessProcessNotificationUpdate {
    /** The title the message that is shown to the user should have. */
    title: ITranslatedStringDictionary;
    /** The message shown to the user. */
    message: ITranslatedStringDictionary;
    /** An optional navigation link that allows the user to jump to a page giving more information
about the process. */
    navigationLink?: string | undefined;
    /** The event type of the notification. */
    eventType: NotificationEventType;
}

export enum NotificationEventType {
    Pending = "Pending",
    InProgress = "InProgress",
    Success = "Success",
    Error = "Error",
    Warning = "Warning",
    Information = "Information",
}

/** Transitions the business process to a new state and/or life cycle. */
export class BusinessProcessStateChangeRequest implements IBusinessProcessStateChangeRequest {
    /** The new state of the business process. */
    state!: string;
    /** The new life cycle of the business process. */
    lifeCycle!: BusinessProcessLifeCycle;
    /** An optional notification update to be posted together with the transition. */
    notification?: BusinessProcessNotificationUpdate | undefined;

    constructor(data?: IBusinessProcessStateChangeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.notification = data.notification && !(<any>data.notification).toJSON ? new BusinessProcessNotificationUpdate(data.notification) : <BusinessProcessNotificationUpdate>this.notification; 
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.lifeCycle = data["lifeCycle"];
            this.notification = data["notification"] ? BusinessProcessNotificationUpdate.fromJS(data["notification"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessProcessStateChangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessStateChangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["lifeCycle"] = this.lifeCycle;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        return data; 
    }
}

/** Transitions the business process to a new state and/or life cycle. */
export interface IBusinessProcessStateChangeRequest {
    /** The new state of the business process. */
    state: string;
    /** The new life cycle of the business process. */
    lifeCycle: BusinessProcessLifeCycle;
    /** An optional notification update to be posted together with the transition. */
    notification?: IBusinessProcessNotificationUpdate | undefined;
}

/** Updates the notification of a business process without changing the state or the life cycle. */
export class BusinessProcessNotificationUpdateRequest extends BusinessProcessNotificationUpdate implements IBusinessProcessNotificationUpdateRequest {

    constructor(data?: IBusinessProcessNotificationUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): BusinessProcessNotificationUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessNotificationUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Updates the notification of a business process without changing the state or the life cycle. */
export interface IBusinessProcessNotificationUpdateRequest extends IBusinessProcessNotificationUpdate {
}

/** Represents the business rule configuration. */
export class BusinessRuleConfiguration implements IBusinessRuleConfiguration {
    /** Disables the rule completely. */
    disableRuleEngine!: boolean;
    /** Rules */
    rules?: BusinessRule[] | undefined;
    /** Named caches. */
    caches?: NamedCacheConfigurationBase[] | undefined;

    constructor(data?: IBusinessRuleConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.disableRuleEngine = data["disableRuleEngine"];
            if (Array.isArray(data["rules"])) {
                this.rules = [] as any;
                for (let item of data["rules"])
                    this.rules!.push(BusinessRule.fromJS(item));
            }
            if (Array.isArray(data["caches"])) {
                this.caches = [] as any;
                for (let item of data["caches"])
                    this.caches!.push(NamedCacheConfigurationBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["disableRuleEngine"] = this.disableRuleEngine;
        if (Array.isArray(this.rules)) {
            data["rules"] = [];
            for (let item of this.rules)
                data["rules"].push(item.toJSON());
        }
        if (Array.isArray(this.caches)) {
            data["caches"] = [];
            for (let item of this.caches)
                data["caches"].push(item.toJSON());
        }
        return data; 
    }
}

/** Represents the business rule configuration. */
export interface IBusinessRuleConfiguration {
    /** Disables the rule completely. */
    disableRuleEngine: boolean;
    /** Rules */
    rules?: BusinessRule[] | undefined;
    /** Named caches. */
    caches?: NamedCacheConfigurationBase[] | undefined;
}

/** A business rule */
export abstract class BusinessRule implements IBusinessRule {
    /** User defined ID of the rule. */
    id?: string | undefined;
    /** Trigger point. */
    triggerPoint?: BusinessRuleTriggerPoint | undefined;
    /** Enable. */
    isEnabled!: boolean;
    /** Language specific rule names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific rule description. */
    description?: TranslatedStringDictionary | undefined;

    protected _discriminator: string;

    constructor(data?: IBusinessRule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.triggerPoint = data.triggerPoint && !(<any>data.triggerPoint).toJSON ? new BusinessRuleTriggerPoint(data.triggerPoint) : <BusinessRuleTriggerPoint>this.triggerPoint; 
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.description = data.description && !(<any>data.description).toJSON ? new TranslatedStringDictionary(data.description) : <TranslatedStringDictionary>this.description; 
        }
        this._discriminator = "BusinessRule";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.triggerPoint = data["triggerPoint"] ? BusinessRuleTriggerPoint.fromJS(data["triggerPoint"]) : <any>undefined;
            this.isEnabled = data["isEnabled"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.description = data["description"] ? TranslatedStringDictionary.fromJS(data["description"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BusinessRule {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "BusinessRuleConfigurable") {
            let result = new BusinessRuleConfigurable();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleScript") {
            let result = new BusinessRuleScript();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BusinessRule' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["triggerPoint"] = this.triggerPoint ? this.triggerPoint.toJSON() : <any>undefined;
        data["isEnabled"] = this.isEnabled;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        return data; 
    }
}

/** A business rule */
export interface IBusinessRule {
    /** User defined ID of the rule. */
    id?: string | undefined;
    /** Trigger point. */
    triggerPoint?: IBusinessRuleTriggerPoint | undefined;
    /** Enable. */
    isEnabled: boolean;
    /** Language specific rule names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific rule description. */
    description?: ITranslatedStringDictionary | undefined;
}

/** Represents a trigger point for a business rule */
export class BusinessRuleTriggerPoint implements IBusinessRuleTriggerPoint {
    /** Execution scope. */
    executionScope!: BusinessRuleExecutionScope;
    /** Document type. */
    documentType!: BusinessRuleTriggerDocType;
    /** Action performed. */
    action!: BusinessRuleTriggerAction;

    constructor(data?: IBusinessRuleTriggerPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.executionScope = data["executionScope"];
            this.documentType = data["documentType"];
            this.action = data["action"];
        }
    }

    static fromJS(data: any): BusinessRuleTriggerPoint {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleTriggerPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["executionScope"] = this.executionScope;
        data["documentType"] = this.documentType;
        data["action"] = this.action;
        return data; 
    }
}

/** Represents a trigger point for a business rule */
export interface IBusinessRuleTriggerPoint {
    /** Execution scope. */
    executionScope: BusinessRuleExecutionScope;
    /** Document type. */
    documentType: BusinessRuleTriggerDocType;
    /** Action performed. */
    action: BusinessRuleTriggerAction;
}

/** A business rule configurable by specific actions and conditions */
export class BusinessRuleConfigurable extends BusinessRule implements IBusinessRuleConfigurable {
    /** The condition that makes this rule trigger. */
    condition?: BusinessRuleCondition | undefined;
    /** Optional transformations to apply. */
    transformationGroups?: BusinessRuleTransformationGroup[] | undefined;
    /** The actions that are performed when this rule triggers. */
    actions?: BusinessRuleAction[] | undefined;

    constructor(data?: IBusinessRuleConfigurable) {
        super(data);
        if (data) {
            if (data.transformationGroups) {
                this.transformationGroups = [];
                for (let i = 0; i < data.transformationGroups.length; i++) {
                    let item = data.transformationGroups[i];
                    this.transformationGroups[i] = item && !(<any>item).toJSON ? new BusinessRuleTransformationGroup(item) : <BusinessRuleTransformationGroup>item;
                }
            }
        }
        this._discriminator = "BusinessRuleConfigurable";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.condition = data["condition"] ? BusinessRuleCondition.fromJS(data["condition"]) : <any>undefined;
            if (Array.isArray(data["transformationGroups"])) {
                this.transformationGroups = [] as any;
                for (let item of data["transformationGroups"])
                    this.transformationGroups!.push(BusinessRuleTransformationGroup.fromJS(item));
            }
            if (Array.isArray(data["actions"])) {
                this.actions = [] as any;
                for (let item of data["actions"])
                    this.actions!.push(BusinessRuleAction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleConfigurable {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConfigurable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["condition"] = this.condition ? this.condition.toJSON() : <any>undefined;
        if (Array.isArray(this.transformationGroups)) {
            data["transformationGroups"] = [];
            for (let item of this.transformationGroups)
                data["transformationGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** A business rule configurable by specific actions and conditions */
export interface IBusinessRuleConfigurable extends IBusinessRule {
    /** The condition that makes this rule trigger. */
    condition?: BusinessRuleCondition | undefined;
    /** Optional transformations to apply. */
    transformationGroups?: IBusinessRuleTransformationGroup[] | undefined;
    /** The actions that are performed when this rule triggers. */
    actions?: BusinessRuleAction[] | undefined;
}

/** Conditions on which a business rule is executed */
export abstract class BusinessRuleCondition implements IBusinessRuleCondition {

    protected _discriminator: string;

    constructor(data?: IBusinessRuleCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "BusinessRuleCondition";
    }

    init(data?: any) {
    }

    static fromJS(data: any): BusinessRuleCondition {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "BooleanCondition") {
            throw new Error("The abstract class 'BooleanCondition' cannot be instantiated.");
        }
        if (data["kind"] === "AndCondition") {
            let result = new AndCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OrCondition") {
            let result = new OrCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerAssignedCondition") {
            let result = new LayerAssignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayerUnassignedCondition") {
            let result = new LayerUnassignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionSetAssignedCondition") {
            let result = new ContentPermissionSetAssignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionSetUnassignedCondition") {
            let result = new ContentPermissionSetUnassignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldValueChangedCondition") {
            let result = new FieldValueChangedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MatchRegexCondition") {
            let result = new MatchRegexCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TagboxItemAssignedCondition") {
            let result = new TagboxItemAssignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TagboxItemUnassignedCondition") {
            let result = new TagboxItemUnassignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentSchemaCondition") {
            let result = new ContentSchemaCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NumberCompareCondition") {
            let result = new NumberCompareCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentRelationItemAssignedCondition") {
            let result = new ContentRelationItemAssignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentRelationItemUnassignedCondition") {
            let result = new ContentRelationItemUnassignedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "GeoPointWithinPolygonCondition") {
            let result = new GeoPointWithinPolygonCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentPermissionSetsChangedCondition") {
            let result = new ContentPermissionSetsChangedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentRelationItemsChangedCondition") {
            let result = new ContentRelationItemsChangedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LayersChangedCondition") {
            let result = new LayersChangedCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TagboxItemsChangedCondition") {
            let result = new TagboxItemsChangedCondition();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BusinessRuleCondition' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** Conditions on which a business rule is executed */
export interface IBusinessRuleCondition {
}

/** Links multiple conditions with a boolean operator */
export abstract class BooleanCondition extends BusinessRuleCondition implements IBooleanCondition {
    /** The conditions. */
    conditions?: BusinessRuleCondition[] | undefined;

    constructor(data?: IBooleanCondition) {
        super(data);
        this._discriminator = "BooleanCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["conditions"])) {
                this.conditions = [] as any;
                for (let item of data["conditions"])
                    this.conditions!.push(BusinessRuleCondition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooleanCondition {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AndCondition") {
            let result = new AndCondition();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OrCondition") {
            let result = new OrCondition();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BooleanCondition' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditions)) {
            data["conditions"] = [];
            for (let item of this.conditions)
                data["conditions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Links multiple conditions with a boolean operator */
export interface IBooleanCondition extends IBusinessRuleCondition {
    /** The conditions. */
    conditions?: BusinessRuleCondition[] | undefined;
}

/** Links conditions with AND */
export class AndCondition extends BooleanCondition implements IAndCondition {

    constructor(data?: IAndCondition) {
        super(data);
        this._discriminator = "AndCondition";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AndCondition {
        data = typeof data === 'object' ? data : {};
        let result = new AndCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Links conditions with AND */
export interface IAndCondition extends IBooleanCondition {
}

/** Links conditions with OR */
export class OrCondition extends BooleanCondition implements IOrCondition {

    constructor(data?: IOrCondition) {
        super(data);
        this._discriminator = "OrCondition";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OrCondition {
        data = typeof data === 'object' ? data : {};
        let result = new OrCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Links conditions with OR */
export interface IOrCondition extends IBooleanCondition {
}

/** Matches when a layer was assigned */
export class LayerAssignedCondition extends BusinessRuleCondition implements ILayerAssignedCondition {
    /** Layer id to match on. */
    layerId?: string | undefined;

    constructor(data?: ILayerAssignedCondition) {
        super(data);
        this._discriminator = "LayerAssignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.layerId = data["layerId"];
        }
    }

    static fromJS(data: any): LayerAssignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new LayerAssignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layerId"] = this.layerId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a layer was assigned */
export interface ILayerAssignedCondition extends IBusinessRuleCondition {
    /** Layer id to match on. */
    layerId?: string | undefined;
}

/** Matches when a layer was unassigned */
export class LayerUnassignedCondition extends BusinessRuleCondition implements ILayerUnassignedCondition {
    /** Layer id to match on. */
    layerId?: string | undefined;

    constructor(data?: ILayerUnassignedCondition) {
        super(data);
        this._discriminator = "LayerUnassignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.layerId = data["layerId"];
        }
    }

    static fromJS(data: any): LayerUnassignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new LayerUnassignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layerId"] = this.layerId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a layer was unassigned */
export interface ILayerUnassignedCondition extends IBusinessRuleCondition {
    /** Layer id to match on. */
    layerId?: string | undefined;
}

/** Matches when a permission set was assigned */
export class ContentPermissionSetAssignedCondition extends BusinessRuleCondition implements IContentPermissionSetAssignedCondition {
    /** Permission set id to match on. */
    permissionSetId?: string | undefined;

    constructor(data?: IContentPermissionSetAssignedCondition) {
        super(data);
        this._discriminator = "ContentPermissionSetAssignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): ContentPermissionSetAssignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetAssignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a permission set was assigned */
export interface IContentPermissionSetAssignedCondition extends IBusinessRuleCondition {
    /** Permission set id to match on. */
    permissionSetId?: string | undefined;
}

/** Matches when a permission set was unassigned */
export class ContentPermissionSetUnassignedCondition extends BusinessRuleCondition implements IContentPermissionSetUnassignedCondition {
    /** Permission set id to match on. */
    permissionSetId?: string | undefined;

    constructor(data?: IContentPermissionSetUnassignedCondition) {
        super(data);
        this._discriminator = "ContentPermissionSetUnassignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): ContentPermissionSetUnassignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetUnassignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a permission set was unassigned */
export interface IContentPermissionSetUnassignedCondition extends IBusinessRuleCondition {
    /** Permission set id to match on. */
    permissionSetId?: string | undefined;
}

/** Matches when a field matching the field path string (JSON path) changes to the expected value. */
export class FieldValueChangedCondition extends BusinessRuleCondition implements IFieldValueChangedCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Expected value for the field to have to satisfy the condition */
    expectedValue?: any | undefined;

    constructor(data?: IFieldValueChangedCondition) {
        super(data);
        this._discriminator = "FieldValueChangedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.expectedValue = data["expectedValue"];
        }
    }

    static fromJS(data: any): FieldValueChangedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new FieldValueChangedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["expectedValue"] = this.expectedValue;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a field matching the field path string (JSON path) changes to the expected value. */
export interface IFieldValueChangedCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Expected value for the field to have to satisfy the condition */
    expectedValue?: any | undefined;
}

/** Matches when a field matching the field path string (JSON Path) changes and matches the given regular expression. */
export class MatchRegexCondition extends BusinessRuleCondition implements IMatchRegexCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Regular expression */
    regex?: string | undefined;
    /** Optional variable name to store the matched regex groups in */
    storeIn?: string | undefined;

    constructor(data?: IMatchRegexCondition) {
        super(data);
        this._discriminator = "MatchRegexCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.regex = data["regex"];
            this.storeIn = data["storeIn"];
        }
    }

    static fromJS(data: any): MatchRegexCondition {
        data = typeof data === 'object' ? data : {};
        let result = new MatchRegexCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["regex"] = this.regex;
        data["storeIn"] = this.storeIn;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a field matching the field path string (JSON Path) changes and matches the given regular expression. */
export interface IMatchRegexCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Regular expression */
    regex?: string | undefined;
    /** Optional variable name to store the matched regex groups in */
    storeIn?: string | undefined;
}

/** Matches when a tag in a tagbox matching the field path string (JSON path) is newly assigned. */
export class TagboxItemAssignedCondition extends BusinessRuleCondition implements ITagboxItemAssignedCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Ref Id of the list item that was assigned in the tagbox */
    refId?: string | undefined;

    constructor(data?: ITagboxItemAssignedCondition) {
        super(data);
        this._discriminator = "TagboxItemAssignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.refId = data["refId"];
        }
    }

    static fromJS(data: any): TagboxItemAssignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new TagboxItemAssignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["refId"] = this.refId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a tag in a tagbox matching the field path string (JSON path) is newly assigned. */
export interface ITagboxItemAssignedCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Ref Id of the list item that was assigned in the tagbox */
    refId?: string | undefined;
}

/** Matches when a tag in a tagbox matching the field path string (JSON path) is removed. */
export class TagboxItemUnassignedCondition extends BusinessRuleCondition implements ITagboxItemUnassignedCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Ref Id of the list item that was unassigned from the tagbox */
    refId?: string | undefined;

    constructor(data?: ITagboxItemUnassignedCondition) {
        super(data);
        this._discriminator = "TagboxItemUnassignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.refId = data["refId"];
        }
    }

    static fromJS(data: any): TagboxItemUnassignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new TagboxItemUnassignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["refId"] = this.refId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a tag in a tagbox matching the field path string (JSON path) is removed. */
export interface ITagboxItemUnassignedCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** Ref Id of the list item that was unassigned from the tagbox */
    refId?: string | undefined;
}

/** Matches when the content schema of a metadata item equals the one set in the condition. */
export class ContentSchemaCondition extends BusinessRuleCondition implements IContentSchemaCondition {
    /** Content schema id to match on. */
    schemaId?: string | undefined;

    constructor(data?: IContentSchemaCondition) {
        super(data);
        this._discriminator = "ContentSchemaCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): ContentSchemaCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentSchemaCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when the content schema of a metadata item equals the one set in the condition. */
export interface IContentSchemaCondition extends IBusinessRuleCondition {
    /** Content schema id to match on. */
    schemaId?: string | undefined;
}

export class NumberCompareCondition extends BusinessRuleCondition implements INumberCompareCondition {
    /** JSON path to the field. */
    fieldPath?: string | undefined;
    /** Mode to use for comparison. */
    mode!: BusinessRuleNumberCompareConditionMode;
    /** Value to compare to. */
    value!: number;

    constructor(data?: INumberCompareCondition) {
        super(data);
        this._discriminator = "NumberCompareCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.mode = data["mode"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NumberCompareCondition {
        data = typeof data === 'object' ? data : {};
        let result = new NumberCompareCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["mode"] = this.mode;
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface INumberCompareCondition extends IBusinessRuleCondition {
    /** JSON path to the field. */
    fieldPath?: string | undefined;
    /** Mode to use for comparison. */
    mode: BusinessRuleNumberCompareConditionMode;
    /** Value to compare to. */
    value: number;
}

export enum BusinessRuleNumberCompareConditionMode {
    LessThan = "LessThan",
    LessThanEqual = "LessThanEqual",
    Equal = "Equal",
    GreaterThanEqual = "GreaterThanEqual",
    GreaterThan = "GreaterThan",
}

/** Matches when a relationship entry in a relationship field matching the field path string (JSON path) is newly assigned. */
export class ContentRelationItemAssignedCondition extends BusinessRuleCondition implements IContentRelationItemAssignedCondition {
    /** Content id that should be matched against. */
    contentId?: string | undefined;
    /** JSON path to the field */
    fieldPath?: string | undefined;

    constructor(data?: IContentRelationItemAssignedCondition) {
        super(data);
        this._discriminator = "ContentRelationItemAssignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): ContentRelationItemAssignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRelationItemAssignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a relationship entry in a relationship field matching the field path string (JSON path) is newly assigned. */
export interface IContentRelationItemAssignedCondition extends IBusinessRuleCondition {
    /** Content id that should be matched against. */
    contentId?: string | undefined;
    /** JSON path to the field */
    fieldPath?: string | undefined;
}

/** Matches when a relationship entry in a relationship field matching the field path string (JSON path) is removed. */
export class ContentRelationItemUnassignedCondition extends BusinessRuleCondition implements IContentRelationItemUnassignedCondition {
    /** Content id that should be matched against. */
    contentId?: string | undefined;
    /** JSON path to the field */
    fieldPath?: string | undefined;

    constructor(data?: IContentRelationItemUnassignedCondition) {
        super(data);
        this._discriminator = "ContentRelationItemUnassignedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): ContentRelationItemUnassignedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRelationItemUnassignedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

/** Matches when a relationship entry in a relationship field matching the field path string (JSON path) is removed. */
export interface IContentRelationItemUnassignedCondition extends IBusinessRuleCondition {
    /** Content id that should be matched against. */
    contentId?: string | undefined;
    /** JSON path to the field */
    fieldPath?: string | undefined;
}

/** Matches when the geo point from the field specified by the field path is inside the specified polygon. */
export class GeoPointWithinPolygonCondition extends BusinessRuleCondition implements IGeoPointWithinPolygonCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** List of points that form the polygon for the geo fence.
Must include at least 3 points. */
    polygon?: LatLon[] | undefined;

    constructor(data?: IGeoPointWithinPolygonCondition) {
        super(data);
        if (data) {
            if (data.polygon) {
                this.polygon = [];
                for (let i = 0; i < data.polygon.length; i++) {
                    let item = data.polygon[i];
                    this.polygon[i] = item && !(<any>item).toJSON ? new LatLon(item) : <LatLon>item;
                }
            }
        }
        this._discriminator = "GeoPointWithinPolygonCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            if (Array.isArray(data["polygon"])) {
                this.polygon = [] as any;
                for (let item of data["polygon"])
                    this.polygon!.push(LatLon.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GeoPointWithinPolygonCondition {
        data = typeof data === 'object' ? data : {};
        let result = new GeoPointWithinPolygonCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        if (Array.isArray(this.polygon)) {
            data["polygon"] = [];
            for (let item of this.polygon)
                data["polygon"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Matches when the geo point from the field specified by the field path is inside the specified polygon. */
export interface IGeoPointWithinPolygonCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
    /** List of points that form the polygon for the geo fence.
Must include at least 3 points. */
    polygon?: ILatLon[] | undefined;
}

/** Stores a coordinate */
export class LatLon implements ILatLon {
    /** Latitude */
    lat!: number;
    /** Longitude */
    lon!: number;

    constructor(data?: ILatLon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lon = data["lon"];
        }
    }

    static fromJS(data: any): LatLon {
        data = typeof data === 'object' ? data : {};
        let result = new LatLon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lon"] = this.lon;
        return data; 
    }
}

/** Stores a coordinate */
export interface ILatLon {
    /** Latitude */
    lat: number;
    /** Longitude */
    lon: number;
}

/** Matches whenever the assigned content permission sets changed. */
export class ContentPermissionSetsChangedCondition extends BusinessRuleCondition implements IContentPermissionSetsChangedCondition {

    constructor(data?: IContentPermissionSetsChangedCondition) {
        super(data);
        this._discriminator = "ContentPermissionSetsChangedCondition";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentPermissionSetsChangedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetsChangedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Matches whenever the assigned content permission sets changed. */
export interface IContentPermissionSetsChangedCondition extends IBusinessRuleCondition {
}

/** Matches whenever the assigned content(s) in a relationship field changed. */
export class ContentRelationItemsChangedCondition extends BusinessRuleCondition implements IContentRelationItemsChangedCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;

    constructor(data?: IContentRelationItemsChangedCondition) {
        super(data);
        this._discriminator = "ContentRelationItemsChangedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): ContentRelationItemsChangedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRelationItemsChangedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

/** Matches whenever the assigned content(s) in a relationship field changed. */
export interface IContentRelationItemsChangedCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
}

/** Matches whenever the assigned layers of a content changed. */
export class LayersChangedCondition extends BusinessRuleCondition implements ILayersChangedCondition {

    constructor(data?: ILayersChangedCondition) {
        super(data);
        this._discriminator = "LayersChangedCondition";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): LayersChangedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new LayersChangedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Matches whenever the assigned layers of a content changed. */
export interface ILayersChangedCondition extends IBusinessRuleCondition {
}

/** Matches whenever the assigned item(s) in a tagbox changed. */
export class TagboxItemsChangedCondition extends BusinessRuleCondition implements ITagboxItemsChangedCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;

    constructor(data?: ITagboxItemsChangedCondition) {
        super(data);
        this._discriminator = "TagboxItemsChangedCondition";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): TagboxItemsChangedCondition {
        data = typeof data === 'object' ? data : {};
        let result = new TagboxItemsChangedCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

/** Matches whenever the assigned item(s) in a tagbox changed. */
export interface ITagboxItemsChangedCondition extends IBusinessRuleCondition {
    /** JSON path to the field */
    fieldPath?: string | undefined;
}

/** Business rule transformation group: A group of transformations to run for the specified inputs */
export class BusinessRuleTransformationGroup implements IBusinessRuleTransformationGroup {
    /** The inputs of the transformation group. */
    inputs?: string[] | undefined;
    /** A list of transformations to apply. */
    transformations?: BusinessRuleTransformation[] | undefined;
    /** Variable name where the final result should be stored in. */
    storeIn?: string | undefined;

    constructor(data?: IBusinessRuleTransformationGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["inputs"])) {
                this.inputs = [] as any;
                for (let item of data["inputs"])
                    this.inputs!.push(item);
            }
            if (Array.isArray(data["transformations"])) {
                this.transformations = [] as any;
                for (let item of data["transformations"])
                    this.transformations!.push(BusinessRuleTransformation.fromJS(item));
            }
            this.storeIn = data["storeIn"];
        }
    }

    static fromJS(data: any): BusinessRuleTransformationGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleTransformationGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.inputs)) {
            data["inputs"] = [];
            for (let item of this.inputs)
                data["inputs"].push(item);
        }
        if (Array.isArray(this.transformations)) {
            data["transformations"] = [];
            for (let item of this.transformations)
                data["transformations"].push(item.toJSON());
        }
        data["storeIn"] = this.storeIn;
        return data; 
    }
}

/** Business rule transformation group: A group of transformations to run for the specified inputs */
export interface IBusinessRuleTransformationGroup {
    /** The inputs of the transformation group. */
    inputs?: string[] | undefined;
    /** A list of transformations to apply. */
    transformations?: BusinessRuleTransformation[] | undefined;
    /** Variable name where the final result should be stored in. */
    storeIn?: string | undefined;
}

/** Business rule transformation */
export abstract class BusinessRuleTransformation implements IBusinessRuleTransformation {

    protected _discriminator: string;

    constructor(data?: IBusinessRuleTransformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "BusinessRuleTransformation";
    }

    init(data?: any) {
    }

    static fromJS(data: any): BusinessRuleTransformation {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "TakeDictionaryValueTransformation") {
            let result = new TakeDictionaryValueTransformation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TakeArrayValueTransformation") {
            let result = new TakeArrayValueTransformation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "JoinByTransformation") {
            let result = new JoinByTransformation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LookupCacheTransformation") {
            let result = new LookupCacheTransformation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NGramTransformation") {
            let result = new NGramTransformation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ProjectionTransformation") {
            let result = new ProjectionTransformation();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BusinessRuleTransformation' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** Business rule transformation */
export interface IBusinessRuleTransformation {
}

/** Takes an item from a dictionary by its key. */
export class TakeDictionaryValueTransformation extends BusinessRuleTransformation implements ITakeDictionaryValueTransformation {
    /** Key of the item. */
    key?: string | undefined;

    constructor(data?: ITakeDictionaryValueTransformation) {
        super(data);
        this._discriminator = "TakeDictionaryValueTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"];
        }
    }

    static fromJS(data: any): TakeDictionaryValueTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new TakeDictionaryValueTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        super.toJSON(data);
        return data; 
    }
}

/** Takes an item from a dictionary by its key. */
export interface ITakeDictionaryValueTransformation extends IBusinessRuleTransformation {
    /** Key of the item. */
    key?: string | undefined;
}

/** Takes an item from an array by its index. */
export class TakeArrayValueTransformation extends BusinessRuleTransformation implements ITakeArrayValueTransformation {
    /** Index of the item. */
    index?: string | undefined;

    constructor(data?: ITakeArrayValueTransformation) {
        super(data);
        this._discriminator = "TakeArrayValueTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.index = data["index"];
        }
    }

    static fromJS(data: any): TakeArrayValueTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new TakeArrayValueTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        super.toJSON(data);
        return data; 
    }
}

/** Takes an item from an array by its index. */
export interface ITakeArrayValueTransformation extends IBusinessRuleTransformation {
    /** Index of the item. */
    index?: string | undefined;
}

/** Joins the input by a configurable separator */
export class JoinByTransformation extends BusinessRuleTransformation implements IJoinByTransformation {
    /** Separator to use. */
    separator?: string | undefined;

    constructor(data?: IJoinByTransformation) {
        super(data);
        this._discriminator = "JoinByTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.separator = data["separator"];
        }
    }

    static fromJS(data: any): JoinByTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new JoinByTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["separator"] = this.separator;
        super.toJSON(data);
        return data; 
    }
}

/** Joins the input by a configurable separator */
export interface IJoinByTransformation extends IBusinessRuleTransformation {
    /** Separator to use. */
    separator?: string | undefined;
}

/** Uses a named cache to lookup a value. */
export class LookupCacheTransformation extends BusinessRuleTransformation implements ILookupCacheTransformation {
    /** Name of the cache to use. */
    namedCache?: string | undefined;

    constructor(data?: ILookupCacheTransformation) {
        super(data);
        this._discriminator = "LookupCacheTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.namedCache = data["namedCache"];
        }
    }

    static fromJS(data: any): LookupCacheTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new LookupCacheTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["namedCache"] = this.namedCache;
        super.toJSON(data);
        return data; 
    }
}

/** Uses a named cache to lookup a value. */
export interface ILookupCacheTransformation extends IBusinessRuleTransformation {
    /** Name of the cache to use. */
    namedCache?: string | undefined;
}

/** Produces N-grams based on splitting a text on whitespace characters. Removes punctuation as well. */
export class NGramTransformation extends BusinessRuleTransformation implements INGramTransformation {
    /** Maximum size of n-grams to produce.
Settings this to 3 will produce unigrams, bigrams, trigrams. */
    size!: number;
    /** Minimum length of a word to be considered. */
    minWordLength!: number;
    /** Maximum length of a word to be considered. */
    maxWordLength?: number | undefined;

    constructor(data?: INGramTransformation) {
        super(data);
        this._discriminator = "NGramTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.size = data["size"];
            this.minWordLength = data["minWordLength"];
            this.maxWordLength = data["maxWordLength"];
        }
    }

    static fromJS(data: any): NGramTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new NGramTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["minWordLength"] = this.minWordLength;
        data["maxWordLength"] = this.maxWordLength;
        super.toJSON(data);
        return data; 
    }
}

/** Produces N-grams based on splitting a text on whitespace characters. Removes punctuation as well. */
export interface INGramTransformation extends IBusinessRuleTransformation {
    /** Maximum size of n-grams to produce.
Settings this to 3 will produce unigrams, bigrams, trigrams. */
    size: number;
    /** Minimum length of a word to be considered. */
    minWordLength: number;
    /** Maximum length of a word to be considered. */
    maxWordLength?: number | undefined;
}

/** Transforms a list by applying a set of transformation for each item in the list. */
export class ProjectionTransformation extends BusinessRuleTransformation implements IProjectionTransformation {
    /** Transformations to apply. */
    transformations?: BusinessRuleTransformation[] | undefined;

    constructor(data?: IProjectionTransformation) {
        super(data);
        this._discriminator = "ProjectionTransformation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["transformations"])) {
                this.transformations = [] as any;
                for (let item of data["transformations"])
                    this.transformations!.push(BusinessRuleTransformation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjectionTransformation {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectionTransformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.transformations)) {
            data["transformations"] = [];
            for (let item of this.transformations)
                data["transformations"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Transforms a list by applying a set of transformation for each item in the list. */
export interface IProjectionTransformation extends IBusinessRuleTransformation {
    /** Transformations to apply. */
    transformations?: BusinessRuleTransformation[] | undefined;
}

/** Action to be performed by a business rule */
export abstract class BusinessRuleAction implements IBusinessRuleAction {

    protected _discriminator: string;

    constructor(data?: IBusinessRuleAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "BusinessRuleAction";
    }

    init(data?: any) {
    }

    static fromJS(data: any): BusinessRuleAction {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AssignLayerAction") {
            let result = new AssignLayerAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnassignLayerAction") {
            let result = new UnassignLayerAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AssignValueAction") {
            let result = new AssignValueAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AssignTagboxItemsAction") {
            let result = new AssignTagboxItemsAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnassignTagboxItemsAction") {
            let result = new UnassignTagboxItemsAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AssignContentPermissionSetsAction") {
            let result = new AssignContentPermissionSetsAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnassignContentPermissionSetsAction") {
            let result = new UnassignContentPermissionSetsAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ProduceMessageAction") {
            let result = new ProduceMessageAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AssignTagboxItemsInLayerAction") {
            let result = new AssignTagboxItemsInLayerAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "EnqueueTaggingAction") {
            let result = new EnqueueTaggingAction();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BusinessRuleAction' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** Action to be performed by a business rule */
export interface IBusinessRuleAction {
}

/** Assigns a layer, adding the default values to the data dictionary */
export class AssignLayerAction extends BusinessRuleAction implements IAssignLayerAction {
    /** The ID of the layer. */
    layerId?: string | undefined;
    /** An object containing default values (used for example to populate required fields). */
    defaultValues?: any | undefined;

    constructor(data?: IAssignLayerAction) {
        super(data);
        this._discriminator = "AssignLayerAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.layerId = data["layerId"];
            this.defaultValues = data["defaultValues"];
        }
    }

    static fromJS(data: any): AssignLayerAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssignLayerAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layerId"] = this.layerId;
        data["defaultValues"] = this.defaultValues;
        super.toJSON(data);
        return data; 
    }
}

/** Assigns a layer, adding the default values to the data dictionary */
export interface IAssignLayerAction extends IBusinessRuleAction {
    /** The ID of the layer. */
    layerId?: string | undefined;
    /** An object containing default values (used for example to populate required fields). */
    defaultValues?: any | undefined;
}

/** Removes a layer */
export class UnassignLayerAction extends BusinessRuleAction implements IUnassignLayerAction {
    /** The ID of the layer. */
    layerId?: string | undefined;

    constructor(data?: IUnassignLayerAction) {
        super(data);
        this._discriminator = "UnassignLayerAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.layerId = data["layerId"];
        }
    }

    static fromJS(data: any): UnassignLayerAction {
        data = typeof data === 'object' ? data : {};
        let result = new UnassignLayerAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layerId"] = this.layerId;
        super.toJSON(data);
        return data; 
    }
}

/** Removes a layer */
export interface IUnassignLayerAction extends IBusinessRuleAction {
    /** The ID of the layer. */
    layerId?: string | undefined;
}

/** Assign a value to all fields matching the FieldPath (JSON path). */
export class AssignValueAction extends BusinessRuleAction implements IAssignValueAction {
    /** Path to the object the value should be inserted in. */
    path?: string | undefined;
    /** ID of the field, the value should be inserted in. */
    fieldId?: string | undefined;
    /** Value to assign. */
    value?: any | undefined;
    /** Indicates whether existing values should be replaced.
Note: for multi fieldsets and relations, this setting controls, if the value is added
to the already existing values or if the existing values shall be overwritten. */
    replace!: boolean;

    constructor(data?: IAssignValueAction) {
        super(data);
        this._discriminator = "AssignValueAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
            this.fieldId = data["fieldId"];
            this.value = data["value"];
            this.replace = data["replace"];
        }
    }

    static fromJS(data: any): AssignValueAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssignValueAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["fieldId"] = this.fieldId;
        data["value"] = this.value;
        data["replace"] = this.replace;
        super.toJSON(data);
        return data; 
    }
}

/** Assign a value to all fields matching the FieldPath (JSON path). */
export interface IAssignValueAction extends IBusinessRuleAction {
    /** Path to the object the value should be inserted in. */
    path?: string | undefined;
    /** ID of the field, the value should be inserted in. */
    fieldId?: string | undefined;
    /** Value to assign. */
    value?: any | undefined;
    /** Indicates whether existing values should be replaced.
Note: for multi fieldsets and relations, this setting controls, if the value is added
to the already existing values or if the existing values shall be overwritten. */
    replace: boolean;
}

/** Assigns one or multiple tag box items to the multi tagbox identified by the path (JSON path). */
export class AssignTagboxItemsAction extends BusinessRuleAction implements IAssignTagboxItemsAction {
    /** Path to the object the tagbox is contained in. */
    path?: string | undefined;
    /** ID of the tagbox field. */
    fieldId?: string | undefined;
    /** List of refIds of the items that should be assigned. */
    refIds?: any | undefined;
    /** Indicates whether all the already assigned tags get replaced by the set specified in the action.
If false, the not already assigned tags get added, the rest is left as is. */
    replace!: boolean;

    constructor(data?: IAssignTagboxItemsAction) {
        super(data);
        this._discriminator = "AssignTagboxItemsAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
            this.fieldId = data["fieldId"];
            this.refIds = data["refIds"];
            this.replace = data["replace"];
        }
    }

    static fromJS(data: any): AssignTagboxItemsAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssignTagboxItemsAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["fieldId"] = this.fieldId;
        data["refIds"] = this.refIds;
        data["replace"] = this.replace;
        super.toJSON(data);
        return data; 
    }
}

/** Assigns one or multiple tag box items to the multi tagbox identified by the path (JSON path). */
export interface IAssignTagboxItemsAction extends IBusinessRuleAction {
    /** Path to the object the tagbox is contained in. */
    path?: string | undefined;
    /** ID of the tagbox field. */
    fieldId?: string | undefined;
    /** List of refIds of the items that should be assigned. */
    refIds?: any | undefined;
    /** Indicates whether all the already assigned tags get replaced by the set specified in the action.
If false, the not already assigned tags get added, the rest is left as is. */
    replace: boolean;
}

/** Removes one or multiple tag box items from the multi tagbox identified by the path (JSON path). */
export class UnassignTagboxItemsAction extends BusinessRuleAction implements IUnassignTagboxItemsAction {
    /** Path to the object the tagbox is contained in. */
    path?: string | undefined;
    /** ID of the tagbox field. */
    fieldId?: string | undefined;
    /** List of refIds of the items that should be removed. */
    refIds?: any | undefined;

    constructor(data?: IUnassignTagboxItemsAction) {
        super(data);
        this._discriminator = "UnassignTagboxItemsAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
            this.fieldId = data["fieldId"];
            this.refIds = data["refIds"];
        }
    }

    static fromJS(data: any): UnassignTagboxItemsAction {
        data = typeof data === 'object' ? data : {};
        let result = new UnassignTagboxItemsAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["fieldId"] = this.fieldId;
        data["refIds"] = this.refIds;
        super.toJSON(data);
        return data; 
    }
}

/** Removes one or multiple tag box items from the multi tagbox identified by the path (JSON path). */
export interface IUnassignTagboxItemsAction extends IBusinessRuleAction {
    /** Path to the object the tagbox is contained in. */
    path?: string | undefined;
    /** ID of the tagbox field. */
    fieldId?: string | undefined;
    /** List of refIds of the items that should be removed. */
    refIds?: any | undefined;
}

/** Assigns one or more permission sets to a content. */
export class AssignContentPermissionSetsAction extends BusinessRuleAction implements IAssignContentPermissionSetsAction {
    /** IDs of the permission sets to assign. */
    permissionSetIds?: any | undefined;
    /** Indicates whether the already assigned permissions should be replaced or merged. */
    replace!: boolean;

    constructor(data?: IAssignContentPermissionSetsAction) {
        super(data);
        this._discriminator = "AssignContentPermissionSetsAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetIds = data["permissionSetIds"];
            this.replace = data["replace"];
        }
    }

    static fromJS(data: any): AssignContentPermissionSetsAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssignContentPermissionSetsAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetIds"] = this.permissionSetIds;
        data["replace"] = this.replace;
        super.toJSON(data);
        return data; 
    }
}

/** Assigns one or more permission sets to a content. */
export interface IAssignContentPermissionSetsAction extends IBusinessRuleAction {
    /** IDs of the permission sets to assign. */
    permissionSetIds?: any | undefined;
    /** Indicates whether the already assigned permissions should be replaced or merged. */
    replace: boolean;
}

/** Removes one or more permission sets from a content. */
export class UnassignContentPermissionSetsAction extends BusinessRuleAction implements IUnassignContentPermissionSetsAction {
    /** IDs of the permission sets to unassign. */
    permissionSetIds?: any | undefined;

    constructor(data?: IUnassignContentPermissionSetsAction) {
        super(data);
        this._discriminator = "UnassignContentPermissionSetsAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetIds = data["permissionSetIds"];
        }
    }

    static fromJS(data: any): UnassignContentPermissionSetsAction {
        data = typeof data === 'object' ? data : {};
        let result = new UnassignContentPermissionSetsAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetIds"] = this.permissionSetIds;
        super.toJSON(data);
        return data; 
    }
}

/** Removes one or more permission sets from a content. */
export interface IUnassignContentPermissionSetsAction extends IBusinessRuleAction {
    /** IDs of the permission sets to unassign. */
    permissionSetIds?: any | undefined;
}

export class ProduceMessageAction extends BusinessRuleAction implements IProduceMessageAction {

    constructor(data?: IProduceMessageAction) {
        super(data);
        this._discriminator = "ProduceMessageAction";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ProduceMessageAction {
        data = typeof data === 'object' ? data : {};
        let result = new ProduceMessageAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IProduceMessageAction extends IBusinessRuleAction {
}

/** Assigns a set of list item ids to all multi tag boxes in a layer where the filter defined on the tagbox does allow assignment of the ID. */
export class AssignTagboxItemsInLayerAction extends BusinessRuleAction implements IAssignTagboxItemsInLayerAction {
    /** Named cache to use for lookup, should be of type SchemaTagboxFilterLookupNamedCacheConfiguration */
    namedCache?: string | undefined;
    /** List of refIds of the items that should be assigned. */
    refIds?: any | undefined;
    /** Indicates where the assignment should be additive to the already assigned tags
or if existing tags should be replaced. */
    replace!: boolean;

    constructor(data?: IAssignTagboxItemsInLayerAction) {
        super(data);
        this._discriminator = "AssignTagboxItemsInLayerAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.namedCache = data["namedCache"];
            this.refIds = data["refIds"];
            this.replace = data["replace"];
        }
    }

    static fromJS(data: any): AssignTagboxItemsInLayerAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssignTagboxItemsInLayerAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["namedCache"] = this.namedCache;
        data["refIds"] = this.refIds;
        data["replace"] = this.replace;
        super.toJSON(data);
        return data; 
    }
}

/** Assigns a set of list item ids to all multi tag boxes in a layer where the filter defined on the tagbox does allow assignment of the ID. */
export interface IAssignTagboxItemsInLayerAction extends IBusinessRuleAction {
    /** Named cache to use for lookup, should be of type SchemaTagboxFilterLookupNamedCacheConfiguration */
    namedCache?: string | undefined;
    /** List of refIds of the items that should be assigned. */
    refIds?: any | undefined;
    /** Indicates where the assignment should be additive to the already assigned tags
or if existing tags should be replaced. */
    replace: boolean;
}

/** Enqueue content for tagging */
export class EnqueueTaggingAction extends BusinessRuleAction implements IEnqueueTaggingAction {
    /** Options to use while tagging. */
    options?: TaggingOptionsBase | undefined;

    constructor(data?: IEnqueueTaggingAction) {
        super(data);
        this._discriminator = "EnqueueTaggingAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.options = data["options"] ? TaggingOptionsBase.fromJS(data["options"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EnqueueTaggingAction {
        data = typeof data === 'object' ? data : {};
        let result = new EnqueueTaggingAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Enqueue content for tagging */
export interface IEnqueueTaggingAction extends IBusinessRuleAction {
    /** Options to use while tagging. */
    options?: TaggingOptionsBase | undefined;
}

/** Options for tagging */
export abstract class TaggingOptionsBase implements ITaggingOptionsBase {
    /** Override for the output format ID to tag. */
    tagOutputFormatId?: string | undefined;
    /** Override for the cache to use. */
    keywordLookupCacheName?: string | undefined;
    /** Override for the layer to assign. */
    taggingLayerId?: string | undefined;
    /** Override for the field id where found tags are stored. */
    foundTagsFieldId?: string | undefined;
    /** Override for the field id where not found tags are stored. */
    missingKeywordsFieldId?: string | undefined;

    protected _discriminator: string;

    constructor(data?: ITaggingOptionsBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "TaggingOptionsBase";
    }

    init(data?: any) {
        if (data) {
            this.tagOutputFormatId = data["tagOutputFormatId"];
            this.keywordLookupCacheName = data["keywordLookupCacheName"];
            this.taggingLayerId = data["taggingLayerId"];
            this.foundTagsFieldId = data["foundTagsFieldId"];
            this.missingKeywordsFieldId = data["missingKeywordsFieldId"];
        }
    }

    static fromJS(data: any): TaggingOptionsBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ClarifaiTaggingOptions") {
            let result = new ClarifaiTaggingOptions();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SimulatedTaggingOptions") {
            let result = new SimulatedTaggingOptions();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'TaggingOptionsBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["tagOutputFormatId"] = this.tagOutputFormatId;
        data["keywordLookupCacheName"] = this.keywordLookupCacheName;
        data["taggingLayerId"] = this.taggingLayerId;
        data["foundTagsFieldId"] = this.foundTagsFieldId;
        data["missingKeywordsFieldId"] = this.missingKeywordsFieldId;
        return data; 
    }
}

/** Options for tagging */
export interface ITaggingOptionsBase {
    /** Override for the output format ID to tag. */
    tagOutputFormatId?: string | undefined;
    /** Override for the cache to use. */
    keywordLookupCacheName?: string | undefined;
    /** Override for the layer to assign. */
    taggingLayerId?: string | undefined;
    /** Override for the field id where found tags are stored. */
    foundTagsFieldId?: string | undefined;
    /** Override for the field id where not found tags are stored. */
    missingKeywordsFieldId?: string | undefined;
}

/** Options for clarifai tagging */
export class ClarifaiTaggingOptions extends TaggingOptionsBase implements IClarifaiTaggingOptions {
    /** Override for the model to use */
    model?: string | undefined;
    /** Override for the language to use */
    language?: string | undefined;
    /** Minimum value a concept must have to be considered */
    minimumValue?: string | undefined;

    constructor(data?: IClarifaiTaggingOptions) {
        super(data);
        this._discriminator = "ClarifaiTaggingOptions";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.model = data["model"];
            this.language = data["language"];
            this.minimumValue = data["minimumValue"];
        }
    }

    static fromJS(data: any): ClarifaiTaggingOptions {
        data = typeof data === 'object' ? data : {};
        let result = new ClarifaiTaggingOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["model"] = this.model;
        data["language"] = this.language;
        data["minimumValue"] = this.minimumValue;
        super.toJSON(data);
        return data; 
    }
}

/** Options for clarifai tagging */
export interface IClarifaiTaggingOptions extends ITaggingOptionsBase {
    /** Override for the model to use */
    model?: string | undefined;
    /** Override for the language to use */
    language?: string | undefined;
    /** Minimum value a concept must have to be considered */
    minimumValue?: string | undefined;
}

export class SimulatedTaggingOptions extends TaggingOptionsBase implements ISimulatedTaggingOptions {
    /** Number of keywords to assign. */
    numberOfKeywords?: string | undefined;

    constructor(data?: ISimulatedTaggingOptions) {
        super(data);
        this._discriminator = "SimulatedTaggingOptions";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.numberOfKeywords = data["numberOfKeywords"];
        }
    }

    static fromJS(data: any): SimulatedTaggingOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SimulatedTaggingOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfKeywords"] = this.numberOfKeywords;
        super.toJSON(data);
        return data; 
    }
}

export interface ISimulatedTaggingOptions extends ITaggingOptionsBase {
    /** Number of keywords to assign. */
    numberOfKeywords?: string | undefined;
}

/** A business rule expressed as a script */
export class BusinessRuleScript extends BusinessRule implements IBusinessRuleScript {
    /** Script */
    script?: string | undefined;

    constructor(data?: IBusinessRuleScript) {
        super(data);
        this._discriminator = "BusinessRuleScript";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.script = data["script"];
        }
    }

    static fromJS(data: any): BusinessRuleScript {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleScript();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["script"] = this.script;
        super.toJSON(data);
        return data; 
    }
}

/** A business rule expressed as a script */
export interface IBusinessRuleScript extends IBusinessRule {
    /** Script */
    script?: string | undefined;
}

/** Named cache configuration */
export abstract class NamedCacheConfigurationBase implements INamedCacheConfigurationBase {
    /** Name of named cache. */
    name?: string | undefined;
    /** Indicates if the lookup should be cache sensitive. */
    caseSensitive!: boolean;

    protected _discriminator: string;

    constructor(data?: INamedCacheConfigurationBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "NamedCacheConfigurationBase";
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.caseSensitive = data["caseSensitive"];
        }
    }

    static fromJS(data: any): NamedCacheConfigurationBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ListItemNamedCacheConfiguration") {
            let result = new ListItemNamedCacheConfiguration();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SchemaTagboxFilterLookupNamedCacheConfiguration") {
            let result = new SchemaTagboxFilterLookupNamedCacheConfiguration();
            result.init(data);
            return result;
        }
        if (data["kind"] === "InverseListItemNamedCacheConfiguration") {
            let result = new InverseListItemNamedCacheConfiguration();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'NamedCacheConfigurationBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["name"] = this.name;
        data["caseSensitive"] = this.caseSensitive;
        return data; 
    }
}

/** Named cache configuration */
export interface INamedCacheConfigurationBase {
    /** Name of named cache. */
    name?: string | undefined;
    /** Indicates if the lookup should be cache sensitive. */
    caseSensitive: boolean;
}

/** List item named cache */
export class ListItemNamedCacheConfiguration extends NamedCacheConfigurationBase implements IListItemNamedCacheConfiguration {
    /** ID of the schema to cache (should have SchemaType = List) */
    schemaId?: string | undefined;
    /** List of IDs of fields to use as a composite key */
    keyFields?: string[] | undefined;
    /** An optional filter to narrow down the cached list items */
    filter?: FilterBase | undefined;
    /** Include child schemas when caching list items */
    includeAllSchemaChildren!: boolean;

    constructor(data?: IListItemNamedCacheConfiguration) {
        super(data);
        this._discriminator = "ListItemNamedCacheConfiguration";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            if (Array.isArray(data["keyFields"])) {
                this.keyFields = [] as any;
                for (let item of data["keyFields"])
                    this.keyFields!.push(item);
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.includeAllSchemaChildren = data["includeAllSchemaChildren"];
        }
    }

    static fromJS(data: any): ListItemNamedCacheConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemNamedCacheConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        if (Array.isArray(this.keyFields)) {
            data["keyFields"] = [];
            for (let item of this.keyFields)
                data["keyFields"].push(item);
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["includeAllSchemaChildren"] = this.includeAllSchemaChildren;
        super.toJSON(data);
        return data; 
    }
}

/** List item named cache */
export interface IListItemNamedCacheConfiguration extends INamedCacheConfigurationBase {
    /** ID of the schema to cache (should have SchemaType = List) */
    schemaId?: string | undefined;
    /** List of IDs of fields to use as a composite key */
    keyFields?: string[] | undefined;
    /** An optional filter to narrow down the cached list items */
    filter?: FilterBase | undefined;
    /** Include child schemas when caching list items */
    includeAllSchemaChildren: boolean;
}

/** Creates a cache for all multi tag boxes in a schema Lookup key is then in the format [ fieldId, refId ], returns the refId if matched by the filter */
export class SchemaTagboxFilterLookupNamedCacheConfiguration extends NamedCacheConfigurationBase implements ISchemaTagboxFilterLookupNamedCacheConfiguration {
    /** The layer id. */
    schemaId?: string | undefined;

    constructor(data?: ISchemaTagboxFilterLookupNamedCacheConfiguration) {
        super(data);
        this._discriminator = "SchemaTagboxFilterLookupNamedCacheConfiguration";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): SchemaTagboxFilterLookupNamedCacheConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaTagboxFilterLookupNamedCacheConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        super.toJSON(data);
        return data; 
    }
}

/** Creates a cache for all multi tag boxes in a schema Lookup key is then in the format [ fieldId, refId ], returns the refId if matched by the filter */
export interface ISchemaTagboxFilterLookupNamedCacheConfiguration extends INamedCacheConfigurationBase {
    /** The layer id. */
    schemaId?: string | undefined;
}

export class InverseListItemNamedCacheConfiguration extends NamedCacheConfigurationBase implements IInverseListItemNamedCacheConfiguration {
    /** ID of the schema to cache (should have SchemaType = List) */
    schemaId?: string | undefined;
    /** ID of the field that yields the value */
    valueField?: string | undefined;
    /** An optional filter to narrow down the cached list items */
    filter?: FilterBase | undefined;
    /** Include child schemas when caching list items */
    includeAllSchemaChildren!: boolean;

    constructor(data?: IInverseListItemNamedCacheConfiguration) {
        super(data);
        this._discriminator = "InverseListItemNamedCacheConfiguration";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.valueField = data["valueField"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.includeAllSchemaChildren = data["includeAllSchemaChildren"];
        }
    }

    static fromJS(data: any): InverseListItemNamedCacheConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new InverseListItemNamedCacheConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["valueField"] = this.valueField;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["includeAllSchemaChildren"] = this.includeAllSchemaChildren;
        super.toJSON(data);
        return data; 
    }
}

export interface IInverseListItemNamedCacheConfiguration extends INamedCacheConfigurationBase {
    /** ID of the schema to cache (should have SchemaType = List) */
    schemaId?: string | undefined;
    /** ID of the field that yields the value */
    valueField?: string | undefined;
    /** An optional filter to narrow down the cached list items */
    filter?: FilterBase | undefined;
    /** Include child schemas when caching list items */
    includeAllSchemaChildren: boolean;
}

/** Update request for changing business rule configuration */
export class BusinessRuleConfigurationUpdateRequest implements IBusinessRuleConfigurationUpdateRequest {
    /** Disables the rule engine completely. */
    disableRuleEngine!: boolean;
    /** Rules. */
    rules?: BusinessRule[] | undefined;
    /** Named caches. */
    caches?: NamedCacheConfigurationBase[] | undefined;

    constructor(data?: IBusinessRuleConfigurationUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.disableRuleEngine = data["disableRuleEngine"];
            if (Array.isArray(data["rules"])) {
                this.rules = [] as any;
                for (let item of data["rules"])
                    this.rules!.push(BusinessRule.fromJS(item));
            }
            if (Array.isArray(data["caches"])) {
                this.caches = [] as any;
                for (let item of data["caches"])
                    this.caches!.push(NamedCacheConfigurationBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleConfigurationUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleConfigurationUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["disableRuleEngine"] = this.disableRuleEngine;
        if (Array.isArray(this.rules)) {
            data["rules"] = [];
            for (let item of this.rules)
                data["rules"].push(item.toJSON());
        }
        if (Array.isArray(this.caches)) {
            data["caches"] = [];
            for (let item of this.caches)
                data["caches"].push(item.toJSON());
        }
        return data; 
    }
}

/** Update request for changing business rule configuration */
export interface IBusinessRuleConfigurationUpdateRequest {
    /** Disables the rule engine completely. */
    disableRuleEngine: boolean;
    /** Rules. */
    rules?: BusinessRule[] | undefined;
    /** Named caches. */
    caches?: NamedCacheConfigurationBase[] | undefined;
}

export class Channel implements IChannel {
    /** ID of channel. */
    id!: string;
    /** Numeric sort order of the channel. Channels are returned ordered by this field. */
    sortOrder!: number;
    /** The search index ID where the channel requests the content from. Only RootContentSearchIndex is supported. */
    searchIndexId!: string;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** Language specific names. */
    names!: TranslatedStringDictionary;
    /** Default sort order specified for the channel to sort the results of a content search. */
    sort!: SortInfo[];
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations!: AggregatorBase[];
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields!: string[];
    /** User roles granted access to the channel. */
    grantedUserRoleIds!: string[];
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns!: TranslatedStringDictionary;
    /** Audit information. */
    audit!: UserAudit;
    /** Grants rights to all the users to view the channel. */
    viewForAll!: boolean;

    constructor(data?: IChannel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
            this.missingResultsDisplayPatterns = data.missingResultsDisplayPatterns && !(<any>data.missingResultsDisplayPatterns).toJSON ? new TranslatedStringDictionary(data.missingResultsDisplayPatterns) : <TranslatedStringDictionary>this.missingResultsDisplayPatterns; 
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
            this.sort = [];
            this.aggregations = [];
            this.extendedSimpleSearchFields = [];
            this.grantedUserRoleIds = [];
            this.missingResultsDisplayPatterns = new TranslatedStringDictionary();
            this.audit = new UserAudit();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sortOrder = data["sortOrder"];
            this.searchIndexId = data["searchIndexId"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            if (Array.isArray(data["extendedSimpleSearchFields"])) {
                this.extendedSimpleSearchFields = [] as any;
                for (let item of data["extendedSimpleSearchFields"])
                    this.extendedSimpleSearchFields!.push(item);
            }
            if (Array.isArray(data["grantedUserRoleIds"])) {
                this.grantedUserRoleIds = [] as any;
                for (let item of data["grantedUserRoleIds"])
                    this.grantedUserRoleIds!.push(item);
            }
            this.missingResultsDisplayPatterns = data["missingResultsDisplayPatterns"] ? TranslatedStringDictionary.fromJS(data["missingResultsDisplayPatterns"]) : new TranslatedStringDictionary();
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : new UserAudit();
            this.viewForAll = data["viewForAll"];
        }
    }

    static fromJS(data: any): Channel {
        data = typeof data === 'object' ? data : {};
        let result = new Channel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sortOrder"] = this.sortOrder;
        data["searchIndexId"] = this.searchIndexId;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        if (Array.isArray(this.extendedSimpleSearchFields)) {
            data["extendedSimpleSearchFields"] = [];
            for (let item of this.extendedSimpleSearchFields)
                data["extendedSimpleSearchFields"].push(item);
        }
        if (Array.isArray(this.grantedUserRoleIds)) {
            data["grantedUserRoleIds"] = [];
            for (let item of this.grantedUserRoleIds)
                data["grantedUserRoleIds"].push(item);
        }
        data["missingResultsDisplayPatterns"] = this.missingResultsDisplayPatterns ? this.missingResultsDisplayPatterns.toJSON() : <any>undefined;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["viewForAll"] = this.viewForAll;
        return data; 
    }
}

export interface IChannel {
    /** ID of channel. */
    id: string;
    /** Numeric sort order of the channel. Channels are returned ordered by this field. */
    sortOrder: number;
    /** The search index ID where the channel requests the content from. Only RootContentSearchIndex is supported. */
    searchIndexId: string;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** Language specific names. */
    names: ITranslatedStringDictionary;
    /** Default sort order specified for the channel to sort the results of a content search. */
    sort: ISortInfo[];
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations: AggregatorBase[];
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields: string[];
    /** User roles granted access to the channel. */
    grantedUserRoleIds: string[];
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns: ITranslatedStringDictionary;
    /** Audit information. */
    audit: IUserAudit;
    /** Grants rights to all the users to view the channel. */
    viewForAll: boolean;
}

/** Sorting information */
export class SortInfo implements ISortInfo {
    /** The field's ID to sort on. */
    field?: string | undefined;
    /** The sort direction (ascending/descending). */
    direction!: SortDirection;

    constructor(data?: ISortInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.field = data["field"];
            this.direction = data["direction"];
        }
    }

    static fromJS(data: any): SortInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SortInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["direction"] = this.direction;
        return data; 
    }
}

/** Sorting information */
export interface ISortInfo {
    /** The field's ID to sort on. */
    field?: string | undefined;
    /** The sort direction (ascending/descending). */
    direction: SortDirection;
}

/** The sort direction */
export enum SortDirection {
    Asc = "Asc",
    Desc = "Desc",
}

/** It is the base class for all aggregators. */
export abstract class AggregatorBase implements IAggregatorBase {
    /** The slug name of the aggregation. It must be unique per aggregation request. */
    name!: string;
    /** Language specific field names. */
    names?: TranslatedStringDictionary | undefined;
    /** An optional aggregator list for nested aggregations. */
    aggregators?: AggregatorBase[] | undefined;
    /** An optional filter to limit the data set the aggregation is operation on. */
    filter?: FilterBase | undefined;

    protected _discriminator: string;

    constructor(data?: IAggregatorBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
        this._discriminator = "AggregatorBase";
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AggregatorBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "DateRangeAggregator") {
            let result = new DateRangeAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "GeoDistanceAggregator") {
            let result = new GeoDistanceAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NestedAggregator") {
            let result = new NestedAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NumericRangeAggregator") {
            let result = new NumericRangeAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsAggregator") {
            let result = new TermsAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsRelationAggregator") {
            let result = new TermsRelationAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsEnumAggregator") {
            let result = new TermsEnumAggregator();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'AggregatorBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["name"] = this.name;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        return data; 
    }
}

/** It is the base class for all aggregators. */
export interface IAggregatorBase {
    /** The slug name of the aggregation. It must be unique per aggregation request. */
    name: string;
    /** Language specific field names. */
    names?: ITranslatedStringDictionary | undefined;
    /** An optional aggregator list for nested aggregations. */
    aggregators?: AggregatorBase[] | undefined;
    /** An optional filter to limit the data set the aggregation is operation on. */
    filter?: FilterBase | undefined;
}

/** A multi-bucket range aggregator dedicated for date values. */
export class DateRangeAggregator extends AggregatorBase implements IDateRangeAggregator {
    /** The field's ID to execute the aggregation on. */
    field!: string;
    /** A list of date time ranges. */
    ranges!: DateRangeForAggregator[];

    constructor(data?: IDateRangeAggregator) {
        super(data);
        if (data) {
            if (data.ranges) {
                this.ranges = [];
                for (let i = 0; i < data.ranges.length; i++) {
                    let item = data.ranges[i];
                    this.ranges[i] = item && !(<any>item).toJSON ? new DateRangeForAggregator(item) : <DateRangeForAggregator>item;
                }
            }
        }
        if (!data) {
            this.ranges = [];
        }
        this._discriminator = "DateRangeAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            if (Array.isArray(data["ranges"])) {
                this.ranges = [] as any;
                for (let item of data["ranges"])
                    this.ranges!.push(DateRangeForAggregator.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DateRangeAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new DateRangeAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        if (Array.isArray(this.ranges)) {
            data["ranges"] = [];
            for (let item of this.ranges)
                data["ranges"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket range aggregator dedicated for date values. */
export interface IDateRangeAggregator extends IAggregatorBase {
    /** The field's ID to execute the aggregation on. */
    field: string;
    /** A list of date time ranges. */
    ranges: IDateRangeForAggregator[];
}

/** The date range class used in aggregators. */
export class DateRangeForAggregator implements IDateRangeForAggregator {
    /** Language specific range names. */
    names?: TranslatedStringDictionary | undefined;
    /** The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    from?: string | undefined;
    /** The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    to?: string | undefined;

    constructor(data?: IDateRangeForAggregator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
        }
    }

    static fromJS(data: any): DateRangeForAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new DateRangeForAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        return data; 
    }
}

/** The date range class used in aggregators. */
export interface IDateRangeForAggregator {
    /** Language specific range names. */
    names?: ITranslatedStringDictionary | undefined;
    /** The from value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    from?: string | undefined;
    /** The to value: it can be a datetime string or a pattern now(+-)(int)(YMDHm). */
    to?: string | undefined;
}

/** A multi-bucket range aggregator that works on geo_point fields */
export class GeoDistanceAggregator extends AggregatorBase implements IGeoDistanceAggregator {
    /** The field's ID to execute the aggregation on. */
    field!: string;
    /** The point of origin to calculate the distance from (latitude/longitude). */
    location!: GeoLocation;
    /** A list of distance ranges. */
    ranges!: GeoDistance[];

    constructor(data?: IGeoDistanceAggregator) {
        super(data);
        if (data) {
            this.location = data.location && !(<any>data.location).toJSON ? new GeoLocation(data.location) : <GeoLocation>this.location; 
            if (data.ranges) {
                this.ranges = [];
                for (let i = 0; i < data.ranges.length; i++) {
                    let item = data.ranges[i];
                    this.ranges[i] = item && !(<any>item).toJSON ? new GeoDistance(item) : <GeoDistance>item;
                }
            }
        }
        if (!data) {
            this.location = new GeoLocation();
            this.ranges = [];
        }
        this._discriminator = "GeoDistanceAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.location = data["location"] ? GeoLocation.fromJS(data["location"]) : new GeoLocation();
            if (Array.isArray(data["ranges"])) {
                this.ranges = [] as any;
                for (let item of data["ranges"])
                    this.ranges!.push(GeoDistance.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GeoDistanceAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new GeoDistanceAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        if (Array.isArray(this.ranges)) {
            data["ranges"] = [];
            for (let item of this.ranges)
                data["ranges"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket range aggregator that works on geo_point fields */
export interface IGeoDistanceAggregator extends IAggregatorBase {
    /** The field's ID to execute the aggregation on. */
    field: string;
    /** The point of origin to calculate the distance from (latitude/longitude). */
    location: IGeoLocation;
    /** A list of distance ranges. */
    ranges: IGeoDistance[];
}

/** Stores geo distance information for gei distance aggregation */
export class GeoDistance implements IGeoDistance {
    /** Language specific geo distance names. */
    names?: TranslatedStringDictionary | undefined;
    /** The distance in meters. */
    distance!: number;

    constructor(data?: IGeoDistance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.distance = data["distance"];
        }
    }

    static fromJS(data: any): GeoDistance {
        data = typeof data === 'object' ? data : {};
        let result = new GeoDistance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["distance"] = this.distance;
        return data; 
    }
}

/** Stores geo distance information for gei distance aggregation */
export interface IGeoDistance {
    /** Language specific geo distance names. */
    names?: ITranslatedStringDictionary | undefined;
    /** The distance in meters. */
    distance: number;
}

/** A special single bucket aggregation that enables aggregating on nested documents */
export class NestedAggregator extends AggregatorBase implements INestedAggregator {
    /** The path pointing to the nested object. */
    path!: string;

    constructor(data?: INestedAggregator) {
        super(data);
        this._discriminator = "NestedAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
        }
    }

    static fromJS(data: any): NestedAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new NestedAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        super.toJSON(data);
        return data; 
    }
}

/** A special single bucket aggregation that enables aggregating on nested documents */
export interface INestedAggregator extends IAggregatorBase {
    /** The path pointing to the nested object. */
    path: string;
}

/** A multi-bucket range aggregator. */
export class NumericRangeAggregator extends AggregatorBase implements INumericRangeAggregator {
    /** The field's ID to execute the aggregation on. */
    field?: string | undefined;
    /** A list of numeric ranges on which aggregate. */
    ranges!: NumericRangeForAggregator[];

    constructor(data?: INumericRangeAggregator) {
        super(data);
        if (data) {
            if (data.ranges) {
                this.ranges = [];
                for (let i = 0; i < data.ranges.length; i++) {
                    let item = data.ranges[i];
                    this.ranges[i] = item && !(<any>item).toJSON ? new NumericRangeForAggregator(item) : <NumericRangeForAggregator>item;
                }
            }
        }
        if (!data) {
            this.ranges = [];
        }
        this._discriminator = "NumericRangeAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            if (Array.isArray(data["ranges"])) {
                this.ranges = [] as any;
                for (let item of data["ranges"])
                    this.ranges!.push(NumericRangeForAggregator.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NumericRangeAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new NumericRangeAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        if (Array.isArray(this.ranges)) {
            data["ranges"] = [];
            for (let item of this.ranges)
                data["ranges"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket range aggregator. */
export interface INumericRangeAggregator extends IAggregatorBase {
    /** The field's ID to execute the aggregation on. */
    field?: string | undefined;
    /** A list of numeric ranges on which aggregate. */
    ranges: INumericRangeForAggregator[];
}

/** The numeric range for aggregator class */
export class NumericRangeForAggregator implements INumericRangeForAggregator {
    /** Language specific range names. */
    names?: TranslatedStringDictionary | undefined;
    /** The from value. */
    from?: number | undefined;
    /** The to value. */
    to?: number | undefined;

    constructor(data?: INumericRangeForAggregator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.from = data["from"];
            this.to = data["to"];
        }
    }

    static fromJS(data: any): NumericRangeForAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new NumericRangeForAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["from"] = this.from;
        data["to"] = this.to;
        return data; 
    }
}

/** The numeric range for aggregator class */
export interface INumericRangeForAggregator {
    /** Language specific range names. */
    names?: ITranslatedStringDictionary | undefined;
    /** The from value. */
    from?: number | undefined;
    /** The to value. */
    to?: number | undefined;
}

/** A multi-bucket value aggregator */
export class TermsAggregator extends AggregatorBase implements ITermsAggregator {
    /** The field's ID to execute the aggregation on. Only not analyzed fields are supported. */
    field!: string;
    /** It defines how many term buckets should be returned out of the overall terms list. */
    size?: number | undefined;
    /** Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values. */
    includes?: string[] | undefined;
    /** Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values. */
    excludes?: string[] | undefined;
    /** Limits the possible returned aggregation values by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used. */
    searchFields?: string[] | undefined;

    constructor(data?: ITermsAggregator) {
        super(data);
        this._discriminator = "TermsAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.field = data["field"];
            this.size = data["size"];
            if (Array.isArray(data["includes"])) {
                this.includes = [] as any;
                for (let item of data["includes"])
                    this.includes!.push(item);
            }
            if (Array.isArray(data["excludes"])) {
                this.excludes = [] as any;
                for (let item of data["excludes"])
                    this.excludes!.push(item);
            }
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchFields"])) {
                this.searchFields = [] as any;
                for (let item of data["searchFields"])
                    this.searchFields!.push(item);
            }
        }
    }

    static fromJS(data: any): TermsAggregator {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "TermsRelationAggregator") {
            let result = new TermsRelationAggregator();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TermsEnumAggregator") {
            let result = new TermsEnumAggregator();
            result.init(data);
            return result;
        }
        let result = new TermsAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["size"] = this.size;
        if (Array.isArray(this.includes)) {
            data["includes"] = [];
            for (let item of this.includes)
                data["includes"].push(item);
        }
        if (Array.isArray(this.excludes)) {
            data["excludes"] = [];
            for (let item of this.excludes)
                data["excludes"].push(item);
        }
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchFields)) {
            data["searchFields"] = [];
            for (let item of this.searchFields)
                data["searchFields"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket value aggregator */
export interface ITermsAggregator extends IAggregatorBase {
    /** The field's ID to execute the aggregation on. Only not analyzed fields are supported. */
    field: string;
    /** It defines how many term buckets should be returned out of the overall terms list. */
    size?: number | undefined;
    /** Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values. */
    includes?: string[] | undefined;
    /** Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values. */
    excludes?: string[] | undefined;
    /** Limits the possible returned aggregation values by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** Search fields to be used to search the SearchString value into. If no search field is specified, the Field value is used. */
    searchFields?: string[] | undefined;
}

/** A multi-bucket value aggregator used for aggregations on relation item ids. */
export class TermsRelationAggregator extends TermsAggregator implements ITermsRelationAggregator {
    /** Type of the item target of the relation. It is used to resolve the target ID. */
    documentType!: TermsRelationAggregatorDocumentType;

    constructor(data?: ITermsRelationAggregator) {
        super(data);
        this._discriminator = "TermsRelationAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.documentType = data["documentType"];
        }
    }

    static fromJS(data: any): TermsRelationAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new TermsRelationAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentType"] = this.documentType;
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket value aggregator used for aggregations on relation item ids. */
export interface ITermsRelationAggregator extends ITermsAggregator {
    /** Type of the item target of the relation. It is used to resolve the target ID. */
    documentType: TermsRelationAggregatorDocumentType;
}

export enum TermsRelationAggregatorDocumentType {
    Content = "Content",
    ListItem = "ListItem",
    Schema = "Schema",
    User = "User",
    ContentPermissionSet = "ContentPermissionSet",
    Owner = "Owner",
}

/** A multi-bucket value aggregator used for aggregations on indexed enum values. */
export class TermsEnumAggregator extends TermsAggregator implements ITermsEnumAggregator {
    /** Type of the enum target of the relation. It is used to resolve the enum translation. */
    enumType!: string;

    constructor(data?: ITermsEnumAggregator) {
        super(data);
        this._discriminator = "TermsEnumAggregator";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.enumType = data["enumType"];
        }
    }

    static fromJS(data: any): TermsEnumAggregator {
        data = typeof data === 'object' ? data : {};
        let result = new TermsEnumAggregator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enumType"] = this.enumType;
        super.toJSON(data);
        return data; 
    }
}

/** A multi-bucket value aggregator used for aggregations on indexed enum values. */
export interface ITermsEnumAggregator extends ITermsAggregator {
    /** Type of the enum target of the relation. It is used to resolve the enum translation. */
    enumType: string;
}

/** Audit information */
export class UserAudit implements IUserAudit {
    /** The date on which the document was created. */
    creationDate!: Date;
    /** The last date on which the document was modified. */
    modificationDate!: Date;
    /** ID of the user who created the document. */
    createdByUser?: string | undefined;
    /** ID of the last user who modified the document. */
    modifiedByUser?: string | undefined;

    constructor(data?: IUserAudit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.creationDate = data["creationDate"] ? new Date(data["creationDate"].toString()) : <any>undefined;
            this.modificationDate = data["modificationDate"] ? new Date(data["modificationDate"].toString()) : <any>undefined;
            this.createdByUser = data["createdByUser"];
            this.modifiedByUser = data["modifiedByUser"];
        }
    }

    static fromJS(data: any): UserAudit {
        data = typeof data === 'object' ? data : {};
        let result = new UserAudit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>undefined;
        data["createdByUser"] = this.createdByUser;
        data["modifiedByUser"] = this.modifiedByUser;
        return data; 
    }
}

/** Audit information */
export interface IUserAudit {
    /** The date on which the document was created. */
    creationDate: Date;
    /** The last date on which the document was modified. */
    modificationDate: Date;
    /** ID of the user who created the document. */
    createdByUser?: string | undefined;
    /** ID of the last user who modified the document. */
    modifiedByUser?: string | undefined;
}

export class ChannelCreateRequest implements IChannelCreateRequest {
    id?: string | undefined;
    sort?: SortInfo[] | undefined;
    sortOrder!: number;
    names!: TranslatedStringDictionary;
    /** Language specific names. */
    searchIndexId?: string | undefined;
    /** User roles granted access to the channel. */
    grantedUserRoleIds?: string[] | undefined;
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations?: AggregatorBase[] | undefined;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields?: string[] | undefined;
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns?: TranslatedStringDictionary | undefined;
    /** Grants rights to all the users to view the channel. */
    viewForAll!: boolean;

    constructor(data?: IChannelCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.missingResultsDisplayPatterns = data.missingResultsDisplayPatterns && !(<any>data.missingResultsDisplayPatterns).toJSON ? new TranslatedStringDictionary(data.missingResultsDisplayPatterns) : <TranslatedStringDictionary>this.missingResultsDisplayPatterns; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.sortOrder = data["sortOrder"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            this.searchIndexId = data["searchIndexId"];
            if (Array.isArray(data["grantedUserRoleIds"])) {
                this.grantedUserRoleIds = [] as any;
                for (let item of data["grantedUserRoleIds"])
                    this.grantedUserRoleIds!.push(item);
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            if (Array.isArray(data["extendedSimpleSearchFields"])) {
                this.extendedSimpleSearchFields = [] as any;
                for (let item of data["extendedSimpleSearchFields"])
                    this.extendedSimpleSearchFields!.push(item);
            }
            this.missingResultsDisplayPatterns = data["missingResultsDisplayPatterns"] ? TranslatedStringDictionary.fromJS(data["missingResultsDisplayPatterns"]) : <any>undefined;
            this.viewForAll = data["viewForAll"];
        }
    }

    static fromJS(data: any): ChannelCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["sortOrder"] = this.sortOrder;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["searchIndexId"] = this.searchIndexId;
        if (Array.isArray(this.grantedUserRoleIds)) {
            data["grantedUserRoleIds"] = [];
            for (let item of this.grantedUserRoleIds)
                data["grantedUserRoleIds"].push(item);
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        if (Array.isArray(this.extendedSimpleSearchFields)) {
            data["extendedSimpleSearchFields"] = [];
            for (let item of this.extendedSimpleSearchFields)
                data["extendedSimpleSearchFields"].push(item);
        }
        data["missingResultsDisplayPatterns"] = this.missingResultsDisplayPatterns ? this.missingResultsDisplayPatterns.toJSON() : <any>undefined;
        data["viewForAll"] = this.viewForAll;
        return data; 
    }
}

export interface IChannelCreateRequest {
    id?: string | undefined;
    sort?: ISortInfo[] | undefined;
    sortOrder: number;
    names: ITranslatedStringDictionary;
    /** Language specific names. */
    searchIndexId?: string | undefined;
    /** User roles granted access to the channel. */
    grantedUserRoleIds?: string[] | undefined;
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations?: AggregatorBase[] | undefined;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields?: string[] | undefined;
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns?: ITranslatedStringDictionary | undefined;
    /** Grants rights to all the users to view the channel. */
    viewForAll: boolean;
}

export class ChannelUpdateRequest implements IChannelUpdateRequest {
    sort?: SortInfo[] | undefined;
    sortOrder!: number;
    names!: TranslatedStringDictionary;
    /** Language specific names. */
    searchIndexId?: string | undefined;
    /** User roles granted access to the channel. */
    grantedUserRoleIds?: string[] | undefined;
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations?: AggregatorBase[] | undefined;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields?: string[] | undefined;
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns?: TranslatedStringDictionary | undefined;
    /** Grants rights to all the users to view the channel. */
    viewForAll!: boolean;

    constructor(data?: IChannelUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.missingResultsDisplayPatterns = data.missingResultsDisplayPatterns && !(<any>data.missingResultsDisplayPatterns).toJSON ? new TranslatedStringDictionary(data.missingResultsDisplayPatterns) : <TranslatedStringDictionary>this.missingResultsDisplayPatterns; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.sortOrder = data["sortOrder"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            this.searchIndexId = data["searchIndexId"];
            if (Array.isArray(data["grantedUserRoleIds"])) {
                this.grantedUserRoleIds = [] as any;
                for (let item of data["grantedUserRoleIds"])
                    this.grantedUserRoleIds!.push(item);
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            if (Array.isArray(data["extendedSimpleSearchFields"])) {
                this.extendedSimpleSearchFields = [] as any;
                for (let item of data["extendedSimpleSearchFields"])
                    this.extendedSimpleSearchFields!.push(item);
            }
            this.missingResultsDisplayPatterns = data["missingResultsDisplayPatterns"] ? TranslatedStringDictionary.fromJS(data["missingResultsDisplayPatterns"]) : <any>undefined;
            this.viewForAll = data["viewForAll"];
        }
    }

    static fromJS(data: any): ChannelUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["sortOrder"] = this.sortOrder;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["searchIndexId"] = this.searchIndexId;
        if (Array.isArray(this.grantedUserRoleIds)) {
            data["grantedUserRoleIds"] = [];
            for (let item of this.grantedUserRoleIds)
                data["grantedUserRoleIds"].push(item);
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        if (Array.isArray(this.extendedSimpleSearchFields)) {
            data["extendedSimpleSearchFields"] = [];
            for (let item of this.extendedSimpleSearchFields)
                data["extendedSimpleSearchFields"].push(item);
        }
        data["missingResultsDisplayPatterns"] = this.missingResultsDisplayPatterns ? this.missingResultsDisplayPatterns.toJSON() : <any>undefined;
        data["viewForAll"] = this.viewForAll;
        return data; 
    }
}

export interface IChannelUpdateRequest {
    sort?: ISortInfo[] | undefined;
    sortOrder: number;
    names: ITranslatedStringDictionary;
    /** Language specific names. */
    searchIndexId?: string | undefined;
    /** User roles granted access to the channel. */
    grantedUserRoleIds?: string[] | undefined;
    /** An optional list of aggregators. These aggregations are added by default on each aggregation requests. */
    aggregations?: AggregatorBase[] | undefined;
    /** An optional search filter. Limits the content document result set on each search and aggregation request. */
    filter?: FilterBase | undefined;
    /** An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration. */
    extendedSimpleSearchFields?: string[] | undefined;
    /** Display pattern to use for rendering details when 0 results are returned */
    missingResultsDisplayPatterns?: ITranslatedStringDictionary | undefined;
    /** Grants rights to all the users to view the channel. */
    viewForAll: boolean;
}

/** Content detail */
export class ContentDetail implements IContentDetail {
    /** The ID of the content schema. The SchemaType of the specified schema must be Content.
The schema specifies the structure of the Content dictionary. */
    contentSchemaId!: string;
    /** An optional list of IDs of the schemas that form the layers of the content.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** All the IDs of the referenced list items (tagboxes) that do not exist in the system. */
    brokenReferenceIds?: string[] | undefined;
    /** All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
They are referenced list items that reference at least a list item that do not exist in the system. */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** All the IDs of the contents or list items target of a relation that do not exist in the system. */
    brokenRelationTargetIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
by the ContentSchemaId property. */
    content?: any | undefined;
    /** The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** The content ID. */
    id!: string;
    /** An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;
    /** The Outputs generated from the content. They identifies the rendered files generated by the system.
They are available only for file base contents, and they depends on the output formats configured in the system. */
    outputs?: Output[] | undefined;
    /** Audit information. */
    audit?: UserAuditDetail | undefined;
    /** The owner token ID. Defines the content owner. */
    ownerTokenId!: string;
    /** The resolved owner. */
    owner?: User | undefined;
    /** Content type. */
    contentType!: ContentType;
    /** Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property. */
    displayValues?: DisplayValueDictionary | undefined;
    /** The actual lifecycle value of the content. Becomes Inactive when the content is deleted. */
    lifeCycle!: LifeCycle;
    /** List of content rights the user has on this content */
    contentRights?: ContentRight[] | undefined;

    constructor(data?: IContentDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
            this.owner = data.owner && !(<any>data.owner).toJSON ? new User(data.owner) : <User>this.owner; 
            this.displayValues = data.displayValues && !(<any>data.displayValues).toJSON ? new DisplayValueDictionary(data.displayValues) : <DisplayValueDictionary>this.displayValues; 
        }
    }

    init(data?: any) {
        if (data) {
            this.contentSchemaId = data["contentSchemaId"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (Array.isArray(data["brokenReferenceIds"])) {
                this.brokenReferenceIds = [] as any;
                for (let item of data["brokenReferenceIds"])
                    this.brokenReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenIndirectReferenceIds"])) {
                this.brokenIndirectReferenceIds = [] as any;
                for (let item of data["brokenIndirectReferenceIds"])
                    this.brokenIndirectReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenRelationTargetIds"])) {
                this.brokenRelationTargetIds = [] as any;
                for (let item of data["brokenRelationTargetIds"])
                    this.brokenRelationTargetIds!.push(item);
            }
            this.content = data["content"];
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            this.id = data["id"];
            if (Array.isArray(data["contentPermissionSetIds"])) {
                this.contentPermissionSetIds = [] as any;
                for (let item of data["contentPermissionSetIds"])
                    this.contentPermissionSetIds!.push(item);
            }
            if (Array.isArray(data["outputs"])) {
                this.outputs = [] as any;
                for (let item of data["outputs"])
                    this.outputs!.push(Output.fromJS(item));
            }
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
            this.ownerTokenId = data["ownerTokenId"];
            this.owner = data["owner"] ? User.fromJS(data["owner"]) : <any>undefined;
            this.contentType = data["contentType"];
            this.displayValues = data["displayValues"] ? DisplayValueDictionary.fromJS(data["displayValues"]) : <any>undefined;
            this.lifeCycle = data["lifeCycle"];
            if (Array.isArray(data["contentRights"])) {
                this.contentRights = [] as any;
                for (let item of data["contentRights"])
                    this.contentRights!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentSchemaId"] = this.contentSchemaId;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (Array.isArray(this.brokenReferenceIds)) {
            data["brokenReferenceIds"] = [];
            for (let item of this.brokenReferenceIds)
                data["brokenReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenIndirectReferenceIds)) {
            data["brokenIndirectReferenceIds"] = [];
            for (let item of this.brokenIndirectReferenceIds)
                data["brokenIndirectReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenRelationTargetIds)) {
            data["brokenRelationTargetIds"] = [];
            for (let item of this.brokenRelationTargetIds)
                data["brokenRelationTargetIds"].push(item);
        }
        data["content"] = this.content;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        data["id"] = this.id;
        if (Array.isArray(this.contentPermissionSetIds)) {
            data["contentPermissionSetIds"] = [];
            for (let item of this.contentPermissionSetIds)
                data["contentPermissionSetIds"].push(item);
        }
        if (Array.isArray(this.outputs)) {
            data["outputs"] = [];
            for (let item of this.outputs)
                data["outputs"].push(item.toJSON());
        }
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["ownerTokenId"] = this.ownerTokenId;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["contentType"] = this.contentType;
        data["displayValues"] = this.displayValues ? this.displayValues.toJSON() : <any>undefined;
        data["lifeCycle"] = this.lifeCycle;
        if (Array.isArray(this.contentRights)) {
            data["contentRights"] = [];
            for (let item of this.contentRights)
                data["contentRights"].push(item);
        }
        return data; 
    }
}

/** Content detail */
export interface IContentDetail {
    /** The ID of the content schema. The SchemaType of the specified schema must be Content.
The schema specifies the structure of the Content dictionary. */
    contentSchemaId: string;
    /** An optional list of IDs of the schemas that form the layers of the content.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** All the IDs of the referenced list items (tagboxes) that do not exist in the system. */
    brokenReferenceIds?: string[] | undefined;
    /** All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
They are referenced list items that reference at least a list item that do not exist in the system. */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** All the IDs of the contents or list items target of a relation that do not exist in the system. */
    brokenRelationTargetIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified.
by the ContentSchemaId property. */
    content?: any | undefined;
    /** The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** The content ID. */
    id: string;
    /** An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;
    /** The Outputs generated from the content. They identifies the rendered files generated by the system.
They are available only for file base contents, and they depends on the output formats configured in the system. */
    outputs?: Output[] | undefined;
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
    /** The owner token ID. Defines the content owner. */
    ownerTokenId: string;
    /** The resolved owner. */
    owner?: IUser | undefined;
    /** Content type. */
    contentType: ContentType;
    /** Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property. */
    displayValues?: IDisplayValueDictionary | undefined;
    /** The actual lifecycle value of the content. Becomes Inactive when the content is deleted. */
    lifeCycle: LifeCycle;
    /** List of content rights the user has on this content */
    contentRights?: ContentRight[] | undefined;
}

/** Output */
export class Output implements IOutput {
    /** The ID of the output. Can be null for dynamic outputs which are not rendered yet. */
    id?: string | undefined;
    /** The ID of the output format this output represents. */
    outputFormatId!: string;
    /** The ID of the content for which this output has been created. */
    contentId!: string;
    /** The rendering state of the output file. */
    renderingState!: OutputRenderingState;
    /** Detail of the output that are format dependent. */
    detail?: OutputDataBase | undefined;
    /** Date and time of the backup of the output file. */
    backupTimestamp?: Date | undefined;
    /** Number of rendering retry attempts left. */
    attemptsLeft!: number;
    /** Version counter incremented every time this output is rendered (or in case of Original when new original is uploaded). */
    fileVersion!: number;
    /** Whether this Output belongs to a dynamic OutputFormat */
    dynamicRendering!: boolean;

    protected _discriminator: string;

    constructor(data?: IOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Output";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.outputFormatId = data["outputFormatId"];
            this.contentId = data["contentId"];
            this.renderingState = data["renderingState"];
            this.detail = data["detail"] ? OutputDataBase.fromJS(data["detail"]) : <any>undefined;
            this.backupTimestamp = data["backupTimestamp"] ? new Date(data["backupTimestamp"].toString()) : <any>undefined;
            this.attemptsLeft = data["attemptsLeft"];
            this.fileVersion = data["fileVersion"];
            this.dynamicRendering = data["dynamicRendering"];
        }
    }

    static fromJS(data: any): Output {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "OutputDetail") {
            let result = new OutputDetail();
            result.init(data);
            return result;
        }
        let result = new Output();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["outputFormatId"] = this.outputFormatId;
        data["contentId"] = this.contentId;
        data["renderingState"] = this.renderingState;
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        data["backupTimestamp"] = this.backupTimestamp ? this.backupTimestamp.toISOString() : <any>undefined;
        data["attemptsLeft"] = this.attemptsLeft;
        data["fileVersion"] = this.fileVersion;
        data["dynamicRendering"] = this.dynamicRendering;
        return data; 
    }
}

/** Output */
export interface IOutput {
    /** The ID of the output. Can be null for dynamic outputs which are not rendered yet. */
    id?: string | undefined;
    /** The ID of the output format this output represents. */
    outputFormatId: string;
    /** The ID of the content for which this output has been created. */
    contentId: string;
    /** The rendering state of the output file. */
    renderingState: OutputRenderingState;
    /** Detail of the output that are format dependent. */
    detail?: OutputDataBase | undefined;
    /** Date and time of the backup of the output file. */
    backupTimestamp?: Date | undefined;
    /** Number of rendering retry attempts left. */
    attemptsLeft: number;
    /** Version counter incremented every time this output is rendered (or in case of Original when new original is uploaded). */
    fileVersion: number;
    /** Whether this Output belongs to a dynamic OutputFormat */
    dynamicRendering: boolean;
}

export enum OutputRenderingState {
    InProgress = "InProgress",
    Completed = "Completed",
    Failed = "Failed",
    Skipped = "Skipped",
    NoLicense = "NoLicense",
    RerenderRequested = "RerenderRequested",
}

/** Base class for the output detail dependent on the file format. */
export abstract class OutputDataBase implements IOutputDataBase {
    /** The extension of the file. */
    fileExtension?: string | undefined;
    /** The path where the file is stored. */
    filePath?: string | undefined;
    /** The size of the file in bytes. */
    fileSizeInBytes?: number | undefined;
    /** The SHA-1 hash of the file. */
    sha1Hash?: string | undefined;
    /** The original filename of the file. */
    originalFileName?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IOutputDataBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "OutputDataBase";
    }

    init(data?: any) {
        if (data) {
            this.fileExtension = data["fileExtension"];
            this.filePath = data["filePath"];
            this.fileSizeInBytes = data["fileSizeInBytes"];
            this.sha1Hash = data["sha1Hash"];
            this.originalFileName = data["originalFileName"];
        }
    }

    static fromJS(data: any): OutputDataBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "OutputDataImage") {
            let result = new OutputDataImage();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputDataAudio") {
            let result = new OutputDataAudio();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputDataVideo") {
            let result = new OutputDataVideo();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputDataDocument") {
            let result = new OutputDataDocument();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputDataDefault") {
            let result = new OutputDataDefault();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'OutputDataBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["fileExtension"] = this.fileExtension;
        data["filePath"] = this.filePath;
        data["fileSizeInBytes"] = this.fileSizeInBytes;
        data["sha1Hash"] = this.sha1Hash;
        data["originalFileName"] = this.originalFileName;
        return data; 
    }
}

/** Base class for the output detail dependent on the file format. */
export interface IOutputDataBase {
    /** The extension of the file. */
    fileExtension?: string | undefined;
    /** The path where the file is stored. */
    filePath?: string | undefined;
    /** The size of the file in bytes. */
    fileSizeInBytes?: number | undefined;
    /** The SHA-1 hash of the file. */
    sha1Hash?: string | undefined;
    /** The original filename of the file. */
    originalFileName?: string | undefined;
}

/** Output information for an image file. */
export class OutputDataImage extends OutputDataBase implements IOutputDataImage {
    /** The width of the image. */
    width!: number;
    /** The height of the image. */
    height!: number;

    constructor(data?: IOutputDataImage) {
        super(data);
        this._discriminator = "OutputDataImage";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.width = data["width"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): OutputDataImage {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDataImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        super.toJSON(data);
        return data; 
    }
}

/** Output information for an image file. */
export interface IOutputDataImage extends IOutputDataBase {
    /** The width of the image. */
    width: number;
    /** The height of the image. */
    height: number;
}

/** Output information for an audio file. */
export class OutputDataAudio extends OutputDataBase implements IOutputDataAudio {
    /** Duration of the audio stream in seconds. */
    durationInSeconds?: number | undefined;

    constructor(data?: IOutputDataAudio) {
        super(data);
        this._discriminator = "OutputDataAudio";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.durationInSeconds = data["durationInSeconds"];
        }
    }

    static fromJS(data: any): OutputDataAudio {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDataAudio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["durationInSeconds"] = this.durationInSeconds;
        super.toJSON(data);
        return data; 
    }
}

/** Output information for an audio file. */
export interface IOutputDataAudio extends IOutputDataBase {
    /** Duration of the audio stream in seconds. */
    durationInSeconds?: number | undefined;
}

/** Output information for a video file. */
export class OutputDataVideo extends OutputDataBase implements IOutputDataVideo {
    /** Duration of the video in seconds. */
    durationInSeconds!: number;
    /** With of the video. */
    width!: number;
    /** Height of the video. */
    height!: number;
    /** The sprites making up the key frames of the video. */
    sprites?: Sprite[] | undefined;

    constructor(data?: IOutputDataVideo) {
        super(data);
        if (data) {
            if (data.sprites) {
                this.sprites = [];
                for (let i = 0; i < data.sprites.length; i++) {
                    let item = data.sprites[i];
                    this.sprites[i] = item && !(<any>item).toJSON ? new Sprite(item) : <Sprite>item;
                }
            }
        }
        this._discriminator = "OutputDataVideo";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.durationInSeconds = data["durationInSeconds"];
            this.width = data["width"];
            this.height = data["height"];
            if (Array.isArray(data["sprites"])) {
                this.sprites = [] as any;
                for (let item of data["sprites"])
                    this.sprites!.push(Sprite.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputDataVideo {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDataVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["durationInSeconds"] = this.durationInSeconds;
        data["width"] = this.width;
        data["height"] = this.height;
        if (Array.isArray(this.sprites)) {
            data["sprites"] = [];
            for (let item of this.sprites)
                data["sprites"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Output information for a video file. */
export interface IOutputDataVideo extends IOutputDataBase {
    /** Duration of the video in seconds. */
    durationInSeconds: number;
    /** With of the video. */
    width: number;
    /** Height of the video. */
    height: number;
    /** The sprites making up the key frames of the video. */
    sprites?: ISprite[] | undefined;
}

/** The sprite of a video sprite */
export class Sprite implements ISprite {
    /** The width of the sprite. */
    width!: number;
    /** The height of the sprite. */
    height!: number;
    /** Y coordinate of the sprite in the saved file. */
    y!: number;
    /** X coordinate of the sprite in the saved file. */
    x!: number;
    /** The starting point in time of the sprite in the video. */
    start!: string;
    /** The ending point in time of the sprite in the video. */
    end!: string;

    constructor(data?: ISprite) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["width"];
            this.height = data["height"];
            this.y = data["y"];
            this.x = data["x"];
            this.start = data["start"];
            this.end = data["end"];
        }
    }

    static fromJS(data: any): Sprite {
        data = typeof data === 'object' ? data : {};
        let result = new Sprite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["y"] = this.y;
        data["x"] = this.x;
        data["start"] = this.start;
        data["end"] = this.end;
        return data; 
    }
}

/** The sprite of a video sprite */
export interface ISprite {
    /** The width of the sprite. */
    width: number;
    /** The height of the sprite. */
    height: number;
    /** Y coordinate of the sprite in the saved file. */
    y: number;
    /** X coordinate of the sprite in the saved file. */
    x: number;
    /** The starting point in time of the sprite in the video. */
    start: string;
    /** The ending point in time of the sprite in the video. */
    end: string;
}

/** Output information for a document file. */
export class OutputDataDocument extends OutputDataBase implements IOutputDataDocument {
    /** Number of document's pages. */
    pageCount!: number;

    constructor(data?: IOutputDataDocument) {
        super(data);
        this._discriminator = "OutputDataDocument";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.pageCount = data["pageCount"];
        }
    }

    static fromJS(data: any): OutputDataDocument {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDataDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageCount"] = this.pageCount;
        super.toJSON(data);
        return data; 
    }
}

/** Output information for a document file. */
export interface IOutputDataDocument extends IOutputDataBase {
    /** Number of document's pages. */
    pageCount: number;
}

/** Default output information */
export class OutputDataDefault extends OutputDataBase implements IOutputDataDefault {

    constructor(data?: IOutputDataDefault) {
        super(data);
        this._discriminator = "OutputDataDefault";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OutputDataDefault {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDataDefault();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Default output information */
export interface IOutputDataDefault extends IOutputDataBase {
}

/** Output detail */
export class OutputDetail extends Output implements IOutputDetail {

    constructor(data?: IOutputDetail) {
        super(data);
        this._discriminator = "OutputDetail";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OutputDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OutputDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Output detail */
export interface IOutputDetail extends IOutput {
}

/** Audit information */
export class UserAuditDetail implements IUserAuditDetail {
    /** The date on which the document was created. */
    creationDate!: Date;
    /** The last date on which the document was modified. */
    modificationDate!: Date;
    /** ID of the user who created the document. */
    createdByUser?: User | undefined;
    /** ID of the last user who modified the document. */
    modifiedByUser?: User | undefined;

    constructor(data?: IUserAuditDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.createdByUser = data.createdByUser && !(<any>data.createdByUser).toJSON ? new User(data.createdByUser) : <User>this.createdByUser; 
            this.modifiedByUser = data.modifiedByUser && !(<any>data.modifiedByUser).toJSON ? new User(data.modifiedByUser) : <User>this.modifiedByUser; 
        }
    }

    init(data?: any) {
        if (data) {
            this.creationDate = data["creationDate"] ? new Date(data["creationDate"].toString()) : <any>undefined;
            this.modificationDate = data["modificationDate"] ? new Date(data["modificationDate"].toString()) : <any>undefined;
            this.createdByUser = data["createdByUser"] ? User.fromJS(data["createdByUser"]) : <any>undefined;
            this.modifiedByUser = data["modifiedByUser"] ? User.fromJS(data["modifiedByUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserAuditDetail {
        data = typeof data === 'object' ? data : {};
        let result = new UserAuditDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>undefined;
        data["createdByUser"] = this.createdByUser ? this.createdByUser.toJSON() : <any>undefined;
        data["modifiedByUser"] = this.modifiedByUser ? this.modifiedByUser.toJSON() : <any>undefined;
        return data; 
    }
}

/** Audit information */
export interface IUserAuditDetail {
    /** The date on which the document was created. */
    creationDate: Date;
    /** The last date on which the document was modified. */
    modificationDate: Date;
    /** ID of the user who created the document. */
    createdByUser?: IUser | undefined;
    /** ID of the last user who modified the document. */
    modifiedByUser?: IUser | undefined;
}

export class User implements IUser {
    /** User's Picturepark ID. */
    id?: string | undefined;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress!: string;
    /** Marks a user that was deleted from the system. */
    isDeleted!: boolean;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.emailAddress = data["emailAddress"];
            this.isDeleted = data["isDeleted"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IUser {
    /** User's Picturepark ID. */
    id?: string | undefined;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress: string;
    /** Marks a user that was deleted from the system. */
    isDeleted: boolean;
}

export class DisplayValueDictionary implements IDisplayValueDictionary {

    [key: string]: string | any; 

    constructor(data?: IDisplayValueDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data: any): DisplayValueDictionary {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayValueDictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data; 
    }
}

export interface IDisplayValueDictionary {

    [key: string]: string | any; 
}

/** Lifecycle */
export enum LifeCycle {
    Draft = "Draft",
    Active = "Active",
    Inactive = "Inactive",
    Deleted = "Deleted",
}

export enum ContentResolveBehavior {
    Content = "Content",
    LinkedListItems = "LinkedListItems",
    Metadata = "Metadata",
    Outputs = "Outputs",
    InnerDisplayValueThumbnail = "InnerDisplayValueThumbnail",
    InnerDisplayValueList = "InnerDisplayValueList",
    InnerDisplayValueDetail = "InnerDisplayValueDetail",
    InnerDisplayValueName = "InnerDisplayValueName",
    Owner = "Owner",
    Permissions = "Permissions",
    OuterDisplayValueThumbnail = "OuterDisplayValueThumbnail",
    OuterDisplayValueList = "OuterDisplayValueList",
    OuterDisplayValueDetail = "OuterDisplayValueDetail",
    OuterDisplayValueName = "OuterDisplayValueName",
}

export class BaseResultOfContent implements IBaseResultOfContent {
    totalResults!: number;
    results!: Content[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new Content(item) : <Content>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(Content.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfContent {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfContent {
    totalResults: number;
    results: IContent[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfContent extends BaseResultOfContent implements ISearchBehaviorBaseResultOfContent {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfContent) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfContent {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfContent extends IBaseResultOfContent {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

export class SearchBehaviorWithAggregationBaseResultOfContent extends SearchBehaviorBaseResultOfContent implements ISearchBehaviorWithAggregationBaseResultOfContent {
    aggregationResults?: AggregationResult[] | undefined;

    constructor(data?: ISearchBehaviorWithAggregationBaseResultOfContent) {
        super(data);
        if (data) {
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchBehaviorWithAggregationBaseResultOfContent {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorWithAggregationBaseResultOfContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorWithAggregationBaseResultOfContent extends ISearchBehaviorBaseResultOfContent {
    aggregationResults?: IAggregationResult[] | undefined;
}

/** Result for content search operation */
export class ContentSearchResult extends SearchBehaviorWithAggregationBaseResultOfContent implements IContentSearchResult {
    /** Result of rights aggregation count requested in rightsAggregations in the ContentSearchRequest. */
    rightsAggregationsCounts?: ContentRightAggregationCount[] | undefined;

    constructor(data?: IContentSearchResult) {
        super(data);
        if (data) {
            if (data.rightsAggregationsCounts) {
                this.rightsAggregationsCounts = [];
                for (let i = 0; i < data.rightsAggregationsCounts.length; i++) {
                    let item = data.rightsAggregationsCounts[i];
                    this.rightsAggregationsCounts[i] = item && !(<any>item).toJSON ? new ContentRightAggregationCount(item) : <ContentRightAggregationCount>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["rightsAggregationsCounts"])) {
                this.rightsAggregationsCounts = [] as any;
                for (let item of data["rightsAggregationsCounts"])
                    this.rightsAggregationsCounts!.push(ContentRightAggregationCount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ContentSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rightsAggregationsCounts)) {
            data["rightsAggregationsCounts"] = [];
            for (let item of this.rightsAggregationsCounts)
                data["rightsAggregationsCounts"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Result for content search operation */
export interface IContentSearchResult extends ISearchBehaviorWithAggregationBaseResultOfContent {
    /** Result of rights aggregation count requested in rightsAggregations in the ContentSearchRequest. */
    rightsAggregationsCounts?: IContentRightAggregationCount[] | undefined;
}

/** Combination of ContentRight and found document count */
export class ContentRightAggregationCount implements IContentRightAggregationCount {
    /** ContentRight. */
    contentRight!: ContentRight;
    /** Found document count. */
    count!: number;

    constructor(data?: IContentRightAggregationCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentRight = data["contentRight"];
            this.count = data["count"];
        }
    }

    static fromJS(data: any): ContentRightAggregationCount {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRightAggregationCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentRight"] = this.contentRight;
        data["count"] = this.count;
        return data; 
    }
}

/** Combination of ContentRight and found document count */
export interface IContentRightAggregationCount {
    /** ContentRight. */
    contentRight: ContentRight;
    /** Found document count. */
    count: number;
}

/** Result of an aggregation */
export class AggregationResult implements IAggregationResult {
    /** Name of the aggregation. */
    name!: string;
    /** When there are lots of unique terms, Elastic Search only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response. */
    sumOtherDocCount?: number | undefined;
    /** Items returned for the aggregation. Each item consists of a bucket with the matched value and the number of matches.
Optionally inner aggregations for further drill down can be available. */
    aggregationResultItems?: AggregationResultItem[] | undefined;

    constructor(data?: IAggregationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.aggregationResultItems) {
                this.aggregationResultItems = [];
                for (let i = 0; i < data.aggregationResultItems.length; i++) {
                    let item = data.aggregationResultItems[i];
                    this.aggregationResultItems[i] = item && !(<any>item).toJSON ? new AggregationResultItem(item) : <AggregationResultItem>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.sumOtherDocCount = data["sumOtherDocCount"];
            if (Array.isArray(data["aggregationResultItems"])) {
                this.aggregationResultItems = [] as any;
                for (let item of data["aggregationResultItems"])
                    this.aggregationResultItems!.push(AggregationResultItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AggregationResult {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["sumOtherDocCount"] = this.sumOtherDocCount;
        if (Array.isArray(this.aggregationResultItems)) {
            data["aggregationResultItems"] = [];
            for (let item of this.aggregationResultItems)
                data["aggregationResultItems"].push(item.toJSON());
        }
        return data; 
    }
}

/** Result of an aggregation */
export interface IAggregationResult {
    /** Name of the aggregation. */
    name: string;
    /** When there are lots of unique terms, Elastic Search only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response. */
    sumOtherDocCount?: number | undefined;
    /** Items returned for the aggregation. Each item consists of a bucket with the matched value and the number of matches.
Optionally inner aggregations for further drill down can be available. */
    aggregationResultItems?: IAggregationResultItem[] | undefined;
}

/** Aggregation result item */
export class AggregationResultItem implements IAggregationResultItem {
    /** Value matched. */
    name!: string;
    /** Number of items matched. */
    count!: number;
    /** Ready to use filter to filter the data based on the aggregation result values.
It can be passed as one of the aggregation filters of an aggregation query: it returns documents meeting the aggregation condition. */
    filter?: AggregationFilter | undefined;
    /** True if the current result item matches on of the aggregation filters sent in the query. */
    active!: boolean;
    /** Inner aggregation results, if inner aggregations were provided in the query. */
    aggregationResults?: AggregationResult[] | undefined;

    getDisplayName(locale: string) {
        let displayName;

        // remove guid and show only owner name. example: name: "534e5b3763f242629eca53e764d713bf/cp support"
        if (this.filter && this.filter.aggregationName === 'ownerTokenId') {
          displayName = this.name.split("/").pop() || null;
        } else {
          displayName = this.filter && this.filter.filter ? this.filter.filter.getDisplayName(locale) : null;
        }
        
        return displayName ? displayName : this.name;
    }

    constructor(data?: IAggregationResultItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.count = data["count"];
            this.filter = data["filter"] ? AggregationFilter.fromJS(data["filter"]) : <any>undefined;
            this.active = data["active"];
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AggregationResultItem {
        data = typeof data === 'object' ? data : {};
        let result = new AggregationResultItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["active"] = this.active;
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        return data; 
    }
}

/** Aggregation result item */
export interface IAggregationResultItem {
    /** Value matched. */
    name: string;
    /** Number of items matched. */
    count: number;
    /** Ready to use filter to filter the data based on the aggregation result values.
It can be passed as one of the aggregation filters of an aggregation query: it returns documents meeting the aggregation condition. */
    filter?: AggregationFilter | undefined;
    /** True if the current result item matches on of the aggregation filters sent in the query. */
    active: boolean;
    /** Inner aggregation results, if inner aggregations were provided in the query. */
    aggregationResults?: IAggregationResult[] | undefined;
}

export class Content implements IContent {
    /** Audit information. */
    audit?: UserAudit | undefined;
    /** The id of the schema with schema type content. */
    contentSchemaId!: string;
    /** The content type of this content. All except Virtual are binary files. */
    contentType!: ContentType;
    /** An optional id list of schemas with schema type layer. */
    layerSchemaIds?: string[] | undefined;
    /** Contains display values of the specified language, rendered according to the content schema's display pattern configuration. */
    displayValues!: { [key: string] : string; };
    id!: string;
    /** All the ids of the broken references (tagboxes) */
    brokenReferenceIds?: string[] | undefined;
    /** All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox) */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** All the target ids of the broken relations */
    brokenRelationTargetIds?: string[] | undefined;

    constructor(data?: IContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
        if (!data) {
            this.displayValues = {};
        }
    }

    init(data?: any) {
        if (data) {
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : <any>undefined;
            this.contentSchemaId = data["contentSchemaId"];
            this.contentType = data["contentType"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (data["displayValues"]) {
                this.displayValues = {} as any;
                for (let key in data["displayValues"]) {
                    if (data["displayValues"].hasOwnProperty(key))
                        this.displayValues![key] = data["displayValues"][key];
                }
            }
            this.id = data["id"];
            if (Array.isArray(data["brokenReferenceIds"])) {
                this.brokenReferenceIds = [] as any;
                for (let item of data["brokenReferenceIds"])
                    this.brokenReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenIndirectReferenceIds"])) {
                this.brokenIndirectReferenceIds = [] as any;
                for (let item of data["brokenIndirectReferenceIds"])
                    this.brokenIndirectReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenRelationTargetIds"])) {
                this.brokenRelationTargetIds = [] as any;
                for (let item of data["brokenRelationTargetIds"])
                    this.brokenRelationTargetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): Content {
        data = typeof data === 'object' ? data : {};
        let result = new Content();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["contentSchemaId"] = this.contentSchemaId;
        data["contentType"] = this.contentType;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (this.displayValues) {
            data["displayValues"] = {};
            for (let key in this.displayValues) {
                if (this.displayValues.hasOwnProperty(key))
                    data["displayValues"][key] = this.displayValues[key];
            }
        }
        data["id"] = this.id;
        if (Array.isArray(this.brokenReferenceIds)) {
            data["brokenReferenceIds"] = [];
            for (let item of this.brokenReferenceIds)
                data["brokenReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenIndirectReferenceIds)) {
            data["brokenIndirectReferenceIds"] = [];
            for (let item of this.brokenIndirectReferenceIds)
                data["brokenIndirectReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenRelationTargetIds)) {
            data["brokenRelationTargetIds"] = [];
            for (let item of this.brokenRelationTargetIds)
                data["brokenRelationTargetIds"].push(item);
        }
        return data; 
    }
}

export interface IContent {
    /** Audit information. */
    audit?: IUserAudit | undefined;
    /** The id of the schema with schema type content. */
    contentSchemaId: string;
    /** The content type of this content. All except Virtual are binary files. */
    contentType: ContentType;
    /** An optional id list of schemas with schema type layer. */
    layerSchemaIds?: string[] | undefined;
    /** Contains display values of the specified language, rendered according to the content schema's display pattern configuration. */
    displayValues: { [key: string] : string; };
    id: string;
    /** All the ids of the broken references (tagboxes) */
    brokenReferenceIds?: string[] | undefined;
    /** All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox) */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** All the target ids of the broken relations */
    brokenRelationTargetIds?: string[] | undefined;
}

/** Request to aggregate contents based on the aggregators defined on a channel */
export class ContentAggregationOnChannelRequest implements IContentAggregationOnChannelRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    /** Limits the simple search fields to the fields available in the specified channel. Defaults to RootChannel.
For the ContentAggregationOnChannelRequest only, the existing aggregation saved on the channel are retrieved and used to perform the aggregation. */
    channelId?: string | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limit the search to the contents belonging to the specified collection. */
    collectionId?: string | undefined;
    /** Limits the aggregation to the contents that have the specified life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter!: LifeCycleFilter;
    /** Limits the aggregation to the contents that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter!: BrokenDependenciesFilter;
    /** Type of search to be performed: search only in metadata, only in the extracted fulltext from the file or both. Default to Metadata. */
    searchType!: ContentSearchType;

    constructor(data?: IContentAggregationOnChannelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            if (Array.isArray(data["aggregationFilters"])) {
                this.aggregationFilters = [] as any;
                for (let item of data["aggregationFilters"])
                    this.aggregationFilters!.push(AggregationFilter.fromJS(item));
            }
            this.channelId = data["channelId"];
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            this.collectionId = data["collectionId"];
            this.lifeCycleFilter = data["lifeCycleFilter"];
            this.brokenDependenciesFilter = data["brokenDependenciesFilter"];
            this.searchType = data["searchType"];
        }
    }

    static fromJS(data: any): ContentAggregationOnChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentAggregationOnChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        if (Array.isArray(this.aggregationFilters)) {
            data["aggregationFilters"] = [];
            for (let item of this.aggregationFilters)
                data["aggregationFilters"].push(item.toJSON());
        }
        data["channelId"] = this.channelId;
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        data["collectionId"] = this.collectionId;
        data["lifeCycleFilter"] = this.lifeCycleFilter;
        data["brokenDependenciesFilter"] = this.brokenDependenciesFilter;
        data["searchType"] = this.searchType;
        return data; 
    }
}

/** Request to aggregate contents based on the aggregators defined on a channel */
export interface IContentAggregationOnChannelRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    /** Limits the simple search fields to the fields available in the specified channel. Defaults to RootChannel.
For the ContentAggregationOnChannelRequest only, the existing aggregation saved on the channel are retrieved and used to perform the aggregation. */
    channelId?: string | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limit the search to the contents belonging to the specified collection. */
    collectionId?: string | undefined;
    /** Limits the aggregation to the contents that have the specified life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter: LifeCycleFilter;
    /** Limits the aggregation to the contents that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter: BrokenDependenciesFilter;
    /** Type of search to be performed: search only in metadata, only in the extracted fulltext from the file or both. Default to Metadata. */
    searchType: ContentSearchType;
}

/** Request to search contents */
export class ContentSearchRequest extends ContentAggregationOnChannelRequest implements IContentSearchRequest {
    /** Limits the display values included in the search response. Defaults to all display values. */
    displayPatternIds?: string[] | undefined;
    /** Sorts the search results. Sorting on a field not marked as Sortable in the Content schema will throw an exception. */
    sort?: SortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Limits the contents to the ones the user has the specified ContentRights. */
    rightsFilter?: ContentRight[] | undefined;
    /** Returns the aggregated document counts to the ones the user has the specified ContentRights.
Produces the rightsAggregationCounts on the ContentSearchResult. View will be ignored as the totalResults already gives this information. */
    rightsAggregations?: ContentRight[] | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ContentSearchResult.
Warning! It severely affects performance. */
    debugMode!: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;

    constructor(data?: IContentSearchRequest) {
        super(data);
        if (data) {
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["displayPatternIds"])) {
                this.displayPatternIds = [] as any;
                for (let item of data["displayPatternIds"])
                    this.displayPatternIds!.push(item);
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            if (Array.isArray(data["rightsFilter"])) {
                this.rightsFilter = [] as any;
                for (let item of data["rightsFilter"])
                    this.rightsFilter!.push(item);
            }
            if (Array.isArray(data["rightsAggregations"])) {
                this.rightsAggregations = [] as any;
                for (let item of data["rightsAggregations"])
                    this.rightsAggregations!.push(item);
            }
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.displayPatternIds)) {
            data["displayPatternIds"] = [];
            for (let item of this.displayPatternIds)
                data["displayPatternIds"].push(item);
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        if (Array.isArray(this.rightsFilter)) {
            data["rightsFilter"] = [];
            for (let item of this.rightsFilter)
                data["rightsFilter"].push(item);
        }
        if (Array.isArray(this.rightsAggregations)) {
            data["rightsAggregations"] = [];
            for (let item of this.rightsAggregations)
                data["rightsAggregations"].push(item);
        }
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to search contents */
export interface IContentSearchRequest extends IContentAggregationOnChannelRequest {
    /** Limits the display values included in the search response. Defaults to all display values. */
    displayPatternIds?: string[] | undefined;
    /** Sorts the search results. Sorting on a field not marked as Sortable in the Content schema will throw an exception. */
    sort?: ISortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Limits the contents to the ones the user has the specified ContentRights. */
    rightsFilter?: ContentRight[] | undefined;
    /** Returns the aggregated document counts to the ones the user has the specified ContentRights.
Produces the rightsAggregationCounts on the ContentSearchResult. View will be ignored as the totalResults already gives this information. */
    rightsAggregations?: ContentRight[] | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ContentSearchResult.
Warning! It severely affects performance. */
    debugMode: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;
}

export enum LifeCycleFilter {
    ActiveOnly = "ActiveOnly",
    All = "All",
    InactiveOnly = "InactiveOnly",
    ActiveInactiveOnly = "ActiveInactiveOnly",
}

/** Filter items with broken or not broken dependencies */
export enum BrokenDependenciesFilter {
    All = "All",
    NotBrokenOnly = "NotBrokenOnly",
    BrokenOnly = "BrokenOnly",
}

export enum ContentSearchType {
    Metadata = "Metadata",
    FullText = "FullText",
    MetadataAndFullText = "MetadataAndFullText",
}

/** Result for an aggregation operation */
export class ObjectAggregationResult implements IObjectAggregationResult {
    /** How long did the search and aggregation took. */
    elapsedMilliseconds!: number;
    /** Results of the aggregation. */
    aggregationResults!: AggregationResult[];
    /** Search string used to query the data */
    searchString?: string | undefined;
    /** Flag to notify if the SearchString was modified compared to the original requested one. */
    isSearchStringRewritten!: boolean;
    /** Additional information regarding the query execution and reason of the matched documents. */
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: IObjectAggregationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
        if (!data) {
            this.aggregationResults = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ObjectAggregationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectAggregationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result for an aggregation operation */
export interface IObjectAggregationResult {
    /** How long did the search and aggregation took. */
    elapsedMilliseconds: number;
    /** Results of the aggregation. */
    aggregationResults: IAggregationResult[];
    /** Search string used to query the data */
    searchString?: string | undefined;
    /** Flag to notify if the SearchString was modified compared to the original requested one. */
    isSearchStringRewritten: boolean;
    /** Additional information regarding the query execution and reason of the matched documents. */
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Request to aggregate contents based on the specified aggregators */
export class ContentAggregationRequest extends ContentAggregationOnChannelRequest implements IContentAggregationRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators!: AggregatorBase[];

    constructor(data?: IContentAggregationRequest) {
        super(data);
        if (!data) {
            this.aggregators = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentAggregationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentAggregationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to aggregate contents based on the specified aggregators */
export interface IContentAggregationRequest extends IContentAggregationOnChannelRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators: AggregatorBase[];
}

/** Result to a get content references operation */
export class ContentReferencesResult implements IContentReferencesResult {
    /** List of references. Only available when requested in the request. */
    metadataReferences?: MetadataReferenceResult | undefined;
    /** List of share references */
    shareReferences?: ContentShareReferenceResult | undefined;

    constructor(data?: IContentReferencesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.metadataReferences = data.metadataReferences && !(<any>data.metadataReferences).toJSON ? new MetadataReferenceResult(data.metadataReferences) : <MetadataReferenceResult>this.metadataReferences; 
            this.shareReferences = data.shareReferences && !(<any>data.shareReferences).toJSON ? new ContentShareReferenceResult(data.shareReferences) : <ContentShareReferenceResult>this.shareReferences; 
        }
    }

    init(data?: any) {
        if (data) {
            this.metadataReferences = data["metadataReferences"] ? MetadataReferenceResult.fromJS(data["metadataReferences"]) : <any>undefined;
            this.shareReferences = data["shareReferences"] ? ContentShareReferenceResult.fromJS(data["shareReferences"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContentReferencesResult {
        data = typeof data === 'object' ? data : {};
        let result = new ContentReferencesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metadataReferences"] = this.metadataReferences ? this.metadataReferences.toJSON() : <any>undefined;
        data["shareReferences"] = this.shareReferences ? this.shareReferences.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result to a get content references operation */
export interface IContentReferencesResult {
    /** List of references. Only available when requested in the request. */
    metadataReferences?: IMetadataReferenceResult | undefined;
    /** List of share references */
    shareReferences?: IContentShareReferenceResult | undefined;
}

export class BaseResultOfMetadataReference implements IBaseResultOfMetadataReference {
    totalResults!: number;
    results!: MetadataReference[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfMetadataReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new MetadataReference(item) : <MetadataReference>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(MetadataReference.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfMetadataReference {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfMetadataReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfMetadataReference {
    totalResults: number;
    results: IMetadataReference[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

/** Result for getting references. */
export class MetadataReferenceResult extends BaseResultOfMetadataReference implements IMetadataReferenceResult {
    /** Indicates if any reference is originating from an item that the current user does not have access to. */
    isReferencedByRestrictedItem?: boolean | undefined;

    constructor(data?: IMetadataReferenceResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isReferencedByRestrictedItem = data["isReferencedByRestrictedItem"];
        }
    }

    static fromJS(data: any): MetadataReferenceResult {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataReferenceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isReferencedByRestrictedItem"] = this.isReferencedByRestrictedItem;
        super.toJSON(data);
        return data; 
    }
}

/** Result for getting references. */
export interface IMetadataReferenceResult extends IBaseResultOfMetadataReference {
    /** Indicates if any reference is originating from an item that the current user does not have access to. */
    isReferencedByRestrictedItem?: boolean | undefined;
}

/** Reference to a metadata item */
export class MetadataReference implements IMetadataReference {
    /** Target ID of reference. */
    targetMetadataItemId!: string;
    /** Indicates if the source of the reference is restricted because of permissions.
If this is true and the SourceMetadataItemId property is filled, the user does not have the
edit permission on the source metadata item. If the SourceMetadataItemId is null, the user also
does not have the view permission on that item. */
    isRestricted!: boolean;
    /** ID of the source of the reference. */
    sourceMetadataItemId?: string | undefined;
    /** DocType of the source of the reference. */
    sourceDocType?: string | undefined;

    constructor(data?: IMetadataReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetMetadataItemId = data["targetMetadataItemId"];
            this.isRestricted = data["isRestricted"];
            this.sourceMetadataItemId = data["sourceMetadataItemId"];
            this.sourceDocType = data["sourceDocType"];
        }
    }

    static fromJS(data: any): MetadataReference {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetMetadataItemId"] = this.targetMetadataItemId;
        data["isRestricted"] = this.isRestricted;
        data["sourceMetadataItemId"] = this.sourceMetadataItemId;
        data["sourceDocType"] = this.sourceDocType;
        return data; 
    }
}

/** Reference to a metadata item */
export interface IMetadataReference {
    /** Target ID of reference. */
    targetMetadataItemId: string;
    /** Indicates if the source of the reference is restricted because of permissions.
If this is true and the SourceMetadataItemId property is filled, the user does not have the
edit permission on the source metadata item. If the SourceMetadataItemId is null, the user also
does not have the view permission on that item. */
    isRestricted: boolean;
    /** ID of the source of the reference. */
    sourceMetadataItemId?: string | undefined;
    /** DocType of the source of the reference. */
    sourceDocType?: string | undefined;
}

export class BaseResultOfContentShareReference implements IBaseResultOfContentShareReference {
    totalResults!: number;
    results!: ContentShareReference[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfContentShareReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new ContentShareReference(item) : <ContentShareReference>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(ContentShareReference.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfContentShareReference {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfContentShareReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfContentShareReference {
    totalResults: number;
    results: IContentShareReference[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

/** Result class for share reference search */
export class ContentShareReferenceResult extends BaseResultOfContentShareReference implements IContentShareReferenceResult {

    constructor(data?: IContentShareReferenceResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentShareReferenceResult {
        data = typeof data === 'object' ? data : {};
        let result = new ContentShareReferenceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result class for share reference search */
export interface IContentShareReferenceResult extends IBaseResultOfContentShareReference {
}

/** Share information for a share referencing a content */
export class ContentShareReference implements IContentShareReference {
    /** ID of the share. */
    id?: string | undefined;
    /** Name of the share. */
    name?: string | undefined;
    /** Audit information. */
    audit?: UserAudit | undefined;
    /** Type of the share. */
    shareType!: ShareType;
    /** The email address of the user who created the share. */
    emailAddress?: string | undefined;

    constructor(data?: IContentShareReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : <any>undefined;
            this.shareType = data["shareType"];
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): ContentShareReference {
        data = typeof data === 'object' ? data : {};
        let result = new ContentShareReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["shareType"] = this.shareType;
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

/** Share information for a share referencing a content */
export interface IContentShareReference {
    /** ID of the share. */
    id?: string | undefined;
    /** Name of the share. */
    name?: string | undefined;
    /** Audit information. */
    audit?: IUserAudit | undefined;
    /** Type of the share. */
    shareType: ShareType;
    /** The email address of the user who created the share. */
    emailAddress?: string | undefined;
}

export enum ShareType {
    Basic = "Basic",
    Embed = "Embed",
}

/** Request to get the references to a content */
export class ContentReferencesRequest implements IContentReferencesRequest {
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: MetadataReferencesPagingRequest | undefined;
    /** Limits the number of the returned share references by setting paging information. */
    shares?: PagingRequest | undefined;

    constructor(data?: IContentReferencesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.references = data.references && !(<any>data.references).toJSON ? new MetadataReferencesPagingRequest(data.references) : <MetadataReferencesPagingRequest>this.references; 
            this.shares = data.shares && !(<any>data.shares).toJSON ? new PagingRequest(data.shares) : <PagingRequest>this.shares; 
        }
    }

    init(data?: any) {
        if (data) {
            this.references = data["references"] ? MetadataReferencesPagingRequest.fromJS(data["references"]) : <any>undefined;
            this.shares = data["shares"] ? PagingRequest.fromJS(data["shares"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContentReferencesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentReferencesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["references"] = this.references ? this.references.toJSON() : <any>undefined;
        data["shares"] = this.shares ? this.shares.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to get the references to a content */
export interface IContentReferencesRequest {
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: IMetadataReferencesPagingRequest | undefined;
    /** Limits the number of the returned share references by setting paging information. */
    shares?: IPagingRequest | undefined;
}

/** Request to page data */
export class PagingRequest implements IPagingRequest {
    /** Limits the number of the returned schemas. Defaults to 0. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;

    constructor(data?: IPagingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): PagingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PagingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

/** Request to page data */
export interface IPagingRequest {
    /** Limits the number of the returned schemas. Defaults to 0. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
}

/** Request to get paginated metadata references */
export class MetadataReferencesPagingRequest extends PagingRequest implements IMetadataReferencesPagingRequest {
    /** Set to true to check if any incoming references are originating from an item the current user does not have full access to. */
    fetchReferencedByRestrictedItem!: boolean;

    constructor(data?: IMetadataReferencesPagingRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fetchReferencedByRestrictedItem = data["fetchReferencedByRestrictedItem"];
        }
    }

    static fromJS(data: any): MetadataReferencesPagingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataReferencesPagingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fetchReferencedByRestrictedItem"] = this.fetchReferencedByRestrictedItem;
        super.toJSON(data);
        return data; 
    }
}

/** Request to get paginated metadata references */
export interface IMetadataReferencesPagingRequest extends IPagingRequest {
    /** Set to true to check if any incoming references are originating from an item the current user does not have full access to. */
    fetchReferencedByRestrictedItem: boolean;
}

/** Request to get multiple contents' references */
export class ContentManyReferencesRequest implements IContentManyReferencesRequest {
    /** The IDs of the contents whose references need to be retrieved. */
    contentIds!: string[];
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: MetadataReferencesPagingRequest | undefined;
    /** Limits the number of the returned share references by setting paging information. */
    shares?: PagingRequest | undefined;

    constructor(data?: IContentManyReferencesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.references = data.references && !(<any>data.references).toJSON ? new MetadataReferencesPagingRequest(data.references) : <MetadataReferencesPagingRequest>this.references; 
            this.shares = data.shares && !(<any>data.shares).toJSON ? new PagingRequest(data.shares) : <PagingRequest>this.shares; 
        }
        if (!data) {
            this.contentIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            this.references = data["references"] ? MetadataReferencesPagingRequest.fromJS(data["references"]) : <any>undefined;
            this.shares = data["shares"] ? PagingRequest.fromJS(data["shares"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContentManyReferencesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentManyReferencesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        data["references"] = this.references ? this.references.toJSON() : <any>undefined;
        data["shares"] = this.shares ? this.shares.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to get multiple contents' references */
export interface IContentManyReferencesRequest {
    /** The IDs of the contents whose references need to be retrieved. */
    contentIds: string[];
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: IMetadataReferencesPagingRequest | undefined;
    /** Limits the number of the returned share references by setting paging information. */
    shares?: IPagingRequest | undefined;
}

/** Download link information */
export class DownloadLink implements IDownloadLink {
    /** Token of the download, used to generate the url. */
    downloadToken!: string;
    /** Url of the download link. */
    downloadUrl!: string;

    constructor(data?: IDownloadLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.downloadToken = data["downloadToken"];
            this.downloadUrl = data["downloadUrl"];
        }
    }

    static fromJS(data: any): DownloadLink {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["downloadToken"] = this.downloadToken;
        data["downloadUrl"] = this.downloadUrl;
        return data; 
    }
}

/** Download link information */
export interface IDownloadLink {
    /** Token of the download, used to generate the url. */
    downloadToken: string;
    /** Url of the download link. */
    downloadUrl: string;
}

/** Request to create a content download link */
export class ContentDownloadLinkCreateRequest implements IContentDownloadLinkCreateRequest {
    /** List of content information to generate the download link */
    contents!: ContentDownloadRequestItem[];

    constructor(data?: IContentDownloadLinkCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.contents) {
                this.contents = [];
                for (let i = 0; i < data.contents.length; i++) {
                    let item = data.contents[i];
                    this.contents[i] = item && !(<any>item).toJSON ? new ContentDownloadRequestItem(item) : <ContentDownloadRequestItem>item;
                }
            }
        }
        if (!data) {
            this.contents = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contents"])) {
                this.contents = [] as any;
                for (let item of data["contents"])
                    this.contents!.push(ContentDownloadRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentDownloadLinkCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDownloadLinkCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contents)) {
            data["contents"] = [];
            for (let item of this.contents)
                data["contents"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to create a content download link */
export interface IContentDownloadLinkCreateRequest {
    /** List of content information to generate the download link */
    contents: IContentDownloadRequestItem[];
}

/** Information needed to generate a content download link */
export class ContentDownloadRequestItem implements IContentDownloadRequestItem {
    /** ID of the content that is going to be downloaded. */
    contentId!: string;
    /** ID of the output format that is going to be downloaded. */
    outputFormatId!: string;

    constructor(data?: IContentDownloadRequestItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
        }
    }

    static fromJS(data: any): ContentDownloadRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDownloadRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        return data; 
    }
}

/** Information needed to generate a content download link */
export interface IContentDownloadRequestItem {
    /** ID of the content that is going to be downloaded. */
    contentId: string;
    /** ID of the output format that is going to be downloaded. */
    outputFormatId: string;
}

/** Values that represent thumbnail sizes. */
export enum ThumbnailSize {
    Small = "Small",
    Medium = "Medium",
    Large = "Large",
}

/** Request to create a content */
export class ContentCreateRequest implements IContentCreateRequest {
    /** The ID of the content schema. The SchemaType of the specified schema must be Content.
The schema specifies the structure of the Content dictionary. */
    contentSchemaId!: string;
    /** An optional list of IDs of the schemas that form the layers of the content.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by the ContentSchemaId property. */
    content?: any | undefined;
    /** The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;

    constructor(data?: IContentCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentSchemaId = data["contentSchemaId"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.content = data["content"];
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            if (Array.isArray(data["contentPermissionSetIds"])) {
                this.contentPermissionSetIds = [] as any;
                for (let item of data["contentPermissionSetIds"])
                    this.contentPermissionSetIds!.push(item);
            }
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): ContentCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentSchemaId"] = this.contentSchemaId;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["content"] = this.content;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        if (Array.isArray(this.contentPermissionSetIds)) {
            data["contentPermissionSetIds"] = [];
            for (let item of this.contentPermissionSetIds)
                data["contentPermissionSetIds"].push(item);
        }
        data["requestId"] = this.requestId;
        return data; 
    }
}

/** Request to create a content */
export interface IContentCreateRequest {
    /** The ID of the content schema. The SchemaType of the specified schema must be Content.
The schema specifies the structure of the Content dictionary. */
    contentSchemaId: string;
    /** An optional list of IDs of the schemas that form the layers of the content.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by the ContentSchemaId property. */
    content?: any | undefined;
    /** The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional list of content permission set IDs which control content permissions. These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;
}

/** Request to create multiple contents */
export class ContentCreateManyRequest implements IContentCreateManyRequest {
    /** Allows creating contents that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;
    /** Items to be created. */
    items!: ContentCreateRequest[];

    constructor(data?: IContentCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new ContentCreateRequest(item) : <ContentCreateRequest>item;
                }
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.allowMissingDependencies = data["allowMissingDependencies"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to create multiple contents */
export interface IContentCreateManyRequest {
    /** Allows creating contents that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
    /** Items to be created. */
    items: IContentCreateRequest[];
}

/** Request to delete multiple contents. */
export class ContentDeleteManyRequest implements IContentDeleteManyRequest {
    /** IDs of the contents to delete. */
    contentIds!: string[];
    /** A value indicating whether references to the contents should be removed. */
    forceReferenceRemoval!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress!: boolean;

    constructor(data?: IContentDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.contentIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            this.forceReferenceRemoval = data["forceReferenceRemoval"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ContentDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        data["forceReferenceRemoval"] = this.forceReferenceRemoval;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to delete multiple contents. */
export interface IContentDeleteManyRequest {
    /** IDs of the contents to delete. */
    contentIds: string[];
    /** A value indicating whether references to the contents should be removed. */
    forceReferenceRemoval: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress: boolean;
}

/** Request to delete multiple contents based on a provided filter */
export class ContentDeleteManyFilterRequest implements IContentDeleteManyFilterRequest {
    /** Filters the contents that need to be deleted. */
    filterRequest!: ContentFilterRequest;
    /** A value indicating whether references to the content items should be removed. */
    forceReferenceRemoval!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress!: boolean;

    constructor(data?: IContentDeleteManyFilterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.filterRequest = data.filterRequest && !(<any>data.filterRequest).toJSON ? new ContentFilterRequest(data.filterRequest) : <ContentFilterRequest>this.filterRequest; 
        }
        if (!data) {
            this.filterRequest = new ContentFilterRequest();
        }
    }

    init(data?: any) {
        if (data) {
            this.filterRequest = data["filterRequest"] ? ContentFilterRequest.fromJS(data["filterRequest"]) : new ContentFilterRequest();
            this.forceReferenceRemoval = data["forceReferenceRemoval"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ContentDeleteManyFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDeleteManyFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterRequest"] = this.filterRequest ? this.filterRequest.toJSON() : <any>undefined;
        data["forceReferenceRemoval"] = this.forceReferenceRemoval;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to delete multiple contents based on a provided filter */
export interface IContentDeleteManyFilterRequest {
    /** Filters the contents that need to be deleted. */
    filterRequest: IContentFilterRequest;
    /** A value indicating whether references to the content items should be removed. */
    forceReferenceRemoval: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress: boolean;
}

export class ContentFilterRequest implements IContentFilterRequest {
    /** Limits the simple search fields to the fields available in the specified channel. */
    channelId?: string | undefined;
    /** Only searches the specified language values. Defaults to all metadata languages of the language configuration. */
    searchLanguages?: string[] | undefined;
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata. */
    searchType!: ContentSearchType;
    /** The collection id. */
    collectionId?: string | undefined;
    /** An optional search filter. Limits the content document result set. */
    filter?: FilterBase | undefined;
    /** Limits the content document result set to that life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter!: LifeCycleFilter;
    /** Filter the content document result set to those that have or not have broken references */
    brokenDependenciesFilter!: BrokenDependenciesFilter;
    /** Limits the content document result set to specific ContentRights the user has */
    rightsFilter?: ContentRight[] | undefined;

    constructor(data?: IContentFilterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.channelId = data["channelId"];
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            this.searchString = data["searchString"];
            this.searchType = data["searchType"];
            this.collectionId = data["collectionId"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.lifeCycleFilter = data["lifeCycleFilter"];
            this.brokenDependenciesFilter = data["brokenDependenciesFilter"];
            if (Array.isArray(data["rightsFilter"])) {
                this.rightsFilter = [] as any;
                for (let item of data["rightsFilter"])
                    this.rightsFilter!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        data["searchString"] = this.searchString;
        data["searchType"] = this.searchType;
        data["collectionId"] = this.collectionId;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["lifeCycleFilter"] = this.lifeCycleFilter;
        data["brokenDependenciesFilter"] = this.brokenDependenciesFilter;
        if (Array.isArray(this.rightsFilter)) {
            data["rightsFilter"] = [];
            for (let item of this.rightsFilter)
                data["rightsFilter"].push(item);
        }
        return data; 
    }
}

export interface IContentFilterRequest {
    /** Limits the simple search fields to the fields available in the specified channel. */
    channelId?: string | undefined;
    /** Only searches the specified language values. Defaults to all metadata languages of the language configuration. */
    searchLanguages?: string[] | undefined;
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata. */
    searchType: ContentSearchType;
    /** The collection id. */
    collectionId?: string | undefined;
    /** An optional search filter. Limits the content document result set. */
    filter?: FilterBase | undefined;
    /** Limits the content document result set to that life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter: LifeCycleFilter;
    /** Filter the content document result set to those that have or not have broken references */
    brokenDependenciesFilter: BrokenDependenciesFilter;
    /** Limits the content document result set to specific ContentRights the user has */
    rightsFilter?: ContentRight[] | undefined;
}

/** Request to restore multiple contents */
export class ContentRestoreManyRequest implements IContentRestoreManyRequest {
    /** IDs of the contents to restore. */
    contentIds!: string[];
    /** Allows creating contents that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;

    constructor(data?: IContentRestoreManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.contentIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            this.allowMissingDependencies = data["allowMissingDependencies"];
        }
    }

    static fromJS(data: any): ContentRestoreManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentRestoreManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        return data; 
    }
}

/** Request to restore multiple contents */
export interface IContentRestoreManyRequest {
    /** IDs of the contents to restore. */
    contentIds: string[];
    /** Allows creating contents that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
}

/** Request to update a content file */
export class ContentFileUpdateRequest implements IContentFileUpdateRequest {
    /** ID of the file transfer to use to replace the content file. */
    fileTransferId!: string;

    constructor(data?: IContentFileUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileTransferId = data["fileTransferId"];
        }
    }

    static fromJS(data: any): ContentFileUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFileUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileTransferId"] = this.fileTransferId;
        return data; 
    }
}

/** Request to update a content file */
export interface IContentFileUpdateRequest {
    /** ID of the file transfer to use to replace the content file. */
    fileTransferId: string;
}

/** Request to update content metadata */
export class ContentMetadataUpdateRequest implements IContentMetadataUpdateRequest {
    /** An optional list of IDs of the schemas that should be updated/replaced based on the options below and Metadata provided.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by
the ContentSchemaId property. Updating the Content property is only possible for virtual items (contents
whose ContentType is Virtual).
Update of content data will be done only if this attribute has any data, i.e. if it's not null or empty. */
    content?: any | undefined;
    /** The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property.
If there are no data for a specified LayerSchemaId, it is treated as empty. */
    metadata?: { [key: string] : any; } | undefined;
    /** Options to modify the behavior for updating the layers.
Merge: the content is updated so that the assigned layers to the content will be a merge of the ones specified in the LayerSchemaIds property
and the ones already existing; existing assigned layers not specified in the property are kept and missing layers are assigned.
Replace: the content is updated so that only the layers specified in the LayerSchemaIds property are assigned to the content;
existing assigned layers not specified in the property are removed and missing layers are assigned.
Defaults to Merge. */
    layerSchemasUpdateOptions!: UpdateOption;
    /** Options to modify the behavior for updating the values of schemas.
Merge: the values specified in the Metadata dictionary are merged to the existing values of the corresponding schema on the content.
Replace: the values specified in the Metadata dictionary entirely replace any existing value of the corresponding schema on the content.
Defaults to Merge. */
    layerFieldsUpdateOptions!: UpdateOption;
    /** Options to modify the behavior for updating the content.
Merge: the values specified in the Content object are merged to the existing content.
Replace: the values specified in the Content object entirely replace the content.
Defaults to Merge. */
    contentFieldsUpdateOptions!: UpdateOption;

    constructor(data?: IContentMetadataUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.content = data["content"];
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            this.layerSchemasUpdateOptions = data["layerSchemasUpdateOptions"];
            this.layerFieldsUpdateOptions = data["layerFieldsUpdateOptions"];
            this.contentFieldsUpdateOptions = data["contentFieldsUpdateOptions"];
        }
    }

    static fromJS(data: any): ContentMetadataUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMetadataUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["content"] = this.content;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        data["layerSchemasUpdateOptions"] = this.layerSchemasUpdateOptions;
        data["layerFieldsUpdateOptions"] = this.layerFieldsUpdateOptions;
        data["contentFieldsUpdateOptions"] = this.contentFieldsUpdateOptions;
        return data; 
    }
}

/** Request to update content metadata */
export interface IContentMetadataUpdateRequest {
    /** An optional list of IDs of the schemas that should be updated/replaced based on the options below and Metadata provided.
The SchemaType of the specified schemas must be Layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data of the content. It's an object of dynamic metadata whose structure is defined in the Content schema identified by
the ContentSchemaId property. Updating the Content property is only possible for virtual items (contents
whose ContentType is Virtual).
Update of content data will be done only if this attribute has any data, i.e. if it's not null or empty. */
    content?: any | undefined;
    /** The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).
The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property.
If there are no data for a specified LayerSchemaId, it is treated as empty. */
    metadata?: { [key: string] : any; } | undefined;
    /** Options to modify the behavior for updating the layers.
Merge: the content is updated so that the assigned layers to the content will be a merge of the ones specified in the LayerSchemaIds property
and the ones already existing; existing assigned layers not specified in the property are kept and missing layers are assigned.
Replace: the content is updated so that only the layers specified in the LayerSchemaIds property are assigned to the content;
existing assigned layers not specified in the property are removed and missing layers are assigned.
Defaults to Merge. */
    layerSchemasUpdateOptions: UpdateOption;
    /** Options to modify the behavior for updating the values of schemas.
Merge: the values specified in the Metadata dictionary are merged to the existing values of the corresponding schema on the content.
Replace: the values specified in the Metadata dictionary entirely replace any existing value of the corresponding schema on the content.
Defaults to Merge. */
    layerFieldsUpdateOptions: UpdateOption;
    /** Options to modify the behavior for updating the content.
Merge: the values specified in the Content object are merged to the existing content.
Replace: the values specified in the Content object entirely replace the content.
Defaults to Merge. */
    contentFieldsUpdateOptions: UpdateOption;
}

/** Controls the update of metadata */
export enum UpdateOption {
    Merge = "Merge",
    Replace = "Replace",
}

/** Request to update the permissions of a content */
export class ContentPermissionsUpdateRequest implements IContentPermissionsUpdateRequest {
    /** A list of content permission set IDs which control content permissions that will be updated on the content.
These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;

    constructor(data?: IContentPermissionsUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentPermissionSetIds"])) {
                this.contentPermissionSetIds = [] as any;
                for (let item of data["contentPermissionSetIds"])
                    this.contentPermissionSetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentPermissionsUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionsUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentPermissionSetIds)) {
            data["contentPermissionSetIds"] = [];
            for (let item of this.contentPermissionSetIds)
                data["contentPermissionSetIds"].push(item);
        }
        return data; 
    }
}

/** Request to update the permissions of a content */
export interface IContentPermissionsUpdateRequest {
    /** A list of content permission set IDs which control content permissions that will be updated on the content.
These permissions control content accessibility for the users that do not own the content. */
    contentPermissionSetIds?: string[] | undefined;
}

/** Request to update many contents metadata */
export class ContentMetadataUpdateManyRequest implements IContentMetadataUpdateManyRequest {
    /** Allows storing references to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;
    /** Update items */
    items!: ContentMetadataUpdateItem[];

    constructor(data?: IContentMetadataUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.allowMissingDependencies = data["allowMissingDependencies"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentMetadataUpdateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentMetadataUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMetadataUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update many contents metadata */
export interface IContentMetadataUpdateManyRequest {
    /** Allows storing references to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
    /** Update items */
    items: ContentMetadataUpdateItem[];
}

/** Item to update content metadata */
export class ContentMetadataUpdateItem extends ContentMetadataUpdateRequest implements IContentMetadataUpdateItem {
    /** The ID of the content. */
    id!: string;

    constructor(data?: IContentMetadataUpdateItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ContentMetadataUpdateItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMetadataUpdateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

/** Item to update content metadata */
export interface IContentMetadataUpdateItem extends IContentMetadataUpdateRequest {
    /** The ID of the content. */
    id: string;
}

/** Request to update multiple contents permissions */
export class ContentPermissionsUpdateManyRequest implements IContentPermissionsUpdateManyRequest {
    /** Content permissions update items */
    items!: ContentPermissionsUpdateItem[];

    constructor(data?: IContentPermissionsUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentPermissionsUpdateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentPermissionsUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionsUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update multiple contents permissions */
export interface IContentPermissionsUpdateManyRequest {
    /** Content permissions update items */
    items: ContentPermissionsUpdateItem[];
}

/** Content permissions update item */
export class ContentPermissionsUpdateItem extends ContentPermissionsUpdateRequest implements IContentPermissionsUpdateItem {
    /** ID of the content. */
    contentId!: string;

    constructor(data?: IContentPermissionsUpdateItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
        }
    }

    static fromJS(data: any): ContentPermissionsUpdateItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionsUpdateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        super.toJSON(data);
        return data; 
    }
}

/** Content permissions update item */
export interface IContentPermissionsUpdateItem extends IContentPermissionsUpdateRequest {
    /** ID of the content. */
    contentId: string;
}

/** Request to transfer the content ownership */
export class ContentOwnershipTransferRequest implements IContentOwnershipTransferRequest {
    /** The ID of the user to whom the content ownership has to be transferred to. */
    transferUserId!: string;

    constructor(data?: IContentOwnershipTransferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transferUserId = data["transferUserId"];
        }
    }

    static fromJS(data: any): ContentOwnershipTransferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentOwnershipTransferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferUserId"] = this.transferUserId;
        return data; 
    }
}

/** Request to transfer the content ownership */
export interface IContentOwnershipTransferRequest {
    /** The ID of the user to whom the content ownership has to be transferred to. */
    transferUserId: string;
}

/** Request to transfer multiple contents ownerships */
export class ContentOwnershipTransferManyRequest implements IContentOwnershipTransferManyRequest {
    /** List of Content Permissions ownership transfer items. */
    items!: ContentOwnershipTransferItem[];

    constructor(data?: IContentOwnershipTransferManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentOwnershipTransferItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentOwnershipTransferManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentOwnershipTransferManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to transfer multiple contents ownerships */
export interface IContentOwnershipTransferManyRequest {
    /** List of Content Permissions ownership transfer items. */
    items: ContentOwnershipTransferItem[];
}

/** Content ownership transfer item */
export class ContentOwnershipTransferItem extends ContentOwnershipTransferRequest implements IContentOwnershipTransferItem {
    /** The content ID. */
    contentId!: string;

    constructor(data?: IContentOwnershipTransferItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.contentId = data["contentId"];
        }
    }

    static fromJS(data: any): ContentOwnershipTransferItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentOwnershipTransferItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        super.toJSON(data);
        return data; 
    }
}

/** Content ownership transfer item */
export interface IContentOwnershipTransferItem extends IContentOwnershipTransferRequest {
    /** The content ID. */
    contentId: string;
}

/** Base class for the content metadata batch requests. */
export abstract class MetadataValuesChangeRequestBase implements IMetadataValuesChangeRequestBase {
    /** Changes that need to be applied to the existing content metadata. The same set of changes is applied to all contents. */
    changeCommands!: MetadataValuesChangeCommandBase[];
    /** Allows updating contents with references to list items or contents that do not exist in the system. */
    allowMissingDependencies!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress!: boolean;

    protected _discriminator: string;

    constructor(data?: IMetadataValuesChangeRequestBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.changeCommands = [];
        }
        this._discriminator = "MetadataValuesChangeRequestBase";
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["changeCommands"])) {
                this.changeCommands = [] as any;
                for (let item of data["changeCommands"])
                    this.changeCommands!.push(MetadataValuesChangeCommandBase.fromJS(item));
            }
            this.allowMissingDependencies = data["allowMissingDependencies"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): MetadataValuesChangeRequestBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ContentFieldsBatchUpdateRequest") {
            let result = new ContentFieldsBatchUpdateRequest();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentFieldsBatchUpdateFilterRequest") {
            let result = new ContentFieldsBatchUpdateFilterRequest();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'MetadataValuesChangeRequestBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        if (Array.isArray(this.changeCommands)) {
            data["changeCommands"] = [];
            for (let item of this.changeCommands)
                data["changeCommands"].push(item.toJSON());
        }
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Base class for the content metadata batch requests. */
export interface IMetadataValuesChangeRequestBase {
    /** Changes that need to be applied to the existing content metadata. The same set of changes is applied to all contents. */
    changeCommands: MetadataValuesChangeCommandBase[];
    /** Allows updating contents with references to list items or contents that do not exist in the system. */
    allowMissingDependencies: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress: boolean;
}

/** Request to batch update contents' fields based on content IDs */
export class ContentFieldsBatchUpdateRequest extends MetadataValuesChangeRequestBase implements IContentFieldsBatchUpdateRequest {
    /** The IDs of the contents whose fields need to be updated. */
    contentIds!: string[];

    constructor(data?: IContentFieldsBatchUpdateRequest) {
        super(data);
        if (!data) {
            this.contentIds = [];
        }
        this._discriminator = "ContentFieldsBatchUpdateRequest";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentFieldsBatchUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFieldsBatchUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to batch update contents' fields based on content IDs */
export interface IContentFieldsBatchUpdateRequest extends IMetadataValuesChangeRequestBase {
    /** The IDs of the contents whose fields need to be updated. */
    contentIds: string[];
}

/** The base class for metadata value change commands. */
export abstract class MetadataValuesChangeCommandBase implements IMetadataValuesChangeCommandBase {
    /** The ID of the schema to which the operation scope is addressed. */
    schemaId!: string;

    protected _discriminator: string;

    constructor(data?: IMetadataValuesChangeCommandBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "MetadataValuesChangeCommandBase";
    }

    init(data?: any) {
        if (data) {
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): MetadataValuesChangeCommandBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "MetadataValuesSchemaUpdateCommand") {
            let result = new MetadataValuesSchemaUpdateCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesSchemaUpsertCommand") {
            let result = new MetadataValuesSchemaUpsertCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesSchemaRemoveCommand") {
            let result = new MetadataValuesSchemaRemoveCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesSchemaReplaceCommand") {
            let result = new MetadataValuesSchemaReplaceCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesFieldRemoveCommand") {
            let result = new MetadataValuesFieldRemoveCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesSchemaItemAddCommand") {
            let result = new MetadataValuesSchemaItemAddCommand();
            result.init(data);
            return result;
        }
        if (data["kind"] === "MetadataValuesSchemaItemRemoveCommand") {
            let result = new MetadataValuesSchemaItemRemoveCommand();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'MetadataValuesChangeCommandBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["schemaId"] = this.schemaId;
        return data; 
    }
}

/** The base class for metadata value change commands. */
export interface IMetadataValuesChangeCommandBase {
    /** The ID of the schema to which the operation scope is addressed. */
    schemaId: string;
}

/** Updates schema values */
export class MetadataValuesSchemaUpdateCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaUpdateCommand {
    /** An object containing the metadata values to add / update. */
    value!: any;

    constructor(data?: IMetadataValuesSchemaUpdateCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaUpdateCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.value = data["value"];
        }
    }

    static fromJS(data: any): MetadataValuesSchemaUpdateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaUpdateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

/** Updates schema values */
export interface IMetadataValuesSchemaUpdateCommand extends IMetadataValuesChangeCommandBase {
    /** An object containing the metadata values to add / update. */
    value: any;
}

/** Adds or updates schema values */
export class MetadataValuesSchemaUpsertCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaUpsertCommand {
    /** An object containing the metadata values to add / update. */
    value!: any;

    constructor(data?: IMetadataValuesSchemaUpsertCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaUpsertCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.value = data["value"];
        }
    }

    static fromJS(data: any): MetadataValuesSchemaUpsertCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaUpsertCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

/** Adds or updates schema values */
export interface IMetadataValuesSchemaUpsertCommand extends IMetadataValuesChangeCommandBase {
    /** An object containing the metadata values to add / update. */
    value: any;
}

/** Removes schema and all its values */
export class MetadataValuesSchemaRemoveCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaRemoveCommand {

    constructor(data?: IMetadataValuesSchemaRemoveCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaRemoveCommand";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): MetadataValuesSchemaRemoveCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaRemoveCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Removes schema and all its values */
export interface IMetadataValuesSchemaRemoveCommand extends IMetadataValuesChangeCommandBase {
}

/** Replaces schema values */
export class MetadataValuesSchemaReplaceCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaReplaceCommand {
    /** An object containing the metadata values for the schema. The existing dictionary will be entirely overwritten. */
    value!: any;

    constructor(data?: IMetadataValuesSchemaReplaceCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaReplaceCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.value = data["value"];
        }
    }

    static fromJS(data: any): MetadataValuesSchemaReplaceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaReplaceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

/** Replaces schema values */
export interface IMetadataValuesSchemaReplaceCommand extends IMetadataValuesChangeCommandBase {
    /** An object containing the metadata values for the schema. The existing dictionary will be entirely overwritten. */
    value: any;
}

/** Removes a field and its value from the values of the specified schema */
export class MetadataValuesFieldRemoveCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesFieldRemoveCommand {
    /** The path of the field to be removed within the specified schema (i.e. remove the street from the address of a person: fieldPath = "address.streetName", schemaId = "PersonLayer") */
    fieldPath!: string;

    constructor(data?: IMetadataValuesFieldRemoveCommand) {
        super(data);
        this._discriminator = "MetadataValuesFieldRemoveCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
        }
    }

    static fromJS(data: any): MetadataValuesFieldRemoveCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesFieldRemoveCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        super.toJSON(data);
        return data; 
    }
}

/** Removes a field and its value from the values of the specified schema */
export interface IMetadataValuesFieldRemoveCommand extends IMetadataValuesChangeCommandBase {
    /** The path of the field to be removed within the specified schema (i.e. remove the street from the address of a person: fieldPath = "address.streetName", schemaId = "PersonLayer") */
    fieldPath: string;
}

/** Adds a list item to a FieldMultiTagbox field */
export class MetadataValuesSchemaItemAddCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaItemAddCommand {
    /** The path of the field relative to the Content or Layer schema values defined by the schemaId property.
(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer"). */
    fieldPath!: string;
    /** The field namespace */
    fieldNamespace!: string;
    /** The ID of the list item to be added. */
    referenceId!: string;

    constructor(data?: IMetadataValuesSchemaItemAddCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaItemAddCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.fieldNamespace = data["fieldNamespace"];
            this.referenceId = data["referenceId"];
        }
    }

    static fromJS(data: any): MetadataValuesSchemaItemAddCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaItemAddCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["fieldNamespace"] = this.fieldNamespace;
        data["referenceId"] = this.referenceId;
        super.toJSON(data);
        return data; 
    }
}

/** Adds a list item to a FieldMultiTagbox field */
export interface IMetadataValuesSchemaItemAddCommand extends IMetadataValuesChangeCommandBase {
    /** The path of the field relative to the Content or Layer schema values defined by the schemaId property.
(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer"). */
    fieldPath: string;
    /** The field namespace */
    fieldNamespace: string;
    /** The ID of the list item to be added. */
    referenceId: string;
}

/** Removes a list item from a FieldMultiTagbox field */
export class MetadataValuesSchemaItemRemoveCommand extends MetadataValuesChangeCommandBase implements IMetadataValuesSchemaItemRemoveCommand {
    /** The path of the field relative to the Content or Layer schema values defined by the schemaId property.
(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer"). */
    fieldPath!: string;
    /** The field namespace. */
    fieldNamespace!: string;
    /** The ID of the list item to be removed. */
    referenceId!: string;

    constructor(data?: IMetadataValuesSchemaItemRemoveCommand) {
        super(data);
        this._discriminator = "MetadataValuesSchemaItemRemoveCommand";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldPath = data["fieldPath"];
            this.fieldNamespace = data["fieldNamespace"];
            this.referenceId = data["referenceId"];
        }
    }

    static fromJS(data: any): MetadataValuesSchemaItemRemoveCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataValuesSchemaItemRemoveCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldPath"] = this.fieldPath;
        data["fieldNamespace"] = this.fieldNamespace;
        data["referenceId"] = this.referenceId;
        super.toJSON(data);
        return data; 
    }
}

/** Removes a list item from a FieldMultiTagbox field */
export interface IMetadataValuesSchemaItemRemoveCommand extends IMetadataValuesChangeCommandBase {
    /** The path of the field relative to the Content or Layer schema values defined by the schemaId property.
(i.e. add a team (existing list item) to the work information of a person: fieldPath = "workInfo.teams", schemaId = "PersonLayer"). */
    fieldPath: string;
    /** The field namespace. */
    fieldNamespace: string;
    /** The ID of the list item to be removed. */
    referenceId: string;
}

/** Request to batch update contents' fields based on a filter */
export class ContentFieldsBatchUpdateFilterRequest extends MetadataValuesChangeRequestBase implements IContentFieldsBatchUpdateFilterRequest {
    /** Filters the contents on which the change commands must be applied. */
    filterRequest!: ContentFilterRequest;

    constructor(data?: IContentFieldsBatchUpdateFilterRequest) {
        super(data);
        if (data) {
            this.filterRequest = data.filterRequest && !(<any>data.filterRequest).toJSON ? new ContentFilterRequest(data.filterRequest) : <ContentFilterRequest>this.filterRequest; 
        }
        if (!data) {
            this.filterRequest = new ContentFilterRequest();
        }
        this._discriminator = "ContentFieldsBatchUpdateFilterRequest";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.filterRequest = data["filterRequest"] ? ContentFilterRequest.fromJS(data["filterRequest"]) : new ContentFilterRequest();
        }
    }

    static fromJS(data: any): ContentFieldsBatchUpdateFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFieldsBatchUpdateFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterRequest"] = this.filterRequest ? this.filterRequest.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Request to batch update contents' fields based on a filter */
export interface IContentFieldsBatchUpdateFilterRequest extends IMetadataValuesChangeRequestBase {
    /** Filters the contents on which the change commands must be applied. */
    filterRequest: IContentFilterRequest;
}

export abstract class PermissionSetDetailOfContentRight implements IPermissionSetDetailOfContentRight {
    id!: string;
    names!: TranslatedStringDictionary;
    userRolesRights?: PermissionUserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: PermissionUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive!: boolean;
    ownerTokenId!: string;
    audit?: UserAuditDetail | undefined;

    constructor(data?: IPermissionSetDetailOfContentRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new PermissionUserRoleRightsOfContentRight(item) : <PermissionUserRoleRightsOfContentRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new PermissionUserRoleRightsOfPermissionSetRight(item) : <PermissionUserRoleRightsOfPermissionSetRight>item;
                }
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(PermissionUserRoleRightsOfContentRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(PermissionUserRoleRightsOfPermissionSetRight.fromJS(item));
            }
            this.exclusive = data["exclusive"];
            this.ownerTokenId = data["ownerTokenId"];
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PermissionSetDetailOfContentRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetDetailOfContentRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        data["exclusive"] = this.exclusive;
        data["ownerTokenId"] = this.ownerTokenId;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPermissionSetDetailOfContentRight {
    id: string;
    names: ITranslatedStringDictionary;
    userRolesRights?: IPermissionUserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: IPermissionUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive: boolean;
    ownerTokenId: string;
    audit?: IUserAuditDetail | undefined;
}

/** Detail of a content permission set */
export class ContentPermissionSetDetail extends PermissionSetDetailOfContentRight implements IContentPermissionSetDetail {

    constructor(data?: IContentPermissionSetDetail) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentPermissionSetDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Detail of a content permission set */
export interface IContentPermissionSetDetail extends IPermissionSetDetailOfContentRight {
}

export class PermissionUserRoleRightsOfContentRight implements IPermissionUserRoleRightsOfContentRight {
    userRoleId?: string | undefined;
    names?: TranslatedStringDictionary | undefined;
    rights?: ContentRight[] | undefined;

    constructor(data?: IPermissionUserRoleRightsOfContentRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionUserRoleRightsOfContentRight {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionUserRoleRightsOfContentRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IPermissionUserRoleRightsOfContentRight {
    userRoleId?: string | undefined;
    names?: ITranslatedStringDictionary | undefined;
    rights?: ContentRight[] | undefined;
}

export class PermissionUserRoleRightsOfPermissionSetRight implements IPermissionUserRoleRightsOfPermissionSetRight {
    userRoleId?: string | undefined;
    names?: TranslatedStringDictionary | undefined;
    rights?: PermissionSetRight[] | undefined;

    constructor(data?: IPermissionUserRoleRightsOfPermissionSetRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionUserRoleRightsOfPermissionSetRight {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionUserRoleRightsOfPermissionSetRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IPermissionUserRoleRightsOfPermissionSetRight {
    userRoleId?: string | undefined;
    names?: ITranslatedStringDictionary | undefined;
    rights?: PermissionSetRight[] | undefined;
}

/** Permission set rights */
export enum PermissionSetRight {
    Apply = "Apply",
    Manage = "Manage",
}

export abstract class PermissionSetCreateRequestOfContentRight implements IPermissionSetCreateRequestOfContentRight {
    names!: TranslatedStringDictionary;
    userRolesRights?: UserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: UserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive!: boolean;
    requestId?: string | undefined;

    constructor(data?: IPermissionSetCreateRequestOfContentRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfContentRight(item) : <UserRoleRightsOfContentRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfPermissionSetRight(item) : <UserRoleRightsOfPermissionSetRight>item;
                }
            }
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(UserRoleRightsOfContentRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(UserRoleRightsOfPermissionSetRight.fromJS(item));
            }
            this.exclusive = data["exclusive"];
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): PermissionSetCreateRequestOfContentRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetCreateRequestOfContentRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        data["exclusive"] = this.exclusive;
        data["requestId"] = this.requestId;
        return data; 
    }
}

export interface IPermissionSetCreateRequestOfContentRight {
    names: ITranslatedStringDictionary;
    userRolesRights?: IUserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: IUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive: boolean;
    requestId?: string | undefined;
}

export class ContentPermissionSetCreateRequest extends PermissionSetCreateRequestOfContentRight implements IContentPermissionSetCreateRequest {

    constructor(data?: IContentPermissionSetCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentPermissionSetCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContentPermissionSetCreateRequest extends IPermissionSetCreateRequestOfContentRight {
}

export class UserRoleRightsOfContentRight implements IUserRoleRightsOfContentRight {
    userRoleId?: string | undefined;
    rights?: ContentRight[] | undefined;

    constructor(data?: IUserRoleRightsOfContentRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRoleRightsOfContentRight {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleRightsOfContentRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IUserRoleRightsOfContentRight {
    userRoleId?: string | undefined;
    rights?: ContentRight[] | undefined;
}

export class UserRoleRightsOfPermissionSetRight implements IUserRoleRightsOfPermissionSetRight {
    userRoleId?: string | undefined;
    rights?: PermissionSetRight[] | undefined;

    constructor(data?: IUserRoleRightsOfPermissionSetRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRoleRightsOfPermissionSetRight {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleRightsOfPermissionSetRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IUserRoleRightsOfPermissionSetRight {
    userRoleId?: string | undefined;
    rights?: PermissionSetRight[] | undefined;
}

export abstract class PermissionSetUpdateRequestOfContentRight implements IPermissionSetUpdateRequestOfContentRight {
    names!: TranslatedStringDictionary;
    userRolesRights?: UserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: UserRoleRightsOfPermissionSetRight[] | undefined;

    constructor(data?: IPermissionSetUpdateRequestOfContentRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfContentRight(item) : <UserRoleRightsOfContentRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfPermissionSetRight(item) : <UserRoleRightsOfPermissionSetRight>item;
                }
            }
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(UserRoleRightsOfContentRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(UserRoleRightsOfPermissionSetRight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionSetUpdateRequestOfContentRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetUpdateRequestOfContentRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPermissionSetUpdateRequestOfContentRight {
    names: ITranslatedStringDictionary;
    userRolesRights?: IUserRoleRightsOfContentRight[] | undefined;
    userRolesPermissionSetRights?: IUserRoleRightsOfPermissionSetRight[] | undefined;
}

/** Request to update a content permission set */
export class ContentPermissionSetUpdateRequest extends PermissionSetUpdateRequestOfContentRight implements IContentPermissionSetUpdateRequest {

    constructor(data?: IContentPermissionSetUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentPermissionSetUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Request to update a content permission set */
export interface IContentPermissionSetUpdateRequest extends IPermissionSetUpdateRequestOfContentRight {
}

export class PermissionSetOwnershipTransferRequest implements IPermissionSetOwnershipTransferRequest {
    /** The ID of the user to whom the permission set ownership should be transferred to. */
    transferUserId!: string;

    constructor(data?: IPermissionSetOwnershipTransferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transferUserId = data["transferUserId"];
        }
    }

    static fromJS(data: any): PermissionSetOwnershipTransferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetOwnershipTransferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferUserId"] = this.transferUserId;
        return data; 
    }
}

export interface IPermissionSetOwnershipTransferRequest {
    /** The ID of the user to whom the permission set ownership should be transferred to. */
    transferUserId: string;
}

/** Response to a bulk operation */
export class BulkResponse implements IBulkResponse {
    /** Rows of the bulk response. */
    rows?: BulkResponseRow[] | undefined;

    constructor(data?: IBulkResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.rows) {
                this.rows = [];
                for (let i = 0; i < data.rows.length; i++) {
                    let item = data.rows[i];
                    this.rows[i] = item && !(<any>item).toJSON ? new BulkResponseRow(item) : <BulkResponseRow>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["rows"])) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(BulkResponseRow.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BulkResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data; 
    }
}

/** Response to a bulk operation */
export interface IBulkResponse {
    /** Rows of the bulk response. */
    rows?: IBulkResponseRow[] | undefined;
}

/** Row information of a bulk response */
export class BulkResponseRow implements IBulkResponseRow {
    /** ID of the document. */
    id!: string;
    /** Version of the document. */
    version!: number;
    /** Eventual error. */
    error?: string | undefined;
    /** True if item successfully saved. False otherwise. */
    succeeded!: boolean;
    /** Returned status code. */
    status!: number;
    /** The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation. */
    requestId?: string | undefined;

    constructor(data?: IBulkResponseRow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.version = data["version"];
            this.error = data["error"];
            this.succeeded = data["succeeded"];
            this.status = data["status"];
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): BulkResponseRow {
        data = typeof data === 'object' ? data : {};
        let result = new BulkResponseRow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["version"] = this.version;
        data["error"] = this.error;
        data["succeeded"] = this.succeeded;
        data["status"] = this.status;
        data["requestId"] = this.requestId;
        return data; 
    }
}

/** Row information of a bulk response */
export interface IBulkResponseRow {
    /** ID of the document. */
    id: string;
    /** Version of the document. */
    version: number;
    /** Eventual error. */
    error?: string | undefined;
    /** True if item successfully saved. False otherwise. */
    succeeded: boolean;
    /** Returned status code. */
    status: number;
    /** The identifier provided by user in the corresponding request (or null if none was provided). Used only in bulk creation. */
    requestId?: string | undefined;
}

export class ContentPermissionSetCreateManyRequest implements IContentPermissionSetCreateManyRequest {
    items?: ContentPermissionSetCreateRequest[] | undefined;

    constructor(data?: IContentPermissionSetCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentPermissionSetCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentPermissionSetCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IContentPermissionSetCreateManyRequest {
    items?: ContentPermissionSetCreateRequest[] | undefined;
}

/** Request to update multiple content permission sets */
export class ContentPermissionSetUpdateManyRequest implements IContentPermissionSetUpdateManyRequest {
    /** Content permission sets update requests. */
    items?: ContentPermissionSetUpdateRequestItem[] | undefined;

    constructor(data?: IContentPermissionSetUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ContentPermissionSetUpdateRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentPermissionSetUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update multiple content permission sets */
export interface IContentPermissionSetUpdateManyRequest {
    /** Content permission sets update requests. */
    items?: ContentPermissionSetUpdateRequestItem[] | undefined;
}

export abstract class PermissionSetUpdateRequestItemOfContentRight extends PermissionSetUpdateRequestOfContentRight implements IPermissionSetUpdateRequestItemOfContentRight {
    id!: string;

    constructor(data?: IPermissionSetUpdateRequestItemOfContentRight) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PermissionSetUpdateRequestItemOfContentRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetUpdateRequestItemOfContentRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetUpdateRequestItemOfContentRight extends IPermissionSetUpdateRequestOfContentRight {
    id: string;
}

/** Request to update a content permission set */
export class ContentPermissionSetUpdateRequestItem extends PermissionSetUpdateRequestItemOfContentRight implements IContentPermissionSetUpdateRequestItem {

    constructor(data?: IContentPermissionSetUpdateRequestItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ContentPermissionSetUpdateRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPermissionSetUpdateRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Request to update a content permission set */
export interface IContentPermissionSetUpdateRequestItem extends IPermissionSetUpdateRequestItemOfContentRight {
}

export class PermissionSetDeleteManyRequest implements IPermissionSetDeleteManyRequest {
    permissionSetIds?: string[] | undefined;

    constructor(data?: IPermissionSetDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["permissionSetIds"])) {
                this.permissionSetIds = [] as any;
                for (let item of data["permissionSetIds"])
                    this.permissionSetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionSetDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.permissionSetIds)) {
            data["permissionSetIds"] = [];
            for (let item of this.permissionSetIds)
                data["permissionSetIds"].push(item);
        }
        return data; 
    }
}

export interface IPermissionSetDeleteManyRequest {
    permissionSetIds?: string[] | undefined;
}

export class PermissionSetOwnershipTransferManyRequest implements IPermissionSetOwnershipTransferManyRequest {
    items?: PermissionSetOwnershipTransferItem[] | undefined;

    constructor(data?: IPermissionSetOwnershipTransferManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(PermissionSetOwnershipTransferItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionSetOwnershipTransferManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetOwnershipTransferManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPermissionSetOwnershipTransferManyRequest {
    items?: PermissionSetOwnershipTransferItem[] | undefined;
}

export class PermissionSetOwnershipTransferItem extends PermissionSetOwnershipTransferRequest implements IPermissionSetOwnershipTransferItem {
    /** The permission set ID. */
    permissionSetId?: string | undefined;

    constructor(data?: IPermissionSetOwnershipTransferItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.permissionSetId = data["permissionSetId"];
        }
    }

    static fromJS(data: any): PermissionSetOwnershipTransferItem {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetOwnershipTransferItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetOwnershipTransferItem extends IPermissionSetOwnershipTransferRequest {
    /** The permission set ID. */
    permissionSetId?: string | undefined;
}

export class PermissionSetUserPermissionRights implements IPermissionSetUserPermissionRights {
    permissionSetId?: string | undefined;
    permissionSetRights?: PermissionSetRight[] | undefined;

    constructor(data?: IPermissionSetUserPermissionRights) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.permissionSetId = data["permissionSetId"];
            if (Array.isArray(data["permissionSetRights"])) {
                this.permissionSetRights = [] as any;
                for (let item of data["permissionSetRights"])
                    this.permissionSetRights!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionSetUserPermissionRights {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetUserPermissionRights();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionSetId"] = this.permissionSetId;
        if (Array.isArray(this.permissionSetRights)) {
            data["permissionSetRights"] = [];
            for (let item of this.permissionSetRights)
                data["permissionSetRights"].push(item);
        }
        return data; 
    }
}

export interface IPermissionSetUserPermissionRights {
    permissionSetId?: string | undefined;
    permissionSetRights?: PermissionSetRight[] | undefined;
}

export class BaseResultOfPermissionSet implements IBaseResultOfPermissionSet {
    totalResults!: number;
    results!: PermissionSet[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfPermissionSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new PermissionSet(item) : <PermissionSet>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(PermissionSet.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfPermissionSet {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfPermissionSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfPermissionSet {
    totalResults: number;
    results: IPermissionSet[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfPermissionSet extends BaseResultOfPermissionSet implements ISearchBehaviorBaseResultOfPermissionSet {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfPermissionSet) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfPermissionSet {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfPermissionSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfPermissionSet extends IBaseResultOfPermissionSet {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Result of a permission set search operation */
export class PermissionSetSearchResult extends SearchBehaviorBaseResultOfPermissionSet implements IPermissionSetSearchResult {

    constructor(data?: IPermissionSetSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PermissionSetSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result of a permission set search operation */
export interface IPermissionSetSearchResult extends ISearchBehaviorBaseResultOfPermissionSet {
}

/** Permission set */
export class PermissionSet implements IPermissionSet {
    /** The permission set ID. */
    id!: string;
    /** When true this permission set will derogate all other configured permission sets.
Cannot be changed after creation. */
    exclusive!: boolean;
    /** Language specific permission set names. */
    names!: TranslatedStringDictionary;

    constructor(data?: IPermissionSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.exclusive = data["exclusive"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
        }
    }

    static fromJS(data: any): PermissionSet {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["exclusive"] = this.exclusive;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        return data; 
    }
}

/** Permission set */
export interface IPermissionSet {
    /** The permission set ID. */
    id: string;
    /** When true this permission set will derogate all other configured permission sets.
Cannot be changed after creation. */
    exclusive: boolean;
    /** Language specific permission set names. */
    names: ITranslatedStringDictionary;
}

/** Request to search permission sets */
export class PermissionSetSearchRequest implements IPermissionSetSearchRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied in the specified order. */
    searchBehaviors?: SearchBehavior[] | undefined;
    sort?: SortInfo[] | undefined;
    /** Limits the number of the returned schemas. Defaults to 30. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    filter?: FilterBase | undefined;
    /** Filters based on the PermissionSetRight of the user. */
    rightFilter?: PermissionSetRight | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the result.
Warning! It severely affects performance. */
    debugMode!: boolean;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;

    constructor(data?: IPermissionSetSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.rightFilter = data["rightFilter"];
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionSetSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionSetSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["rightFilter"] = this.rightFilter;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        return data; 
    }
}

/** Request to search permission sets */
export interface IPermissionSetSearchRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied in the specified order. */
    searchBehaviors?: SearchBehavior[] | undefined;
    sort?: ISortInfo[] | undefined;
    /** Limits the number of the returned schemas. Defaults to 30. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    filter?: FilterBase | undefined;
    /** Filters based on the PermissionSetRight of the user. */
    rightFilter?: PermissionSetRight | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the result.
Warning! It severely affects performance. */
    debugMode: boolean;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
}

export class DisplayValueStatus implements IDisplayValueStatus {
    /** The schema ids (of type Content or Layer) for which the re-rendering of the display values is needed. */
    contentOrLayerSchemaIds?: string[] | undefined;
    /** The schema ids (of type List) for which the re-rendering of the display values is needed. */
    listSchemaIds?: string[] | undefined;
    /** The state of the display values compared to the schema structure (UpToDate = ok, Outdated = re-rendering needed). */
    state!: DisplayValuesState;

    constructor(data?: IDisplayValueStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentOrLayerSchemaIds"])) {
                this.contentOrLayerSchemaIds = [] as any;
                for (let item of data["contentOrLayerSchemaIds"])
                    this.contentOrLayerSchemaIds!.push(item);
            }
            if (Array.isArray(data["listSchemaIds"])) {
                this.listSchemaIds = [] as any;
                for (let item of data["listSchemaIds"])
                    this.listSchemaIds!.push(item);
            }
            this.state = data["state"];
        }
    }

    static fromJS(data: any): DisplayValueStatus {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayValueStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentOrLayerSchemaIds)) {
            data["contentOrLayerSchemaIds"] = [];
            for (let item of this.contentOrLayerSchemaIds)
                data["contentOrLayerSchemaIds"].push(item);
        }
        if (Array.isArray(this.listSchemaIds)) {
            data["listSchemaIds"] = [];
            for (let item of this.listSchemaIds)
                data["listSchemaIds"].push(item);
        }
        data["state"] = this.state;
        return data; 
    }
}

export interface IDisplayValueStatus {
    /** The schema ids (of type Content or Layer) for which the re-rendering of the display values is needed. */
    contentOrLayerSchemaIds?: string[] | undefined;
    /** The schema ids (of type List) for which the re-rendering of the display values is needed. */
    listSchemaIds?: string[] | undefined;
    /** The state of the display values compared to the schema structure (UpToDate = ok, Outdated = re-rendering needed). */
    state: DisplayValuesState;
}

export enum DisplayValuesState {
    UpToDate = "UpToDate",
    Outdated = "Outdated",
    RerenderingInProgress = "RerenderingInProgress",
}

export class BaseResultOfDocumentHistory implements IBaseResultOfDocumentHistory {
    totalResults!: number;
    results!: DocumentHistory[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfDocumentHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new DocumentHistory(item) : <DocumentHistory>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(DocumentHistory.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfDocumentHistory {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfDocumentHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfDocumentHistory {
    totalResults: number;
    results: IDocumentHistory[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class DocumentHistorySearchResult extends BaseResultOfDocumentHistory implements IDocumentHistorySearchResult {

    constructor(data?: IDocumentHistorySearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DocumentHistorySearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentHistorySearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentHistorySearchResult extends IBaseResultOfDocumentHistory {
}

export class DocumentHistory implements IDocumentHistory {
    documentId?: string | undefined;
    documentVersion!: number;
    documentType?: string | undefined;
    documentDate!: Date;
    document?: string | undefined;
    timestamp!: Date;
    audit?: UserAuditHistory | undefined;
    deleted!: boolean;
    action!: DocumentChangeAction;

    constructor(data?: IDocumentHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditHistory(data.audit) : <UserAuditHistory>this.audit; 
        }
    }

    init(data?: any) {
        if (data) {
            this.documentId = data["documentId"];
            this.documentVersion = data["documentVersion"];
            this.documentType = data["documentType"];
            this.documentDate = data["documentDate"] ? new Date(data["documentDate"].toString()) : <any>undefined;
            this.document = data["document"];
            this.timestamp = data["timestamp"] ? new Date(data["timestamp"].toString()) : <any>undefined;
            this.audit = data["audit"] ? UserAuditHistory.fromJS(data["audit"]) : <any>undefined;
            this.deleted = data["deleted"];
            this.action = data["action"];
        }
    }

    static fromJS(data: any): DocumentHistory {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["documentVersion"] = this.documentVersion;
        data["documentType"] = this.documentType;
        data["documentDate"] = this.documentDate ? this.documentDate.toISOString() : <any>undefined;
        data["document"] = this.document;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["deleted"] = this.deleted;
        data["action"] = this.action;
        return data; 
    }
}

export interface IDocumentHistory {
    documentId?: string | undefined;
    documentVersion: number;
    documentType?: string | undefined;
    documentDate: Date;
    document?: string | undefined;
    timestamp: Date;
    audit?: IUserAuditHistory | undefined;
    deleted: boolean;
    action: DocumentChangeAction;
}

export class UserAuditHistory implements IUserAuditHistory {
    modificationDate!: Date;
    modifiedByUser?: string | undefined;

    constructor(data?: IUserAuditHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modificationDate = data["modificationDate"] ? new Date(data["modificationDate"].toString()) : <any>undefined;
            this.modifiedByUser = data["modifiedByUser"];
        }
    }

    static fromJS(data: any): UserAuditHistory {
        data = typeof data === 'object' ? data : {};
        let result = new UserAuditHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>undefined;
        data["modifiedByUser"] = this.modifiedByUser;
        return data; 
    }
}

export interface IUserAuditHistory {
    modificationDate: Date;
    modifiedByUser?: string | undefined;
}

export enum DocumentChangeAction {
    Create = "Create",
    Update = "Update",
    Delete = "Delete",
    Activate = "Activate",
    Deactivate = "Deactivate",
}

export class DocumentHistorySearchRequest implements IDocumentHistorySearchRequest {
    /** Limits the start date of the search request. By default no limitation set. */
    from!: Date;
    /** Limits the end date of the search request. By default no limitation set. */
    to!: Date;
    /** Limits the document count of the result set. Defaults to 30. */
    limit!: number;
    /** To get a large amount of data, page token returned from the response can be used to get all data. */
    pageToken?: string | undefined;
    /** Limits the search to a specific document ID. E.g. contentId */
    documentId?: string | undefined;
    /** The document version to search. Default to -1 to not limit to a specific document version. */
    documentVersion!: number;
    /** Limits the search to a specific document type. */
    documentType?: string | undefined;
    /** Sorts the search results. Sorting on a not indexed field will throw an exception. */
    sort?: SortInfo[] | undefined;

    constructor(data?: IDocumentHistorySearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.from = data["from"] ? new Date(data["from"].toString()) : <any>undefined;
            this.to = data["to"] ? new Date(data["to"].toString()) : <any>undefined;
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.documentId = data["documentId"];
            this.documentVersion = data["documentVersion"];
            this.documentType = data["documentType"];
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentHistorySearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentHistorySearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["documentId"] = this.documentId;
        data["documentVersion"] = this.documentVersion;
        data["documentType"] = this.documentType;
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDocumentHistorySearchRequest {
    /** Limits the start date of the search request. By default no limitation set. */
    from: Date;
    /** Limits the end date of the search request. By default no limitation set. */
    to: Date;
    /** Limits the document count of the result set. Defaults to 30. */
    limit: number;
    /** To get a large amount of data, page token returned from the response can be used to get all data. */
    pageToken?: string | undefined;
    /** Limits the search to a specific document ID. E.g. contentId */
    documentId?: string | undefined;
    /** The document version to search. Default to -1 to not limit to a specific document version. */
    documentVersion: number;
    /** Limits the search to a specific document type. */
    documentType?: string | undefined;
    /** Sorts the search results. Sorting on a not indexed field will throw an exception. */
    sort?: ISortInfo[] | undefined;
}

export class DocumentHistoryDifference implements IDocumentHistoryDifference {
    documentId?: string | undefined;
    oldDocumentVersion!: number;
    newDocumentVersion!: number;
    /** Contains an RFC 6902 compatible patch that can be applied on the old document to get the new document.
Use a library like jsondiffpatch.net (https://github.com/wbish/jsondiffpatch.net)
or jsondiffpatch (https://github.com/benjamine/jsondiffpatch) to process this. */
    patch?: any | undefined;

    constructor(data?: IDocumentHistoryDifference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.documentId = data["documentId"];
            this.oldDocumentVersion = data["oldDocumentVersion"];
            this.newDocumentVersion = data["newDocumentVersion"];
            this.patch = data["patch"];
        }
    }

    static fromJS(data: any): DocumentHistoryDifference {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentHistoryDifference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["oldDocumentVersion"] = this.oldDocumentVersion;
        data["newDocumentVersion"] = this.newDocumentVersion;
        data["patch"] = this.patch;
        return data; 
    }
}

export interface IDocumentHistoryDifference {
    documentId?: string | undefined;
    oldDocumentVersion: number;
    newDocumentVersion: number;
    /** Contains an RFC 6902 compatible patch that can be applied on the old document to get the new document.
Use a library like jsondiffpatch.net (https://github.com/wbish/jsondiffpatch.net)
or jsondiffpatch (https://github.com/benjamine/jsondiffpatch) to process this. */
    patch?: any | undefined;
}

/** Customer configuration information */
export class CustomerInfo implements ICustomerInfo {
    /** The customer ID. */
    customerId!: string;
    /** The name of the customer instance. */
    name!: string;
    /** Alias of the customer instance. */
    customerAlias!: string;
    /** The base URL of identity server to authenticate the user using OpenID Connect. */
    identityServerUrl!: string;
    /** The base API URL. */
    apiUrl!: string;
    /** Information if the query details can be enabled when searching. For debug purposes only. */
    enableQueryDetails!: boolean;
    /** Configured languages of customer instance (system, metadata, default). */
    languageConfiguration!: LanguageConfiguration;
    /** Languages including translations for the configured system and metadata languages. */
    languages!: Language[];
    /** Configured rendering outputs including translations for the customer instance. */
    outputFormats!: OutputFormatInfo[];
    /** Boost levels that can be applied to a metadata field to boost the the significance of the field in a search operation. */
    boostValues!: number[];
    /** Apps registered for this customer */
    apps?: CustomerApp[] | undefined;
    modificationDate!: Date;
    /** Url to access Frontend service */
    baseUrl!: string;
    /** Base bath to access logos of customer (including trailing slash), available images: name, full, small, background */
    logosUrl!: string;

    constructor(data?: ICustomerInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.languageConfiguration = data.languageConfiguration && !(<any>data.languageConfiguration).toJSON ? new LanguageConfiguration(data.languageConfiguration) : <LanguageConfiguration>this.languageConfiguration; 
            if (data.languages) {
                this.languages = [];
                for (let i = 0; i < data.languages.length; i++) {
                    let item = data.languages[i];
                    this.languages[i] = item && !(<any>item).toJSON ? new Language(item) : <Language>item;
                }
            }
            if (data.outputFormats) {
                this.outputFormats = [];
                for (let i = 0; i < data.outputFormats.length; i++) {
                    let item = data.outputFormats[i];
                    this.outputFormats[i] = item && !(<any>item).toJSON ? new OutputFormatInfo(item) : <OutputFormatInfo>item;
                }
            }
            if (data.apps) {
                this.apps = [];
                for (let i = 0; i < data.apps.length; i++) {
                    let item = data.apps[i];
                    this.apps[i] = item && !(<any>item).toJSON ? new CustomerApp(item) : <CustomerApp>item;
                }
            }
        }
        if (!data) {
            this.languageConfiguration = new LanguageConfiguration();
            this.languages = [];
            this.outputFormats = [];
            this.boostValues = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.name = data["name"];
            this.customerAlias = data["customerAlias"];
            this.identityServerUrl = data["identityServerUrl"];
            this.apiUrl = data["apiUrl"];
            this.enableQueryDetails = data["enableQueryDetails"];
            this.languageConfiguration = data["languageConfiguration"] ? LanguageConfiguration.fromJS(data["languageConfiguration"]) : new LanguageConfiguration();
            if (Array.isArray(data["languages"])) {
                this.languages = [] as any;
                for (let item of data["languages"])
                    this.languages!.push(Language.fromJS(item));
            }
            if (Array.isArray(data["outputFormats"])) {
                this.outputFormats = [] as any;
                for (let item of data["outputFormats"])
                    this.outputFormats!.push(OutputFormatInfo.fromJS(item));
            }
            if (Array.isArray(data["boostValues"])) {
                this.boostValues = [] as any;
                for (let item of data["boostValues"])
                    this.boostValues!.push(item);
            }
            if (Array.isArray(data["apps"])) {
                this.apps = [] as any;
                for (let item of data["apps"])
                    this.apps!.push(CustomerApp.fromJS(item));
            }
            this.modificationDate = data["modificationDate"] ? new Date(data["modificationDate"].toString()) : <any>undefined;
            this.baseUrl = data["baseUrl"];
            this.logosUrl = data["logosUrl"];
        }
    }

    static fromJS(data: any): CustomerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["name"] = this.name;
        data["customerAlias"] = this.customerAlias;
        data["identityServerUrl"] = this.identityServerUrl;
        data["apiUrl"] = this.apiUrl;
        data["enableQueryDetails"] = this.enableQueryDetails;
        data["languageConfiguration"] = this.languageConfiguration ? this.languageConfiguration.toJSON() : <any>undefined;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        if (Array.isArray(this.outputFormats)) {
            data["outputFormats"] = [];
            for (let item of this.outputFormats)
                data["outputFormats"].push(item.toJSON());
        }
        if (Array.isArray(this.boostValues)) {
            data["boostValues"] = [];
            for (let item of this.boostValues)
                data["boostValues"].push(item);
        }
        if (Array.isArray(this.apps)) {
            data["apps"] = [];
            for (let item of this.apps)
                data["apps"].push(item.toJSON());
        }
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>undefined;
        data["baseUrl"] = this.baseUrl;
        data["logosUrl"] = this.logosUrl;
        return data; 
    }
}

/** Customer configuration information */
export interface ICustomerInfo {
    /** The customer ID. */
    customerId: string;
    /** The name of the customer instance. */
    name: string;
    /** Alias of the customer instance. */
    customerAlias: string;
    /** The base URL of identity server to authenticate the user using OpenID Connect. */
    identityServerUrl: string;
    /** The base API URL. */
    apiUrl: string;
    /** Information if the query details can be enabled when searching. For debug purposes only. */
    enableQueryDetails: boolean;
    /** Configured languages of customer instance (system, metadata, default). */
    languageConfiguration: ILanguageConfiguration;
    /** Languages including translations for the configured system and metadata languages. */
    languages: ILanguage[];
    /** Configured rendering outputs including translations for the customer instance. */
    outputFormats: IOutputFormatInfo[];
    /** Boost levels that can be applied to a metadata field to boost the the significance of the field in a search operation. */
    boostValues: number[];
    /** Apps registered for this customer */
    apps?: ICustomerApp[] | undefined;
    modificationDate: Date;
    /** Url to access Frontend service */
    baseUrl: string;
    /** Base bath to access logos of customer (including trailing slash), available images: name, full, small, background */
    logosUrl: string;
}

export class LanguageConfiguration implements ILanguageConfiguration {
    /** A list of languages serving as system languages. */
    systemLanguages?: string[] | undefined;
    /** A list of languages serving as metadata languages. */
    metadataLanguages?: string[] | undefined;
    /** The default language. Not the be confused with the metadata fallback language x-default. */
    defaultLanguage?: string | undefined;

    constructor(data?: ILanguageConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["systemLanguages"])) {
                this.systemLanguages = [] as any;
                for (let item of data["systemLanguages"])
                    this.systemLanguages!.push(item);
            }
            if (Array.isArray(data["metadataLanguages"])) {
                this.metadataLanguages = [] as any;
                for (let item of data["metadataLanguages"])
                    this.metadataLanguages!.push(item);
            }
            this.defaultLanguage = data["defaultLanguage"];
        }
    }

    static fromJS(data: any): LanguageConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.systemLanguages)) {
            data["systemLanguages"] = [];
            for (let item of this.systemLanguages)
                data["systemLanguages"].push(item);
        }
        if (Array.isArray(this.metadataLanguages)) {
            data["metadataLanguages"] = [];
            for (let item of this.metadataLanguages)
                data["metadataLanguages"].push(item);
        }
        data["defaultLanguage"] = this.defaultLanguage;
        return data; 
    }
}

export interface ILanguageConfiguration {
    /** A list of languages serving as system languages. */
    systemLanguages?: string[] | undefined;
    /** A list of languages serving as metadata languages. */
    metadataLanguages?: string[] | undefined;
    /** The default language. Not the be confused with the metadata fallback language x-default. */
    defaultLanguage?: string | undefined;
}

export class Language implements ILanguage {
    /** Language translations. */
    name!: TranslatedStringDictionary;
    /** IETF language tag. E.g en, en-US, de. */
    ietf!: string;
    /** Two letter ISO language code. E.g. en, de. */
    twoLetterISOLanguageName?: string | undefined;
    /** Three letter ISO language code. E.g. eng, deu. */
    threeLetterISOLanguageName?: string | undefined;
    /** Region code of the language. E.g. US, DE, CH. */
    regionCode?: string | undefined;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.name = data.name && !(<any>data.name).toJSON ? new TranslatedStringDictionary(data.name) : <TranslatedStringDictionary>this.name; 
        }
        if (!data) {
            this.name = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] ? TranslatedStringDictionary.fromJS(data["name"]) : new TranslatedStringDictionary();
            this.ietf = data["ietf"];
            this.twoLetterISOLanguageName = data["twoLetterISOLanguageName"];
            this.threeLetterISOLanguageName = data["threeLetterISOLanguageName"];
            this.regionCode = data["regionCode"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["ietf"] = this.ietf;
        data["twoLetterISOLanguageName"] = this.twoLetterISOLanguageName;
        data["threeLetterISOLanguageName"] = this.threeLetterISOLanguageName;
        data["regionCode"] = this.regionCode;
        return data; 
    }
}

export interface ILanguage {
    /** Language translations. */
    name: ITranslatedStringDictionary;
    /** IETF language tag. E.g en, en-US, de. */
    ietf: string;
    /** Two letter ISO language code. E.g. en, de. */
    twoLetterISOLanguageName?: string | undefined;
    /** Three letter ISO language code. E.g. eng, deu. */
    threeLetterISOLanguageName?: string | undefined;
    /** Region code of the language. E.g. US, DE, CH. */
    regionCode?: string | undefined;
}

export class OutputFormatInfo implements IOutputFormatInfo {
    /** Output ID. */
    id!: string;
    /** Output translations. */
    names!: TranslatedStringDictionary;

    constructor(data?: IOutputFormatInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
        }
    }

    static fromJS(data: any): OutputFormatInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOutputFormatInfo {
    /** Output ID. */
    id: string;
    /** Output translations. */
    names: ITranslatedStringDictionary;
}

export class CustomerApp implements ICustomerApp {
    appId?: string | undefined;
    name?: TranslatedStringDictionary | undefined;
    description?: TranslatedStringDictionary | undefined;
    icon?: string | undefined;

    constructor(data?: ICustomerApp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.name = data.name && !(<any>data.name).toJSON ? new TranslatedStringDictionary(data.name) : <TranslatedStringDictionary>this.name; 
            this.description = data.description && !(<any>data.description).toJSON ? new TranslatedStringDictionary(data.description) : <TranslatedStringDictionary>this.description; 
        }
    }

    init(data?: any) {
        if (data) {
            this.appId = data["appId"];
            this.name = data["name"] ? TranslatedStringDictionary.fromJS(data["name"]) : <any>undefined;
            this.description = data["description"] ? TranslatedStringDictionary.fromJS(data["description"]) : <any>undefined;
            this.icon = data["icon"];
        }
    }

    static fromJS(data: any): CustomerApp {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerApp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        data["icon"] = this.icon;
        return data; 
    }
}

export interface ICustomerApp {
    appId?: string | undefined;
    name?: ITranslatedStringDictionary | undefined;
    description?: ITranslatedStringDictionary | undefined;
    icon?: string | undefined;
}

/** The version view item for the environment. */
export class VersionInfo implements IVersionInfo {
    /** The manual file version of Picturepark.Contract.dll. */
    fileVersion?: string | undefined;
    /** The GitVersionTask generated file product version of Picturepark.Configuration.dll. */
    fileProductVersion?: string | undefined;
    /** The current contract version stored in CustomerDoc / EnvironmentDoc. */
    contractVersion?: string | undefined;
    /** The bamboo release version. Only provided on bamboo deployments. */
    release?: string | undefined;

    constructor(data?: IVersionInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileVersion = data["fileVersion"];
            this.fileProductVersion = data["fileProductVersion"];
            this.contractVersion = data["contractVersion"];
            this.release = data["release"];
        }
    }

    static fromJS(data: any): VersionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VersionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileVersion"] = this.fileVersion;
        data["fileProductVersion"] = this.fileProductVersion;
        data["contractVersion"] = this.contractVersion;
        data["release"] = this.release;
        return data; 
    }
}

/** The version view item for the environment. */
export interface IVersionInfo {
    /** The manual file version of Picturepark.Contract.dll. */
    fileVersion?: string | undefined;
    /** The GitVersionTask generated file product version of Picturepark.Configuration.dll. */
    fileProductVersion?: string | undefined;
    /** The current contract version stored in CustomerDoc / EnvironmentDoc. */
    contractVersion?: string | undefined;
    /** The bamboo release version. Only provided on bamboo deployments. */
    release?: string | undefined;
}

export class SystemStatus implements ISystemStatus {
    /** The status of the search indices. */
    searchIndicesStatus?: StatusOfSearchIndexState[] | undefined;
    /** The status of the display values. */
    displayValuesStatus?: StatusOfDisplayValuesState[] | undefined;
    /** The status of the contents and list items. */
    metadataStatus?: StatusOfMetadataState[] | undefined;

    constructor(data?: ISystemStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.searchIndicesStatus) {
                this.searchIndicesStatus = [];
                for (let i = 0; i < data.searchIndicesStatus.length; i++) {
                    let item = data.searchIndicesStatus[i];
                    this.searchIndicesStatus[i] = item && !(<any>item).toJSON ? new StatusOfSearchIndexState(item) : <StatusOfSearchIndexState>item;
                }
            }
            if (data.displayValuesStatus) {
                this.displayValuesStatus = [];
                for (let i = 0; i < data.displayValuesStatus.length; i++) {
                    let item = data.displayValuesStatus[i];
                    this.displayValuesStatus[i] = item && !(<any>item).toJSON ? new StatusOfDisplayValuesState(item) : <StatusOfDisplayValuesState>item;
                }
            }
            if (data.metadataStatus) {
                this.metadataStatus = [];
                for (let i = 0; i < data.metadataStatus.length; i++) {
                    let item = data.metadataStatus[i];
                    this.metadataStatus[i] = item && !(<any>item).toJSON ? new StatusOfMetadataState(item) : <StatusOfMetadataState>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["searchIndicesStatus"])) {
                this.searchIndicesStatus = [] as any;
                for (let item of data["searchIndicesStatus"])
                    this.searchIndicesStatus!.push(StatusOfSearchIndexState.fromJS(item));
            }
            if (Array.isArray(data["displayValuesStatus"])) {
                this.displayValuesStatus = [] as any;
                for (let item of data["displayValuesStatus"])
                    this.displayValuesStatus!.push(StatusOfDisplayValuesState.fromJS(item));
            }
            if (Array.isArray(data["metadataStatus"])) {
                this.metadataStatus = [] as any;
                for (let item of data["metadataStatus"])
                    this.metadataStatus!.push(StatusOfMetadataState.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SystemStatus {
        data = typeof data === 'object' ? data : {};
        let result = new SystemStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.searchIndicesStatus)) {
            data["searchIndicesStatus"] = [];
            for (let item of this.searchIndicesStatus)
                data["searchIndicesStatus"].push(item.toJSON());
        }
        if (Array.isArray(this.displayValuesStatus)) {
            data["displayValuesStatus"] = [];
            for (let item of this.displayValuesStatus)
                data["displayValuesStatus"].push(item.toJSON());
        }
        if (Array.isArray(this.metadataStatus)) {
            data["metadataStatus"] = [];
            for (let item of this.metadataStatus)
                data["metadataStatus"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISystemStatus {
    /** The status of the search indices. */
    searchIndicesStatus?: IStatusOfSearchIndexState[] | undefined;
    /** The status of the display values. */
    displayValuesStatus?: IStatusOfDisplayValuesState[] | undefined;
    /** The status of the contents and list items. */
    metadataStatus?: IStatusOfMetadataState[] | undefined;
}

export class StatusOfSearchIndexState implements IStatusOfSearchIndexState {
    id?: string | undefined;
    state!: SearchIndexState;

    constructor(data?: IStatusOfSearchIndexState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): StatusOfSearchIndexState {
        data = typeof data === 'object' ? data : {};
        let result = new StatusOfSearchIndexState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        return data; 
    }
}

export interface IStatusOfSearchIndexState {
    id?: string | undefined;
    state: SearchIndexState;
}

export enum SearchIndexState {
    Green = "Green",
    Yellow = "Yellow",
    Red = "Red",
}

export class StatusOfDisplayValuesState implements IStatusOfDisplayValuesState {
    id?: string | undefined;
    state!: DisplayValuesState;

    constructor(data?: IStatusOfDisplayValuesState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): StatusOfDisplayValuesState {
        data = typeof data === 'object' ? data : {};
        let result = new StatusOfDisplayValuesState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        return data; 
    }
}

export interface IStatusOfDisplayValuesState {
    id?: string | undefined;
    state: DisplayValuesState;
}

export class StatusOfMetadataState implements IStatusOfMetadataState {
    id?: string | undefined;
    state!: MetadataState;

    constructor(data?: IStatusOfMetadataState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): StatusOfMetadataState {
        data = typeof data === 'object' ? data : {};
        let result = new StatusOfMetadataState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        return data; 
    }
}

export interface IStatusOfMetadataState {
    id?: string | undefined;
    state: MetadataState;
}

/** The state of the contents and list items */
export enum MetadataState {
    UpToDate = "UpToDate",
    Outdated = "Outdated",
    UpdateInProgress = "UpdateInProgress",
}

/** List item detail */
export class ListItemDetail implements IListItemDetail {
    /** The list item ID. */
    id!: string;
    /** The ID of the content schema. The SchemaType of the specified schema must be List. */
    contentSchemaId!: string;
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema specified
by the ContentSchemaId property. */
    content?: any | undefined;
    /** Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property. */
    displayValues?: DisplayValueDictionary | undefined;
    /** All the IDs of the referenced list items (tagboxes) that do not exist in the system. */
    brokenReferenceIds?: string[] | undefined;
    /** All the IDs of the contents or list items target of a relation that do not exist in the system. */
    brokenRelationTargetIds?: string[] | undefined;
    /** All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
They are referenced list items that reference at least a list item that do not exist in the system. */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** Audit information. */
    audit?: UserAuditDetail | undefined;

    constructor(data?: IListItemDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.displayValues = data.displayValues && !(<any>data.displayValues).toJSON ? new DisplayValueDictionary(data.displayValues) : <DisplayValueDictionary>this.displayValues; 
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contentSchemaId = data["contentSchemaId"];
            this.content = data["content"];
            this.displayValues = data["displayValues"] ? DisplayValueDictionary.fromJS(data["displayValues"]) : <any>undefined;
            if (Array.isArray(data["brokenReferenceIds"])) {
                this.brokenReferenceIds = [] as any;
                for (let item of data["brokenReferenceIds"])
                    this.brokenReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenRelationTargetIds"])) {
                this.brokenRelationTargetIds = [] as any;
                for (let item of data["brokenRelationTargetIds"])
                    this.brokenRelationTargetIds!.push(item);
            }
            if (Array.isArray(data["brokenIndirectReferenceIds"])) {
                this.brokenIndirectReferenceIds = [] as any;
                for (let item of data["brokenIndirectReferenceIds"])
                    this.brokenIndirectReferenceIds!.push(item);
            }
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListItemDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contentSchemaId"] = this.contentSchemaId;
        data["content"] = this.content;
        data["displayValues"] = this.displayValues ? this.displayValues.toJSON() : <any>undefined;
        if (Array.isArray(this.brokenReferenceIds)) {
            data["brokenReferenceIds"] = [];
            for (let item of this.brokenReferenceIds)
                data["brokenReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenRelationTargetIds)) {
            data["brokenRelationTargetIds"] = [];
            for (let item of this.brokenRelationTargetIds)
                data["brokenRelationTargetIds"].push(item);
        }
        if (Array.isArray(this.brokenIndirectReferenceIds)) {
            data["brokenIndirectReferenceIds"] = [];
            for (let item of this.brokenIndirectReferenceIds)
                data["brokenIndirectReferenceIds"].push(item);
        }
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        return data; 
    }
}

/** List item detail */
export interface IListItemDetail {
    /** The list item ID. */
    id: string;
    /** The ID of the content schema. The SchemaType of the specified schema must be List. */
    contentSchemaId: string;
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema specified
by the ContentSchemaId property. */
    content?: any | undefined;
    /** Contains language specific display values. They are calculated values based on the template stored in the Content schema DisplayPatterns property. */
    displayValues?: IDisplayValueDictionary | undefined;
    /** All the IDs of the referenced list items (tagboxes) that do not exist in the system. */
    brokenReferenceIds?: string[] | undefined;
    /** All the IDs of the contents or list items target of a relation that do not exist in the system. */
    brokenRelationTargetIds?: string[] | undefined;
    /** All the IDs of the indirectly referenced list items (tagboxes) that do not exist in the system.
They are referenced list items that reference at least a list item that do not exist in the system. */
    brokenIndirectReferenceIds?: string[] | undefined;
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
}

export enum ListItemResolveBehavior {
    Content = "Content",
    LinkedListItems = "LinkedListItems",
    InnerDisplayValueThumbnail = "InnerDisplayValueThumbnail",
    InnerDisplayValueList = "InnerDisplayValueList",
    InnerDisplayValueDetail = "InnerDisplayValueDetail",
    InnerDisplayValueName = "InnerDisplayValueName",
    OuterDisplayValueThumbnail = "OuterDisplayValueThumbnail",
    OuterDisplayValueList = "OuterDisplayValueList",
    OuterDisplayValueDetail = "OuterDisplayValueDetail",
    OuterDisplayValueName = "OuterDisplayValueName",
}

export class BaseResultOfListItem implements IBaseResultOfListItem {
    totalResults!: number;
    results!: ListItem[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new ListItem(item) : <ListItem>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(ListItem.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfListItem {
    totalResults: number;
    results: IListItem[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfListItem extends BaseResultOfListItem implements ISearchBehaviorBaseResultOfListItem {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfListItem) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfListItem extends IBaseResultOfListItem {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

export class SearchBehaviorWithAggregationBaseResultOfListItem extends SearchBehaviorBaseResultOfListItem implements ISearchBehaviorWithAggregationBaseResultOfListItem {
    aggregationResults?: AggregationResult[] | undefined;

    constructor(data?: ISearchBehaviorWithAggregationBaseResultOfListItem) {
        super(data);
        if (data) {
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchBehaviorWithAggregationBaseResultOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorWithAggregationBaseResultOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorWithAggregationBaseResultOfListItem extends ISearchBehaviorBaseResultOfListItem {
    aggregationResults?: IAggregationResult[] | undefined;
}

/** Result for list item search operation */
export class ListItemSearchResult extends SearchBehaviorWithAggregationBaseResultOfListItem implements IListItemSearchResult {

    constructor(data?: IListItemSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ListItemSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result for list item search operation */
export interface IListItemSearchResult extends ISearchBehaviorWithAggregationBaseResultOfListItem {
}

export class ListItem implements IListItem {
    /** Audit information. */
    audit?: UserAudit | undefined;
    /** The list item id. */
    id!: string;
    /** The id of the schema with schema type list. */
    contentSchemaId?: string | undefined;
    /** Contains language specific display values, rendered according to the list schema's display pattern configuration. */
    displayValues?: DisplayValueDictionary | undefined;
    /** The content data of the list item. */
    content?: any | undefined;
    /** All the ids of the broken references (tagboxes) */
    brokenReferenceIds?: string[] | undefined;
    /** All the target ids of the broken relations */
    brokenRelationTargetIds?: string[] | undefined;
    /** All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox) */
    brokenIndirectReferenceIds?: string[] | undefined;

    constructor(data?: IListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
            this.displayValues = data.displayValues && !(<any>data.displayValues).toJSON ? new DisplayValueDictionary(data.displayValues) : <DisplayValueDictionary>this.displayValues; 
        }
    }

    init(data?: any) {
        if (data) {
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : <any>undefined;
            this.id = data["id"];
            this.contentSchemaId = data["contentSchemaId"];
            this.displayValues = data["displayValues"] ? DisplayValueDictionary.fromJS(data["displayValues"]) : <any>undefined;
            this.content = data["content"];
            if (Array.isArray(data["brokenReferenceIds"])) {
                this.brokenReferenceIds = [] as any;
                for (let item of data["brokenReferenceIds"])
                    this.brokenReferenceIds!.push(item);
            }
            if (Array.isArray(data["brokenRelationTargetIds"])) {
                this.brokenRelationTargetIds = [] as any;
                for (let item of data["brokenRelationTargetIds"])
                    this.brokenRelationTargetIds!.push(item);
            }
            if (Array.isArray(data["brokenIndirectReferenceIds"])) {
                this.brokenIndirectReferenceIds = [] as any;
                for (let item of data["brokenIndirectReferenceIds"])
                    this.brokenIndirectReferenceIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["contentSchemaId"] = this.contentSchemaId;
        data["displayValues"] = this.displayValues ? this.displayValues.toJSON() : <any>undefined;
        data["content"] = this.content;
        if (Array.isArray(this.brokenReferenceIds)) {
            data["brokenReferenceIds"] = [];
            for (let item of this.brokenReferenceIds)
                data["brokenReferenceIds"].push(item);
        }
        if (Array.isArray(this.brokenRelationTargetIds)) {
            data["brokenRelationTargetIds"] = [];
            for (let item of this.brokenRelationTargetIds)
                data["brokenRelationTargetIds"].push(item);
        }
        if (Array.isArray(this.brokenIndirectReferenceIds)) {
            data["brokenIndirectReferenceIds"] = [];
            for (let item of this.brokenIndirectReferenceIds)
                data["brokenIndirectReferenceIds"].push(item);
        }
        return data; 
    }
}

export interface IListItem {
    /** Audit information. */
    audit?: IUserAudit | undefined;
    /** The list item id. */
    id: string;
    /** The id of the schema with schema type list. */
    contentSchemaId?: string | undefined;
    /** Contains language specific display values, rendered according to the list schema's display pattern configuration. */
    displayValues?: IDisplayValueDictionary | undefined;
    /** The content data of the list item. */
    content?: any | undefined;
    /** All the ids of the broken references (tagboxes) */
    brokenReferenceIds?: string[] | undefined;
    /** All the target ids of the broken relations */
    brokenRelationTargetIds?: string[] | undefined;
    /** All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox) */
    brokenIndirectReferenceIds?: string[] | undefined;
}

/** Request to aggregate list items */
export abstract class ListItemSearchAndAggregationBaseRequest implements IListItemSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    /** Broadens the search to include all schema descendant list items. */
    includeAllSchemaChildren!: boolean;
    /** Limits the aggregation to the list items that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter!: BrokenDependenciesFilter;
    /** Limits the search among the list items of the provided schemas. */
    schemaIds?: string[] | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the aggregation to the list items that have the specified life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter!: LifeCycleFilter;

    constructor(data?: IListItemSearchAndAggregationBaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            if (Array.isArray(data["aggregationFilters"])) {
                this.aggregationFilters = [] as any;
                for (let item of data["aggregationFilters"])
                    this.aggregationFilters!.push(AggregationFilter.fromJS(item));
            }
            this.includeAllSchemaChildren = data["includeAllSchemaChildren"];
            this.brokenDependenciesFilter = data["brokenDependenciesFilter"];
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            this.lifeCycleFilter = data["lifeCycleFilter"];
        }
    }

    static fromJS(data: any): ListItemSearchAndAggregationBaseRequest {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ListItemSearchAndAggregationBaseRequest' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        if (Array.isArray(this.aggregationFilters)) {
            data["aggregationFilters"] = [];
            for (let item of this.aggregationFilters)
                data["aggregationFilters"].push(item.toJSON());
        }
        data["includeAllSchemaChildren"] = this.includeAllSchemaChildren;
        data["brokenDependenciesFilter"] = this.brokenDependenciesFilter;
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        data["lifeCycleFilter"] = this.lifeCycleFilter;
        return data; 
    }
}

/** Request to aggregate list items */
export interface IListItemSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    /** Broadens the search to include all schema descendant list items. */
    includeAllSchemaChildren: boolean;
    /** Limits the aggregation to the list items that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter: BrokenDependenciesFilter;
    /** Limits the search among the list items of the provided schemas. */
    schemaIds?: string[] | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the aggregation to the list items that have the specified life cycle state. Defaults to ActiveOnly. */
    lifeCycleFilter: LifeCycleFilter;
}

/** Request to search list items */
export class ListItemSearchRequest extends ListItemSearchAndAggregationBaseRequest implements IListItemSearchRequest {
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: SortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ListItemSearchResult.
Warning! It severely affects performance. */
    debugMode!: boolean;
    /** List of enums that control which parts of the list item are resolved and returned. */
    resolveBehaviors?: ListItemResolveBehavior[] | undefined;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;

    constructor(data?: IListItemSearchRequest) {
        super(data);
        if (data) {
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["resolveBehaviors"])) {
                this.resolveBehaviors = [] as any;
                for (let item of data["resolveBehaviors"])
                    this.resolveBehaviors!.push(item);
            }
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItemSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.resolveBehaviors)) {
            data["resolveBehaviors"] = [];
            for (let item of this.resolveBehaviors)
                data["resolveBehaviors"].push(item);
        }
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to search list items */
export interface IListItemSearchRequest extends IListItemSearchAndAggregationBaseRequest {
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: ISortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the ListItemSearchResult.
Warning! It severely affects performance. */
    debugMode: boolean;
    /** List of enums that control which parts of the list item are resolved and returned. */
    resolveBehaviors?: ListItemResolveBehavior[] | undefined;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;
}

/** Request to aggregate list items */
export class ListItemAggregationRequest extends ListItemSearchAndAggregationBaseRequest implements IListItemAggregationRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators!: AggregatorBase[];

    constructor(data?: IListItemAggregationRequest) {
        super(data);
        if (!data) {
            this.aggregators = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItemAggregationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemAggregationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to aggregate list items */
export interface IListItemAggregationRequest extends IListItemSearchAndAggregationBaseRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators: AggregatorBase[];
}

/** Request to create a list item */
export class ListItemCreateRequest implements IListItemCreateRequest {
    /** The ID of the content schema. The SchemaType of the specified schema must be List. */
    contentSchemaId!: string;
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema. */
    content?: any | undefined;
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;

    constructor(data?: IListItemCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentSchemaId = data["contentSchemaId"];
            this.content = data["content"];
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): ListItemCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentSchemaId"] = this.contentSchemaId;
        data["content"] = this.content;
        data["requestId"] = this.requestId;
        return data; 
    }
}

/** Request to create a list item */
export interface IListItemCreateRequest {
    /** The ID of the content schema. The SchemaType of the specified schema must be List. */
    contentSchemaId: string;
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema. */
    content?: any | undefined;
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;
}

/** Request to create multiple list items */
export class ListItemCreateManyRequest implements IListItemCreateManyRequest {
    /** Allows creating list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;
    /** Items to be created. */
    items!: ListItemCreateRequest[];

    constructor(data?: IListItemCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new ListItemCreateRequest(item) : <ListItemCreateRequest>item;
                }
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.allowMissingDependencies = data["allowMissingDependencies"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ListItemCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItemCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to create multiple list items */
export interface IListItemCreateManyRequest {
    /** Allows creating list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
    /** Items to be created. */
    items: IListItemCreateRequest[];
}

/** Request to update an existing list item */
export class ListItemUpdateRequest implements IListItemUpdateRequest {
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema of the list item. */
    content?: any | undefined;
    /** Options to modify the behavior for updating the content.
Merge: the values specified in the Content object are merged to the existing content.
Replace: the values specified in the Content object entirely replace any existing content.
Defaults to Merge. */
    contentFieldsUpdateOptions!: UpdateOption;

    constructor(data?: IListItemUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.content = data["content"];
            this.contentFieldsUpdateOptions = data["contentFieldsUpdateOptions"];
        }
    }

    static fromJS(data: any): ListItemUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentFieldsUpdateOptions"] = this.contentFieldsUpdateOptions;
        return data; 
    }
}

/** Request to update an existing list item */
export interface IListItemUpdateRequest {
    /** The content data of the list item. It's an object of dynamic metadata whose structure is defined in the Content schema of the list item. */
    content?: any | undefined;
    /** Options to modify the behavior for updating the content.
Merge: the values specified in the Content object are merged to the existing content.
Replace: the values specified in the Content object entirely replace any existing content.
Defaults to Merge. */
    contentFieldsUpdateOptions: UpdateOption;
}

/** Request to update multiple list items */
export class ListItemUpdateManyRequest implements IListItemUpdateManyRequest {
    /** Allows updating list items with references to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;
    /** Items to be updated. */
    items!: ListItemUpdateItem[];

    constructor(data?: IListItemUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.allowMissingDependencies = data["allowMissingDependencies"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ListItemUpdateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItemUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update multiple list items */
export interface IListItemUpdateManyRequest {
    /** Allows updating list items with references to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
    /** Items to be updated. */
    items: ListItemUpdateItem[];
}

export class ListItemUpdateItem extends ListItemUpdateRequest implements IListItemUpdateItem {
    /** The list item id. */
    id!: string;

    constructor(data?: IListItemUpdateItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ListItemUpdateItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemUpdateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItemUpdateItem extends IListItemUpdateRequest {
    /** The list item id. */
    id: string;
}

/** Request to delete multiple list items */
export class ListItemDeleteManyRequest implements IListItemDeleteManyRequest {
    /** IDs of the list items to delete. */
    listItemIds!: string[];
    /** A value indicating whether references to the list item should be removed. */
    forceReferenceRemoval!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress!: boolean;

    constructor(data?: IListItemDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.listItemIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
            this.forceReferenceRemoval = data["forceReferenceRemoval"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ListItemDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        data["forceReferenceRemoval"] = this.forceReferenceRemoval;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to delete multiple list items */
export interface IListItemDeleteManyRequest {
    /** IDs of the list items to delete. */
    listItemIds: string[];
    /** A value indicating whether references to the list item should be removed. */
    forceReferenceRemoval: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress: boolean;
}

/** Request to delete multiple list items based on a provided filter */
export class ListItemDeleteManyFilterRequest implements IListItemDeleteManyFilterRequest {
    /** Filters the list items that need to be deleted. */
    filterRequest!: ListItemFilterRequest;
    /** A value indicating whether references to the list item should be removed. */
    forceReferenceRemoval!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress!: boolean;

    constructor(data?: IListItemDeleteManyFilterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.filterRequest = data.filterRequest && !(<any>data.filterRequest).toJSON ? new ListItemFilterRequest(data.filterRequest) : <ListItemFilterRequest>this.filterRequest; 
        }
        if (!data) {
            this.filterRequest = new ListItemFilterRequest();
        }
    }

    init(data?: any) {
        if (data) {
            this.filterRequest = data["filterRequest"] ? ListItemFilterRequest.fromJS(data["filterRequest"]) : new ListItemFilterRequest();
            this.forceReferenceRemoval = data["forceReferenceRemoval"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ListItemDeleteManyFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDeleteManyFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterRequest"] = this.filterRequest ? this.filterRequest.toJSON() : <any>undefined;
        data["forceReferenceRemoval"] = this.forceReferenceRemoval;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to delete multiple list items based on a provided filter */
export interface IListItemDeleteManyFilterRequest {
    /** Filters the list items that need to be deleted. */
    filterRequest: IListItemFilterRequest;
    /** A value indicating whether references to the list item should be removed. */
    forceReferenceRemoval: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the delete request. */
    notifyProgress: boolean;
}

/** Request to filter list items */
export class ListItemFilterRequest implements IListItemFilterRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional filter to limit the list items. */
    filter?: FilterBase | undefined;
    /** Broadens the search to include all schema descendant list items. */
    includeAllSchemaChildren!: boolean;
    /** Limits the search among the list items of the provided schemas. */
    schemaIds?: string[] | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the search to the list items that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter!: BrokenDependenciesFilter;

    constructor(data?: IListItemFilterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.includeAllSchemaChildren = data["includeAllSchemaChildren"];
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            this.brokenDependenciesFilter = data["brokenDependenciesFilter"];
        }
    }

    static fromJS(data: any): ListItemFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["includeAllSchemaChildren"] = this.includeAllSchemaChildren;
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        data["brokenDependenciesFilter"] = this.brokenDependenciesFilter;
        return data; 
    }
}

/** Request to filter list items */
export interface IListItemFilterRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional filter to limit the list items. */
    filter?: FilterBase | undefined;
    /** Broadens the search to include all schema descendant list items. */
    includeAllSchemaChildren: boolean;
    /** Limits the search among the list items of the provided schemas. */
    schemaIds?: string[] | undefined;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages defined in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the search to the list items that have or not have broken references. By default it includes both. */
    brokenDependenciesFilter: BrokenDependenciesFilter;
}

/** Request to restore multiple deleted list items */
export class ListItemRestoreManyRequest implements IListItemRestoreManyRequest {
    /** The IDs of the list items to restore. */
    listItemIds!: string[];
    /** Allows restoring list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;

    constructor(data?: IListItemRestoreManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.listItemIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
            this.allowMissingDependencies = data["allowMissingDependencies"];
        }
    }

    static fromJS(data: any): ListItemRestoreManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemRestoreManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        return data; 
    }
}

/** Request to restore multiple deleted list items */
export interface IListItemRestoreManyRequest {
    /** The IDs of the list items to restore. */
    listItemIds: string[];
    /** Allows restoring list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
}

/** Request to batch update list items' fields based on list item IDs */
export class ListItemFieldsBatchUpdateRequest implements IListItemFieldsBatchUpdateRequest {
    /** The ids of the list items whose fields need to be updated. */
    listItemIds!: string[];
    /** Changes that need to be applied to the existing list items. The same set of changes is applied to all list items. */
    changeCommands!: MetadataValuesChangeCommandBase[];
    /** Allows updating list items with references to list items or contents that do not exist in the system. */
    allowMissingDependencies!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress!: boolean;

    constructor(data?: IListItemFieldsBatchUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.listItemIds = [];
            this.changeCommands = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
            if (Array.isArray(data["changeCommands"])) {
                this.changeCommands = [] as any;
                for (let item of data["changeCommands"])
                    this.changeCommands!.push(MetadataValuesChangeCommandBase.fromJS(item));
            }
            this.allowMissingDependencies = data["allowMissingDependencies"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ListItemFieldsBatchUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemFieldsBatchUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        if (Array.isArray(this.changeCommands)) {
            data["changeCommands"] = [];
            for (let item of this.changeCommands)
                data["changeCommands"].push(item.toJSON());
        }
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to batch update list items' fields based on list item IDs */
export interface IListItemFieldsBatchUpdateRequest {
    /** The ids of the list items whose fields need to be updated. */
    listItemIds: string[];
    /** Changes that need to be applied to the existing list items. The same set of changes is applied to all list items. */
    changeCommands: MetadataValuesChangeCommandBase[];
    /** Allows updating list items with references to list items or contents that do not exist in the system. */
    allowMissingDependencies: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress: boolean;
}

/** Request to batch update list items' fields based on a filter */
export class ListItemFieldsBatchUpdateFilterRequest implements IListItemFieldsBatchUpdateFilterRequest {
    /** Filters the list items on which the change commands must be applied. */
    filterRequest!: ListItemFilterRequest;
    /** Changes that need to be applied to the existing list items. The same set of changes is applied to all list items. */
    changeCommands!: MetadataValuesChangeCommandBase[];
    /** Allow updating list items with references to list items or contents that do not exist in the system. */
    allowMissingDependencies!: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress!: boolean;

    constructor(data?: IListItemFieldsBatchUpdateFilterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.filterRequest = data.filterRequest && !(<any>data.filterRequest).toJSON ? new ListItemFilterRequest(data.filterRequest) : <ListItemFilterRequest>this.filterRequest; 
        }
        if (!data) {
            this.filterRequest = new ListItemFilterRequest();
            this.changeCommands = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.filterRequest = data["filterRequest"] ? ListItemFilterRequest.fromJS(data["filterRequest"]) : new ListItemFilterRequest();
            if (Array.isArray(data["changeCommands"])) {
                this.changeCommands = [] as any;
                for (let item of data["changeCommands"])
                    this.changeCommands!.push(MetadataValuesChangeCommandBase.fromJS(item));
            }
            this.allowMissingDependencies = data["allowMissingDependencies"];
            this.notifyProgress = data["notifyProgress"];
        }
    }

    static fromJS(data: any): ListItemFieldsBatchUpdateFilterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemFieldsBatchUpdateFilterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterRequest"] = this.filterRequest ? this.filterRequest.toJSON() : <any>undefined;
        if (Array.isArray(this.changeCommands)) {
            data["changeCommands"] = [];
            for (let item of this.changeCommands)
                data["changeCommands"].push(item.toJSON());
        }
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        data["notifyProgress"] = this.notifyProgress;
        return data; 
    }
}

/** Request to batch update list items' fields based on a filter */
export interface IListItemFieldsBatchUpdateFilterRequest {
    /** Filters the list items on which the change commands must be applied. */
    filterRequest: IListItemFilterRequest;
    /** Changes that need to be applied to the existing list items. The same set of changes is applied to all list items. */
    changeCommands: MetadataValuesChangeCommandBase[];
    /** Allow updating list items with references to list items or contents that do not exist in the system. */
    allowMissingDependencies: boolean;
    /** Create a progress notification and notify on progress. Notifications are shown in the UI only to the same use who triggered the batch update. */
    notifyProgress: boolean;
}

/** Result from getting references to list items. */
export class ListItemReferencesResult implements IListItemReferencesResult {
    /** List of references. Only available when requested in the request. */
    metadataReferences?: MetadataReferenceResult | undefined;

    constructor(data?: IListItemReferencesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.metadataReferences = data.metadataReferences && !(<any>data.metadataReferences).toJSON ? new MetadataReferenceResult(data.metadataReferences) : <MetadataReferenceResult>this.metadataReferences; 
        }
    }

    init(data?: any) {
        if (data) {
            this.metadataReferences = data["metadataReferences"] ? MetadataReferenceResult.fromJS(data["metadataReferences"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListItemReferencesResult {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemReferencesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metadataReferences"] = this.metadataReferences ? this.metadataReferences.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result from getting references to list items. */
export interface IListItemReferencesResult {
    /** List of references. Only available when requested in the request. */
    metadataReferences?: IMetadataReferenceResult | undefined;
}

/** Request to get the references to a list item */
export class ListItemReferencesRequest implements IListItemReferencesRequest {
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: MetadataReferencesPagingRequest | undefined;

    constructor(data?: IListItemReferencesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.references = data.references && !(<any>data.references).toJSON ? new MetadataReferencesPagingRequest(data.references) : <MetadataReferencesPagingRequest>this.references; 
        }
    }

    init(data?: any) {
        if (data) {
            this.references = data["references"] ? MetadataReferencesPagingRequest.fromJS(data["references"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListItemReferencesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemReferencesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["references"] = this.references ? this.references.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to get the references to a list item */
export interface IListItemReferencesRequest {
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: IMetadataReferencesPagingRequest | undefined;
}

/** Request to get the references to multiple list items */
export class ListItemManyReferencesRequest implements IListItemManyReferencesRequest {
    /** The IDs of the list items whose references need to be retrieved. */
    listItemIds!: string[];
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: MetadataReferencesPagingRequest | undefined;

    constructor(data?: IListItemManyReferencesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.references = data.references && !(<any>data.references).toJSON ? new MetadataReferencesPagingRequest(data.references) : <MetadataReferencesPagingRequest>this.references; 
        }
        if (!data) {
            this.listItemIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["listItemIds"])) {
                this.listItemIds = [] as any;
                for (let item of data["listItemIds"])
                    this.listItemIds!.push(item);
            }
            this.references = data["references"] ? MetadataReferencesPagingRequest.fromJS(data["references"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListItemManyReferencesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemManyReferencesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItemIds)) {
            data["listItemIds"] = [];
            for (let item of this.listItemIds)
                data["listItemIds"].push(item);
        }
        data["references"] = this.references ? this.references.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to get the references to multiple list items */
export interface IListItemManyReferencesRequest {
    /** The IDs of the list items whose references need to be retrieved. */
    listItemIds: string[];
    /** Limits the number of the returned metadata references by setting paging information. */
    references?: IMetadataReferencesPagingRequest | undefined;
}

export abstract class Message implements IMessage {
    id?: string | undefined;
    maximumRetryCount!: number;
    retries!: number;
    priority!: number;
    deduplicate!: boolean;

    protected _discriminator: string;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Message";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.maximumRetryCount = data["maximumRetryCount"];
            this.retries = data["retries"];
            this.priority = data["priority"];
            this.deduplicate = data["deduplicate"];
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "LiveStreamMessage") {
            let result = new LiveStreamMessage();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ConsoleMessage") {
            let result = new ConsoleMessage();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NodeInfoMessage") {
            let result = new NodeInfoMessage();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Message' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["maximumRetryCount"] = this.maximumRetryCount;
        data["retries"] = this.retries;
        data["priority"] = this.priority;
        data["deduplicate"] = this.deduplicate;
        return data; 
    }
}

export interface IMessage {
    id?: string | undefined;
    maximumRetryCount: number;
    retries: number;
    priority: number;
    deduplicate: boolean;
}

export class LiveStreamMessage extends Message implements ILiveStreamMessage {
    customerId?: string | undefined;
    customerAlias?: string | undefined;
    timestamp!: Date;
    scope?: string | undefined;
    documentChange?: DocumentChange | undefined;
    applicationEvent?: ApplicationEvent | undefined;

    constructor(data?: ILiveStreamMessage) {
        super(data);
        if (data) {
            this.documentChange = data.documentChange && !(<any>data.documentChange).toJSON ? new DocumentChange(data.documentChange) : <DocumentChange>this.documentChange; 
        }
        this._discriminator = "LiveStreamMessage";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.customerId = data["customerId"];
            this.customerAlias = data["customerAlias"];
            this.timestamp = data["timestamp"] ? new Date(data["timestamp"].toString()) : <any>undefined;
            this.scope = data["scope"];
            this.documentChange = data["documentChange"] ? DocumentChange.fromJS(data["documentChange"]) : <any>undefined;
            this.applicationEvent = data["applicationEvent"] ? ApplicationEvent.fromJS(data["applicationEvent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LiveStreamMessage {
        data = typeof data === 'object' ? data : {};
        let result = new LiveStreamMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["customerAlias"] = this.customerAlias;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["scope"] = this.scope;
        data["documentChange"] = this.documentChange ? this.documentChange.toJSON() : <any>undefined;
        data["applicationEvent"] = this.applicationEvent ? this.applicationEvent.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILiveStreamMessage extends IMessage {
    customerId?: string | undefined;
    customerAlias?: string | undefined;
    timestamp: Date;
    scope?: string | undefined;
    documentChange?: IDocumentChange | undefined;
    applicationEvent?: ApplicationEvent | undefined;
}

export class DocumentChange implements IDocumentChange {
    documentName?: string | undefined;
    documentId?: string | undefined;
    version!: number;
    action?: string | undefined;
    timeStamp!: Date;

    constructor(data?: IDocumentChange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.documentName = data["documentName"];
            this.documentId = data["documentId"];
            this.version = data["version"];
            this.action = data["action"];
            this.timeStamp = data["timeStamp"] ? new Date(data["timeStamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentChange {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentName"] = this.documentName;
        data["documentId"] = this.documentId;
        data["version"] = this.version;
        data["action"] = this.action;
        data["timeStamp"] = this.timeStamp ? this.timeStamp.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDocumentChange {
    documentName?: string | undefined;
    documentId?: string | undefined;
    version: number;
    action?: string | undefined;
    timeStamp: Date;
}

export class ApplicationEvent implements IApplicationEvent {
    timestamp!: Date;

    protected _discriminator: string;

    constructor(data?: IApplicationEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ApplicationEvent";
    }

    init(data?: any) {
        if (data) {
            this.timestamp = data["timestamp"] ? new Date(data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationEvent {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "TransferEvent") {
            let result = new TransferEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ReindexEvent") {
            let result = new ReindexEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentDetailViewEvent") {
            let result = new ContentDetailViewEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ContentDownloadEvent") {
            let result = new ContentDownloadEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SessionRenewalEvent") {
            let result = new SessionRenewalEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SharePageViewEvent") {
            let result = new SharePageViewEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ApiStatisticsEvent") {
            let result = new ApiStatisticsEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessEvent") {
            let result = new BusinessProcessEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "OutputRenderedEvent") {
            let result = new OutputRenderedEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ConfigurationChangeEvent") {
            let result = new ConfigurationChangeEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CustomerChangeEvent") {
            let result = new CustomerChangeEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SearchReindexCompletedEvent") {
            let result = new SearchReindexCompletedEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessRuleFiredEvent") {
            let result = new BusinessRuleFiredEvent();
            result.init(data);
            return result;
        }
        if (data["kind"] === "BusinessProcessCancellationRequestedEvent") {
            let result = new BusinessProcessCancellationRequestedEvent();
            result.init(data);
            return result;
        }
        let result = new ApplicationEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IApplicationEvent {
    timestamp: Date;
}

export class TransferEvent extends ApplicationEvent implements ITransferEvent {
    transferId?: string | undefined;
    state!: TransferState;

    constructor(data?: ITransferEvent) {
        super(data);
        this._discriminator = "TransferEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.transferId = data["transferId"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): TransferEvent {
        data = typeof data === 'object' ? data : {};
        let result = new TransferEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferId"] = this.transferId;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface ITransferEvent extends IApplicationEvent {
    transferId?: string | undefined;
    state: TransferState;
}

/** Transfer states */
export enum TransferState {
    Draft = "Draft",
    UploadInProgress = "UploadInProgress",
    UploadCompleted = "UploadCompleted",
    ImportInProgress = "ImportInProgress",
    ImportCompleted = "ImportCompleted",
    UploadCancelled = "UploadCancelled",
    ImportCancelled = "ImportCancelled",
    ImportFailed = "ImportFailed",
    Created = "Created",
    Deleted = "Deleted",
    TransferReady = "TransferReady",
    FileDeleteInProgress = "FileDeleteInProgress",
    TransferCleanup = "TransferCleanup",
    ImportCompletedWithErrors = "ImportCompletedWithErrors",
    UploadCompletedWithErrors = "UploadCompletedWithErrors",
    UploadCancellationInProgress = "UploadCancellationInProgress",
    ImportDone = "ImportDone",
}

export class ReindexEvent extends ApplicationEvent implements IReindexEvent {
    indexId?: string | undefined;
    state!: IndexState;

    constructor(data?: IReindexEvent) {
        super(data);
        this._discriminator = "ReindexEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.indexId = data["indexId"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): ReindexEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ReindexEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexId"] = this.indexId;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface IReindexEvent extends IApplicationEvent {
    indexId?: string | undefined;
    state: IndexState;
}

export enum IndexState {
    Draft = "Draft",
    Create = "Create",
    Inactive = "Inactive",
    Active = "Active",
    Closed = "Closed",
    ReindexInProgress = "ReindexInProgress",
    Cancelled = "Cancelled",
}

export class ContentDetailViewEvent extends ApplicationEvent implements IContentDetailViewEvent {
    contentIds?: string[] | undefined;

    constructor(data?: IContentDetailViewEvent) {
        super(data);
        this._discriminator = "ContentDetailViewEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentDetailViewEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDetailViewEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IContentDetailViewEvent extends IApplicationEvent {
    contentIds?: string[] | undefined;
}

export class ContentDownloadEvent extends ApplicationEvent implements IContentDownloadEvent {
    downloadInfos?: DownloadTrackingInfo[] | undefined;
    fileSize!: number;
    shareToken?: string | undefined;
    range?: string | undefined;

    constructor(data?: IContentDownloadEvent) {
        super(data);
        if (data) {
            if (data.downloadInfos) {
                this.downloadInfos = [];
                for (let i = 0; i < data.downloadInfos.length; i++) {
                    let item = data.downloadInfos[i];
                    this.downloadInfos[i] = item && !(<any>item).toJSON ? new DownloadTrackingInfo(item) : <DownloadTrackingInfo>item;
                }
            }
        }
        this._discriminator = "ContentDownloadEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["downloadInfos"])) {
                this.downloadInfos = [] as any;
                for (let item of data["downloadInfos"])
                    this.downloadInfos!.push(DownloadTrackingInfo.fromJS(item));
            }
            this.fileSize = data["fileSize"];
            this.shareToken = data["shareToken"];
            this.range = data["range"];
        }
    }

    static fromJS(data: any): ContentDownloadEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDownloadEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.downloadInfos)) {
            data["downloadInfos"] = [];
            for (let item of this.downloadInfos)
                data["downloadInfos"].push(item.toJSON());
        }
        data["fileSize"] = this.fileSize;
        data["shareToken"] = this.shareToken;
        data["range"] = this.range;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentDownloadEvent extends IApplicationEvent {
    downloadInfos?: IDownloadTrackingInfo[] | undefined;
    fileSize: number;
    shareToken?: string | undefined;
    range?: string | undefined;
}

export class DownloadTrackingInfo implements IDownloadTrackingInfo {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    contentDisposition!: ContentDisposition;

    constructor(data?: IDownloadTrackingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
            this.width = data["width"];
            this.height = data["height"];
            this.contentDisposition = data["contentDisposition"];
        }
    }

    static fromJS(data: any): DownloadTrackingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadTrackingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        data["width"] = this.width;
        data["height"] = this.height;
        data["contentDisposition"] = this.contentDisposition;
        return data; 
    }
}

export interface IDownloadTrackingInfo {
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    contentDisposition: ContentDisposition;
}

export enum ContentDisposition {
    Attachment = "Attachment",
    Inline = "Inline",
}

export class SessionRenewalEvent extends ApplicationEvent implements ISessionRenewalEvent {
    authorizationState!: AuthorizationState;

    constructor(data?: ISessionRenewalEvent) {
        super(data);
        this._discriminator = "SessionRenewalEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.authorizationState = data["authorizationState"];
        }
    }

    static fromJS(data: any): SessionRenewalEvent {
        data = typeof data === 'object' ? data : {};
        let result = new SessionRenewalEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authorizationState"] = this.authorizationState;
        super.toJSON(data);
        return data; 
    }
}

export interface ISessionRenewalEvent extends IApplicationEvent {
    authorizationState: AuthorizationState;
}

/** User authorization state */
export enum AuthorizationState {
    Reviewed = "Reviewed",
    ToBeReviewed = "ToBeReviewed",
    Invited = "Invited",
    UserTriggeredDeactivation = "UserTriggeredDeactivation",
}

export class SharePageViewEvent extends ApplicationEvent implements ISharePageViewEvent {
    shareToken?: string | undefined;

    constructor(data?: ISharePageViewEvent) {
        super(data);
        this._discriminator = "SharePageViewEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.shareToken = data["shareToken"];
        }
    }

    static fromJS(data: any): SharePageViewEvent {
        data = typeof data === 'object' ? data : {};
        let result = new SharePageViewEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareToken"] = this.shareToken;
        super.toJSON(data);
        return data; 
    }
}

export interface ISharePageViewEvent extends IApplicationEvent {
    shareToken?: string | undefined;
}

export class ApiStatisticsEvent extends ApplicationEvent implements IApiStatisticsEvent {
    requestsPerClient?: { [key: string] : number; } | undefined;

    constructor(data?: IApiStatisticsEvent) {
        super(data);
        this._discriminator = "ApiStatisticsEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["requestsPerClient"]) {
                this.requestsPerClient = {} as any;
                for (let key in data["requestsPerClient"]) {
                    if (data["requestsPerClient"].hasOwnProperty(key))
                        this.requestsPerClient![key] = data["requestsPerClient"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApiStatisticsEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ApiStatisticsEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.requestsPerClient) {
            data["requestsPerClient"] = {};
            for (let key in this.requestsPerClient) {
                if (this.requestsPerClient.hasOwnProperty(key))
                    data["requestsPerClient"][key] = this.requestsPerClient[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiStatisticsEvent extends IApplicationEvent {
    requestsPerClient?: { [key: string] : number; } | undefined;
}

export class BusinessProcessEvent extends ApplicationEvent implements IBusinessProcessEvent {
    businessProcessId?: string | undefined;
    lifeCycle?: BusinessProcessLifeCycle | undefined;
    state?: string | undefined;

    constructor(data?: IBusinessProcessEvent) {
        super(data);
        this._discriminator = "BusinessProcessEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
            this.lifeCycle = data["lifeCycle"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): BusinessProcessEvent {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        data["lifeCycle"] = this.lifeCycle;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessEvent extends IApplicationEvent {
    businessProcessId?: string | undefined;
    lifeCycle?: BusinessProcessLifeCycle | undefined;
    state?: string | undefined;
}

export class OutputRenderedEvent extends ApplicationEvent implements IOutputRenderedEvent {
    outputId?: string | undefined;
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    renderingState!: OutputRenderingState;

    constructor(data?: IOutputRenderedEvent) {
        super(data);
        this._discriminator = "OutputRenderedEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.outputId = data["outputId"];
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
            this.renderingState = data["renderingState"];
        }
    }

    static fromJS(data: any): OutputRenderedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new OutputRenderedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outputId"] = this.outputId;
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        data["renderingState"] = this.renderingState;
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputRenderedEvent extends IApplicationEvent {
    outputId?: string | undefined;
    contentId?: string | undefined;
    outputFormatId?: string | undefined;
    renderingState: OutputRenderingState;
}

export class ConfigurationChangeEvent extends ApplicationEvent implements IConfigurationChangeEvent {
    documentType?: string | undefined;

    constructor(data?: IConfigurationChangeEvent) {
        super(data);
        this._discriminator = "ConfigurationChangeEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.documentType = data["documentType"];
        }
    }

    static fromJS(data: any): ConfigurationChangeEvent {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "CustomerChangeEvent") {
            let result = new CustomerChangeEvent();
            result.init(data);
            return result;
        }
        let result = new ConfigurationChangeEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentType"] = this.documentType;
        super.toJSON(data);
        return data; 
    }
}

export interface IConfigurationChangeEvent extends IApplicationEvent {
    documentType?: string | undefined;
}

export class CustomerChangeEvent extends ConfigurationChangeEvent implements ICustomerChangeEvent {
    lifeCycle!: LifeCycle;

    constructor(data?: ICustomerChangeEvent) {
        super(data);
        this._discriminator = "CustomerChangeEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.lifeCycle = data["lifeCycle"];
        }
    }

    static fromJS(data: any): CustomerChangeEvent {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerChangeEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lifeCycle"] = this.lifeCycle;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerChangeEvent extends IConfigurationChangeEvent {
    lifeCycle: LifeCycle;
}

export class SearchReindexCompletedEvent extends ApplicationEvent implements ISearchReindexCompletedEvent {
    searchIndex!: SearchIndexType;
    items!: number;
    duration!: string;

    constructor(data?: ISearchReindexCompletedEvent) {
        super(data);
        this._discriminator = "SearchReindexCompletedEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchIndex = data["searchIndex"];
            this.items = data["items"];
            this.duration = data["duration"];
        }
    }

    static fromJS(data: any): SearchReindexCompletedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new SearchReindexCompletedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchIndex"] = this.searchIndex;
        data["items"] = this.items;
        data["duration"] = this.duration;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchReindexCompletedEvent extends IApplicationEvent {
    searchIndex: SearchIndexType;
    items: number;
    duration: string;
}

export enum SearchIndexType {
    Content = "Content",
    ListItem = "ListItem",
}

export class BusinessRuleFiredEvent extends ApplicationEvent implements IBusinessRuleFiredEvent {
    details?: BusinessRuleFiredEventDetail[] | undefined;

    constructor(data?: IBusinessRuleFiredEvent) {
        super(data);
        if (data) {
            if (data.details) {
                this.details = [];
                for (let i = 0; i < data.details.length; i++) {
                    let item = data.details[i];
                    this.details[i] = item && !(<any>item).toJSON ? new BusinessRuleFiredEventDetail(item) : <BusinessRuleFiredEventDetail>item;
                }
            }
        }
        this._discriminator = "BusinessRuleFiredEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["details"])) {
                this.details = [] as any;
                for (let item of data["details"])
                    this.details!.push(BusinessRuleFiredEventDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessRuleFiredEvent {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleFiredEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessRuleFiredEvent extends IApplicationEvent {
    details?: IBusinessRuleFiredEventDetail[] | undefined;
}

export class BusinessRuleFiredEventDetail implements IBusinessRuleFiredEventDetail {
    documentId?: string | undefined;
    documentType?: string | undefined;
    ruleIds?: string[] | undefined;

    constructor(data?: IBusinessRuleFiredEventDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.documentId = data["documentId"];
            this.documentType = data["documentType"];
            if (Array.isArray(data["ruleIds"])) {
                this.ruleIds = [] as any;
                for (let item of data["ruleIds"])
                    this.ruleIds!.push(item);
            }
        }
    }

    static fromJS(data: any): BusinessRuleFiredEventDetail {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessRuleFiredEventDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["documentType"] = this.documentType;
        if (Array.isArray(this.ruleIds)) {
            data["ruleIds"] = [];
            for (let item of this.ruleIds)
                data["ruleIds"].push(item);
        }
        return data; 
    }
}

export interface IBusinessRuleFiredEventDetail {
    documentId?: string | undefined;
    documentType?: string | undefined;
    ruleIds?: string[] | undefined;
}

export class BusinessProcessCancellationRequestedEvent extends ApplicationEvent implements IBusinessProcessCancellationRequestedEvent {
    businessProcessId?: string | undefined;

    constructor(data?: IBusinessProcessCancellationRequestedEvent) {
        super(data);
        this._discriminator = "BusinessProcessCancellationRequestedEvent";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.businessProcessId = data["businessProcessId"];
        }
    }

    static fromJS(data: any): BusinessProcessCancellationRequestedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessProcessCancellationRequestedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessProcessId"] = this.businessProcessId;
        super.toJSON(data);
        return data; 
    }
}

export interface IBusinessProcessCancellationRequestedEvent extends IApplicationEvent {
    businessProcessId?: string | undefined;
}

export class ConsoleMessage extends Message implements IConsoleMessage {
    command?: string | undefined;
    arguments?: TupleOfStringAndString[] | undefined;
    targetQueue?: string | undefined;

    constructor(data?: IConsoleMessage) {
        super(data);
        if (data) {
            if (data.arguments) {
                this.arguments = [];
                for (let i = 0; i < data.arguments.length; i++) {
                    let item = data.arguments[i];
                    this.arguments[i] = item && !(<any>item).toJSON ? new TupleOfStringAndString(item) : <TupleOfStringAndString>item;
                }
            }
        }
        this._discriminator = "ConsoleMessage";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.command = data["command"];
            if (Array.isArray(data["arguments"])) {
                this.arguments = [] as any;
                for (let item of data["arguments"])
                    this.arguments!.push(TupleOfStringAndString.fromJS(item));
            }
            this.targetQueue = data["targetQueue"];
        }
    }

    static fromJS(data: any): ConsoleMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ConsoleMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["command"] = this.command;
        if (Array.isArray(this.arguments)) {
            data["arguments"] = [];
            for (let item of this.arguments)
                data["arguments"].push(item.toJSON());
        }
        data["targetQueue"] = this.targetQueue;
        super.toJSON(data);
        return data; 
    }
}

export interface IConsoleMessage extends IMessage {
    command?: string | undefined;
    arguments?: ITupleOfStringAndString[] | undefined;
    targetQueue?: string | undefined;
}

export class TupleOfStringAndString implements ITupleOfStringAndString {
    item1?: string | undefined;
    item2?: string | undefined;

    constructor(data?: ITupleOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.item1 = data["item1"];
            this.item2 = data["item2"];
        }
    }

    static fromJS(data: any): TupleOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data; 
    }
}

export interface ITupleOfStringAndString {
    item1?: string | undefined;
    item2?: string | undefined;
}

export class NodeInfoMessage extends Message implements INodeInfoMessage {
    nodeId?: string | undefined;
    hostName?: string | undefined;
    lastResponseTime!: Date;
    serviceName?: string | undefined;
    fileVersion?: string | undefined;
    productVersion?: string | undefined;
    release?: string | undefined;
    logLevel?: string | undefined;

    constructor(data?: INodeInfoMessage) {
        super(data);
        this._discriminator = "NodeInfoMessage";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nodeId = data["nodeId"];
            this.hostName = data["hostName"];
            this.lastResponseTime = data["lastResponseTime"] ? new Date(data["lastResponseTime"].toString()) : <any>undefined;
            this.serviceName = data["serviceName"];
            this.fileVersion = data["fileVersion"];
            this.productVersion = data["productVersion"];
            this.release = data["release"];
            this.logLevel = data["logLevel"];
        }
    }

    static fromJS(data: any): NodeInfoMessage {
        data = typeof data === 'object' ? data : {};
        let result = new NodeInfoMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["hostName"] = this.hostName;
        data["lastResponseTime"] = this.lastResponseTime ? this.lastResponseTime.toISOString() : <any>undefined;
        data["serviceName"] = this.serviceName;
        data["fileVersion"] = this.fileVersion;
        data["productVersion"] = this.productVersion;
        data["release"] = this.release;
        data["logLevel"] = this.logLevel;
        super.toJSON(data);
        return data; 
    }
}

export interface INodeInfoMessage extends IMessage {
    nodeId?: string | undefined;
    hostName?: string | undefined;
    lastResponseTime: Date;
    serviceName?: string | undefined;
    fileVersion?: string | undefined;
    productVersion?: string | undefined;
    release?: string | undefined;
    logLevel?: string | undefined;
}

export class BaseResultOfLiveStream implements IBaseResultOfLiveStream {
    totalResults!: number;
    results!: LiveStream[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfLiveStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new LiveStream(item) : <LiveStream>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(LiveStream.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfLiveStream {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfLiveStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfLiveStream {
    totalResults: number;
    results: ILiveStream[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

/** Results of live stream search. */
export class LiveStreamSearchResult extends BaseResultOfLiveStream implements ILiveStreamSearchResult {

    constructor(data?: ILiveStreamSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): LiveStreamSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new LiveStreamSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Results of live stream search. */
export interface ILiveStreamSearchResult extends IBaseResultOfLiveStream {
}

export class LiveStream implements ILiveStream {
    id!: string;
    document?: string | undefined;
    scopeType?: string | undefined;
    timestamp!: Date;
    traceJob?: LiveStreamTraceJob | undefined;
    audit?: UserAudit | undefined;

    constructor(data?: ILiveStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.traceJob = data.traceJob && !(<any>data.traceJob).toJSON ? new LiveStreamTraceJob(data.traceJob) : <LiveStreamTraceJob>this.traceJob; 
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.document = data["document"];
            this.scopeType = data["scopeType"];
            this.timestamp = data["timestamp"] ? new Date(data["timestamp"].toString()) : <any>undefined;
            this.traceJob = data["traceJob"] ? LiveStreamTraceJob.fromJS(data["traceJob"]) : <any>undefined;
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LiveStream {
        data = typeof data === 'object' ? data : {};
        let result = new LiveStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["document"] = this.document;
        data["scopeType"] = this.scopeType;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["traceJob"] = this.traceJob ? this.traceJob.toJSON() : <any>undefined;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILiveStream {
    id: string;
    document?: string | undefined;
    scopeType?: string | undefined;
    timestamp: Date;
    traceJob?: ILiveStreamTraceJob | undefined;
    audit?: IUserAudit | undefined;
}

export class LiveStreamTraceJob implements ILiveStreamTraceJob {
    traceJobId?: string | undefined;
    ipAddress?: string | undefined;
    userId?: string | undefined;
    apiClientId?: string | undefined;

    constructor(data?: ILiveStreamTraceJob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.traceJobId = data["traceJobId"];
            this.ipAddress = data["ipAddress"];
            this.userId = data["userId"];
            this.apiClientId = data["apiClientId"];
        }
    }

    static fromJS(data: any): LiveStreamTraceJob {
        data = typeof data === 'object' ? data : {};
        let result = new LiveStreamTraceJob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["traceJobId"] = this.traceJobId;
        data["ipAddress"] = this.ipAddress;
        data["userId"] = this.userId;
        data["apiClientId"] = this.apiClientId;
        return data; 
    }
}

export interface ILiveStreamTraceJob {
    traceJobId?: string | undefined;
    ipAddress?: string | undefined;
    userId?: string | undefined;
    apiClientId?: string | undefined;
}

export class LiveStreamSearchRequest implements ILiveStreamSearchRequest {
    /** Sets the start date and time for results based on Timestamp attribute. */
    from!: Date;
    /** Sets the end date and time for results based on Timestamp attribute. */
    to!: Date;
    /** Optionally limits the result to only the specified scope type. */
    scopeType?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Limits the document count of the result set. Defaults to 30. */
    limit!: number;
    /** To get a large amount of data, page token returned from the response can be used to get all data. */
    pageToken?: string | undefined;

    constructor(data?: ILiveStreamSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.from = data["from"] ? new Date(data["from"].toString()) : <any>undefined;
            this.to = data["to"] ? new Date(data["to"].toString()) : <any>undefined;
            this.scopeType = data["scopeType"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): LiveStreamSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LiveStreamSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        data["scopeType"] = this.scopeType;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface ILiveStreamSearchRequest {
    /** Sets the start date and time for results based on Timestamp attribute. */
    from: Date;
    /** Sets the end date and time for results based on Timestamp attribute. */
    to: Date;
    /** Optionally limits the result to only the specified scope type. */
    scopeType?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Limits the document count of the result set. Defaults to 30. */
    limit: number;
    /** To get a large amount of data, page token returned from the response can be used to get all data. */
    pageToken?: string | undefined;
}

/** The overall status of the contents and list items in comparison to the actual schemas' structure */
export class MetadataStatus implements IMetadataStatus {
    /** The schema ids (of type Content or Layer) for which the contents are outdated and need to be updated. */
    contentOrLayerSchemaIds?: string[] | undefined;
    /** The schema ids (of type List) for which the the list items are outdated and need to be updated. */
    listSchemaIds?: string[] | undefined;
    /** The global state of the Contents and ListItems compared to the schema structure (Green = ok, Red = update needed). */
    state!: MetadataState;
    /** The field ids that that cannot be used and needs to be cleaned up after updating the outdated contents and list items. */
    fieldIdsToCleanup?: { [key: string] : string[]; } | undefined;

    constructor(data?: IMetadataStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["contentOrLayerSchemaIds"])) {
                this.contentOrLayerSchemaIds = [] as any;
                for (let item of data["contentOrLayerSchemaIds"])
                    this.contentOrLayerSchemaIds!.push(item);
            }
            if (Array.isArray(data["listSchemaIds"])) {
                this.listSchemaIds = [] as any;
                for (let item of data["listSchemaIds"])
                    this.listSchemaIds!.push(item);
            }
            this.state = data["state"];
            if (data["fieldIdsToCleanup"]) {
                this.fieldIdsToCleanup = {} as any;
                for (let key in data["fieldIdsToCleanup"]) {
                    if (data["fieldIdsToCleanup"].hasOwnProperty(key))
                        this.fieldIdsToCleanup![key] = data["fieldIdsToCleanup"][key] !== undefined ? data["fieldIdsToCleanup"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): MetadataStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentOrLayerSchemaIds)) {
            data["contentOrLayerSchemaIds"] = [];
            for (let item of this.contentOrLayerSchemaIds)
                data["contentOrLayerSchemaIds"].push(item);
        }
        if (Array.isArray(this.listSchemaIds)) {
            data["listSchemaIds"] = [];
            for (let item of this.listSchemaIds)
                data["listSchemaIds"].push(item);
        }
        data["state"] = this.state;
        if (this.fieldIdsToCleanup) {
            data["fieldIdsToCleanup"] = {};
            for (let key in this.fieldIdsToCleanup) {
                if (this.fieldIdsToCleanup.hasOwnProperty(key))
                    data["fieldIdsToCleanup"][key] = this.fieldIdsToCleanup[key];
            }
        }
        return data; 
    }
}

/** The overall status of the contents and list items in comparison to the actual schemas' structure */
export interface IMetadataStatus {
    /** The schema ids (of type Content or Layer) for which the contents are outdated and need to be updated. */
    contentOrLayerSchemaIds?: string[] | undefined;
    /** The schema ids (of type List) for which the the list items are outdated and need to be updated. */
    listSchemaIds?: string[] | undefined;
    /** The global state of the Contents and ListItems compared to the schema structure (Green = ok, Red = update needed). */
    state: MetadataState;
    /** The field ids that that cannot be used and needs to be cleaned up after updating the outdated contents and list items. */
    fieldIdsToCleanup?: { [key: string] : string[]; } | undefined;
}

export class BaseResultOfOutput implements IBaseResultOfOutput {
    totalResults!: number;
    results!: Output[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(Output.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfOutput {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfOutput {
    totalResults: number;
    results: Output[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class OutputSearchResult extends BaseResultOfOutput implements IOutputSearchResult {

    constructor(data?: IOutputSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): OutputSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new OutputSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOutputSearchResult extends IBaseResultOfOutput {
}

export class OutputSearchRequest implements IOutputSearchRequest {
    /** Limits the document count of the result set. Defaults to 30. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** List of Content ids you want to use to fetch the outputs. */
    contentIds?: string[] | undefined;
    /** The allowed rendering states of the outputs you want to fetch. */
    renderingStates?: OutputRenderingState[] | undefined;
    /** The file extension of the outputs you want to fetch. */
    fileExtensions?: string[] | undefined;
    /** The output format id of the outputs you want to fetch. */
    outputFormatIds?: string[] | undefined;

    constructor(data?: IOutputSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            if (Array.isArray(data["renderingStates"])) {
                this.renderingStates = [] as any;
                for (let item of data["renderingStates"])
                    this.renderingStates!.push(item);
            }
            if (Array.isArray(data["fileExtensions"])) {
                this.fileExtensions = [] as any;
                for (let item of data["fileExtensions"])
                    this.fileExtensions!.push(item);
            }
            if (Array.isArray(data["outputFormatIds"])) {
                this.outputFormatIds = [] as any;
                for (let item of data["outputFormatIds"])
                    this.outputFormatIds!.push(item);
            }
        }
    }

    static fromJS(data: any): OutputSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        if (Array.isArray(this.renderingStates)) {
            data["renderingStates"] = [];
            for (let item of this.renderingStates)
                data["renderingStates"].push(item);
        }
        if (Array.isArray(this.fileExtensions)) {
            data["fileExtensions"] = [];
            for (let item of this.fileExtensions)
                data["fileExtensions"].push(item);
        }
        if (Array.isArray(this.outputFormatIds)) {
            data["outputFormatIds"] = [];
            for (let item of this.outputFormatIds)
                data["outputFormatIds"].push(item);
        }
        return data; 
    }
}

export interface IOutputSearchRequest {
    /** Limits the document count of the result set. Defaults to 30. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** List of Content ids you want to use to fetch the outputs. */
    contentIds?: string[] | undefined;
    /** The allowed rendering states of the outputs you want to fetch. */
    renderingStates?: OutputRenderingState[] | undefined;
    /** The file extension of the outputs you want to fetch. */
    fileExtensions?: string[] | undefined;
    /** The output format id of the outputs you want to fetch. */
    outputFormatIds?: string[] | undefined;
}

export class OutputResetRetryAttemptsRequest implements IOutputResetRetryAttemptsRequest {
    /** List of output IDs you want to filter on. If this field is not empty, the other will be ignored. */
    outputIds?: string[] | undefined;
    /** List of Content IDs you want to filter on. */
    contentIds?: string[] | undefined;
    /** The file extension of the outputs you want to filter on. */
    fileExtensions?: string[] | undefined;
    /** The IDs of the output formats you want to filter on. */
    outputFormatIds?: string[] | undefined;
    /** Should the successful filter results also be reset (and subsequently re-rendered)? */
    includeCompleted!: boolean;

    constructor(data?: IOutputResetRetryAttemptsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["outputIds"])) {
                this.outputIds = [] as any;
                for (let item of data["outputIds"])
                    this.outputIds!.push(item);
            }
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            if (Array.isArray(data["fileExtensions"])) {
                this.fileExtensions = [] as any;
                for (let item of data["fileExtensions"])
                    this.fileExtensions!.push(item);
            }
            if (Array.isArray(data["outputFormatIds"])) {
                this.outputFormatIds = [] as any;
                for (let item of data["outputFormatIds"])
                    this.outputFormatIds!.push(item);
            }
            this.includeCompleted = data["includeCompleted"];
        }
    }

    static fromJS(data: any): OutputResetRetryAttemptsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputResetRetryAttemptsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.outputIds)) {
            data["outputIds"] = [];
            for (let item of this.outputIds)
                data["outputIds"].push(item);
        }
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        if (Array.isArray(this.fileExtensions)) {
            data["fileExtensions"] = [];
            for (let item of this.fileExtensions)
                data["fileExtensions"].push(item);
        }
        if (Array.isArray(this.outputFormatIds)) {
            data["outputFormatIds"] = [];
            for (let item of this.outputFormatIds)
                data["outputFormatIds"].push(item);
        }
        data["includeCompleted"] = this.includeCompleted;
        return data; 
    }
}

export interface IOutputResetRetryAttemptsRequest {
    /** List of output IDs you want to filter on. If this field is not empty, the other will be ignored. */
    outputIds?: string[] | undefined;
    /** List of Content IDs you want to filter on. */
    contentIds?: string[] | undefined;
    /** The file extension of the outputs you want to filter on. */
    fileExtensions?: string[] | undefined;
    /** The IDs of the output formats you want to filter on. */
    outputFormatIds?: string[] | undefined;
    /** Should the successful filter results also be reset (and subsequently re-rendered)? */
    includeCompleted: boolean;
}

/** Used to specify how to render derived outputs */
export class OutputFormatRenderingSpecification implements IOutputFormatRenderingSpecification {
    /** Which output format should be used as a source of data. */
    sourceOutputFormats?: SourceOutputFormats | undefined;
    /** Information about the technical format of the data, e.g. JPEG, AAC or video still. */
    format?: FormatBase | undefined;

    constructor(data?: IOutputFormatRenderingSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.sourceOutputFormats = data.sourceOutputFormats && !(<any>data.sourceOutputFormats).toJSON ? new SourceOutputFormats(data.sourceOutputFormats) : <SourceOutputFormats>this.sourceOutputFormats; 
        }
    }

    init(data?: any) {
        if (data) {
            this.sourceOutputFormats = data["sourceOutputFormats"] ? SourceOutputFormats.fromJS(data["sourceOutputFormats"]) : <any>undefined;
            this.format = data["format"] ? FormatBase.fromJS(data["format"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputFormatRenderingSpecification {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatRenderingSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceOutputFormats"] = this.sourceOutputFormats ? this.sourceOutputFormats.toJSON() : <any>undefined;
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        return data; 
    }
}

/** Used to specify how to render derived outputs */
export interface IOutputFormatRenderingSpecification {
    /** Which output format should be used as a source of data. */
    sourceOutputFormats?: ISourceOutputFormats | undefined;
    /** Information about the technical format of the data, e.g. JPEG, AAC or video still. */
    format?: FormatBase | undefined;
}

/** Represents the editable part of the output format. */
export class OutputFormatEditable extends OutputFormatRenderingSpecification implements IOutputFormatEditable {
    /** Language specific names. */
    names!: TranslatedStringDictionary;
    /** How long should the dynamic outputs created from this format be kept. */
    retentionTime!: string;
    /** Optional patterns (liquid syntax) that produce the filename for item of this output format.
If set, the customer's default language is required. */
    downloadFileNamePatterns?: TranslatedStringDictionary | undefined;

    constructor(data?: IOutputFormatEditable) {
        super(data);
        if (data) {
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.downloadFileNamePatterns = data.downloadFileNamePatterns && !(<any>data.downloadFileNamePatterns).toJSON ? new TranslatedStringDictionary(data.downloadFileNamePatterns) : <TranslatedStringDictionary>this.downloadFileNamePatterns; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            this.retentionTime = data["retentionTime"];
            this.downloadFileNamePatterns = data["downloadFileNamePatterns"] ? TranslatedStringDictionary.fromJS(data["downloadFileNamePatterns"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputFormatEditable {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatEditable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["retentionTime"] = this.retentionTime;
        data["downloadFileNamePatterns"] = this.downloadFileNamePatterns ? this.downloadFileNamePatterns.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Represents the editable part of the output format. */
export interface IOutputFormatEditable extends IOutputFormatRenderingSpecification {
    /** Language specific names. */
    names: ITranslatedStringDictionary;
    /** How long should the dynamic outputs created from this format be kept. */
    retentionTime: string;
    /** Optional patterns (liquid syntax) that produce the filename for item of this output format.
If set, the customer's default language is required. */
    downloadFileNamePatterns?: ITranslatedStringDictionary | undefined;
}

/** Represents an output format. */
export class OutputFormat extends OutputFormatEditable implements IOutputFormat {
    /** Output format ID. */
    id?: string | undefined;
    /** Marks if this is a system output format. */
    system!: boolean;
    /** A dynamic output format is not rendered automatically, but only on demand. */
    dynamic!: boolean;
    /** Specifies if output format should be taken into account during data extraction. */
    dataExtraction!: boolean;
    /** Temporary outputs will not be backed up. */
    temporary!: boolean;

    constructor(data?: IOutputFormat) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.system = data["system"];
            this.dynamic = data["dynamic"];
            this.dataExtraction = data["dataExtraction"];
            this.temporary = data["temporary"];
        }
    }

    static fromJS(data: any): OutputFormat {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["system"] = this.system;
        data["dynamic"] = this.dynamic;
        data["dataExtraction"] = this.dataExtraction;
        data["temporary"] = this.temporary;
        super.toJSON(data);
        return data; 
    }
}

/** Represents an output format. */
export interface IOutputFormat extends IOutputFormatEditable {
    /** Output format ID. */
    id?: string | undefined;
    /** Marks if this is a system output format. */
    system: boolean;
    /** A dynamic output format is not rendered automatically, but only on demand. */
    dynamic: boolean;
    /** Specifies if output format should be taken into account during data extraction. */
    dataExtraction: boolean;
    /** Temporary outputs will not be backed up. */
    temporary: boolean;
}

/** Represents an output format. */
export class OutputFormatDetail extends OutputFormat implements IOutputFormatDetail {
    /** Audit information. */
    audit?: UserAuditDetail | undefined;

    constructor(data?: IOutputFormatDetail) {
        super(data);
        if (data) {
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputFormatDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Represents an output format. */
export interface IOutputFormatDetail extends IOutputFormat {
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
}

/** Defines the source used for rendering an OutputFormat depending on the type of content */
export class SourceOutputFormats implements ISourceOutputFormats {
    /** The source to be used for content of type Image */
    image?: string | undefined;
    /** The source to be used for content of type Video */
    video?: string | undefined;
    /** The source to be used for content of type Document */
    document?: string | undefined;
    /** The source to be used for content of type Audio */
    audio?: string | undefined;

    constructor(data?: ISourceOutputFormats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.image = data["image"];
            this.video = data["video"];
            this.document = data["document"];
            this.audio = data["audio"];
        }
    }

    static fromJS(data: any): SourceOutputFormats {
        data = typeof data === 'object' ? data : {};
        let result = new SourceOutputFormats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["image"] = this.image;
        data["video"] = this.video;
        data["document"] = this.document;
        data["audio"] = this.audio;
        return data; 
    }
}

/** Defines the source used for rendering an OutputFormat depending on the type of content */
export interface ISourceOutputFormats {
    /** The source to be used for content of type Image */
    image?: string | undefined;
    /** The source to be used for content of type Video */
    video?: string | undefined;
    /** The source to be used for content of type Document */
    document?: string | undefined;
    /** The source to be used for content of type Audio */
    audio?: string | undefined;
}

export abstract class FormatBase implements IFormatBase {

    protected _discriminator: string;

    constructor(data?: IFormatBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "FormatBase";
    }

    init(data?: any) {
    }

    static fromJS(data: any): FormatBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ImageFormatBase") {
            throw new Error("The abstract class 'ImageFormatBase' cannot be instantiated.");
        }
        if (data["kind"] === "OriginalFormat") {
            let result = new OriginalFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "JpegFormat") {
            let result = new JpegFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PngFormat") {
            let result = new PngFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TiffFormat") {
            let result = new TiffFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoFormatBase") {
            throw new Error("The abstract class 'VideoFormatBase' cannot be instantiated.");
        }
        if (data["kind"] === "AudioFormatBase") {
            throw new Error("The abstract class 'AudioFormatBase' cannot be instantiated.");
        }
        if (data["kind"] === "Mp4VideoFormat") {
            let result = new Mp4VideoFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoSpriteFormat") {
            let result = new VideoSpriteFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoStillFormat") {
            let result = new VideoStillFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AacAudioFormat") {
            let result = new AacAudioFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AudioStillFormat") {
            let result = new AudioStillFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "Mp3AudioFormat") {
            let result = new Mp3AudioFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentFormatBase") {
            throw new Error("The abstract class 'DocumentFormatBase' cannot be instantiated.");
        }
        if (data["kind"] === "DocumentStillFormat") {
            let result = new DocumentStillFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PdfFormat") {
            let result = new PdfFormat();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'FormatBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

export interface IFormatBase {
}

/** Base class for ImageFormats such as JPEG, PNG, TIFF, ... */
export abstract class ImageFormatBase extends FormatBase implements IImageFormatBase {
    /** Color profile to use. Colorspace is derived from the chosen profile. */
    colorProfile?: ColorProfile | undefined;
    /** The method of conversion for color spaces (e.g. CMYK to RGB). Further information can be found here: http://www.colourphil.co.uk/rendering_intents.shtml */
    colorTransformationIntent!: ColorTransformationIntent;
    /** Horizontal resolution in dpi (dots per inch) */
    horizontalResolution?: number | undefined;
    /** Vertical resolution in dpi (dots per inch) */
    verticalResolution?: number | undefined;
    /** Copy clipping paths from input. */
    keepClippingPath!: boolean;
    /** Copy Exif metadata from input. */
    cloneExif!: boolean;
    /** Copy Iptc metadata from input. */
    cloneIptc!: boolean;
    /** Copy AdobeResources from input. */
    cloneAdobeResources!: boolean;
    /** Copy Xmp metadata from input. */
    cloneXmp!: boolean;
    /** Allows resizing of the image. */
    resizeAction?: ResizeAction | undefined;
    /** A collection of actions to be applied during rendering. */
    actions?: ImageActionBase[] | undefined;

    constructor(data?: IImageFormatBase) {
        super(data);
        if (data) {
            this.resizeAction = data.resizeAction && !(<any>data.resizeAction).toJSON ? new ResizeAction(data.resizeAction) : <ResizeAction>this.resizeAction; 
        }
        this._discriminator = "ImageFormatBase";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.colorProfile = data["colorProfile"];
            this.colorTransformationIntent = data["colorTransformationIntent"];
            this.horizontalResolution = data["horizontalResolution"];
            this.verticalResolution = data["verticalResolution"];
            this.keepClippingPath = data["keepClippingPath"];
            this.cloneExif = data["cloneExif"];
            this.cloneIptc = data["cloneIptc"];
            this.cloneAdobeResources = data["cloneAdobeResources"];
            this.cloneXmp = data["cloneXmp"];
            this.resizeAction = data["resizeAction"] ? ResizeAction.fromJS(data["resizeAction"]) : <any>undefined;
            if (Array.isArray(data["actions"])) {
                this.actions = [] as any;
                for (let item of data["actions"])
                    this.actions!.push(ImageActionBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ImageFormatBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "JpegFormat") {
            let result = new JpegFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PngFormat") {
            let result = new PngFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "TiffFormat") {
            let result = new TiffFormat();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ImageFormatBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["colorProfile"] = this.colorProfile;
        data["colorTransformationIntent"] = this.colorTransformationIntent;
        data["horizontalResolution"] = this.horizontalResolution;
        data["verticalResolution"] = this.verticalResolution;
        data["keepClippingPath"] = this.keepClippingPath;
        data["cloneExif"] = this.cloneExif;
        data["cloneIptc"] = this.cloneIptc;
        data["cloneAdobeResources"] = this.cloneAdobeResources;
        data["cloneXmp"] = this.cloneXmp;
        data["resizeAction"] = this.resizeAction ? this.resizeAction.toJSON() : <any>undefined;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Base class for ImageFormats such as JPEG, PNG, TIFF, ... */
export interface IImageFormatBase extends IFormatBase {
    /** Color profile to use. Colorspace is derived from the chosen profile. */
    colorProfile?: ColorProfile | undefined;
    /** The method of conversion for color spaces (e.g. CMYK to RGB). Further information can be found here: http://www.colourphil.co.uk/rendering_intents.shtml */
    colorTransformationIntent: ColorTransformationIntent;
    /** Horizontal resolution in dpi (dots per inch) */
    horizontalResolution?: number | undefined;
    /** Vertical resolution in dpi (dots per inch) */
    verticalResolution?: number | undefined;
    /** Copy clipping paths from input. */
    keepClippingPath: boolean;
    /** Copy Exif metadata from input. */
    cloneExif: boolean;
    /** Copy Iptc metadata from input. */
    cloneIptc: boolean;
    /** Copy AdobeResources from input. */
    cloneAdobeResources: boolean;
    /** Copy Xmp metadata from input. */
    cloneXmp: boolean;
    /** Allows resizing of the image. */
    resizeAction?: IResizeAction | undefined;
    /** A collection of actions to be applied during rendering. */
    actions?: ImageActionBase[] | undefined;
}

/** Available color profiles */
export enum ColorProfile {
    AdobeRgb1998 = "AdobeRgb1998",
    AppleRgb = "AppleRgb",
    ColorMatchRgb = "ColorMatchRgb",
    EciRgbV1 = "EciRgbV1",
    EciRgbV2 = "EciRgbV2",
    Srgb = "Srgb",
    SrgbColorSpaceProfile = "SrgbColorSpaceProfile",
    EuropeIsoCoatedFogra27 = "EuropeIsoCoatedFogra27",
    EuroscaleCoated = "EuroscaleCoated",
    EuroscaleUncoated = "EuroscaleUncoated",
    IsoCoated = "IsoCoated",
    IsoCoatedEciV2 = "IsoCoatedEciV2",
    JapanColor2001Coated = "JapanColor2001Coated",
    JapanColor2001Uncoated = "JapanColor2001Uncoated",
    JapanColor2002Newspaper = "JapanColor2002Newspaper",
    JapanWebCoated = "JapanWebCoated",
    UsSheetfedCoated = "UsSheetfedCoated",
    UsSheetfedUncoated = "UsSheetfedUncoated",
    UsWebCoatedSwop = "UsWebCoatedSwop",
    UsWebUncoated = "UsWebUncoated",
    IsoCoatedV2Grey1cBas = "IsoCoatedV2Grey1cBas",
    IsoCoated300EciV2 = "IsoCoated300EciV2",
    CoatedFogra27 = "CoatedFogra27",
    CoatedFogra39 = "CoatedFogra39",
    UncoatedFogra29 = "UncoatedFogra29",
    WebCoatedFogra28 = "WebCoatedFogra28",
    WebCoatedSwop2006Grade3 = "WebCoatedSwop2006Grade3",
    WebCoatedSwop2006Grade5 = "WebCoatedSwop2006Grade5",
    Isonewspaper26v4 = "Isonewspaper26v4",
    Isonewspaper26v4Grey = "Isonewspaper26v4Grey",
}

/** http://www.colourphil.co.uk/rendering_intents.shtml */
export enum ColorTransformationIntent {
    RelativeColorimetricBpc = "RelativeColorimetricBpc",
    AbsoluteColorimetric = "AbsoluteColorimetric",
    Perceptual = "Perceptual",
    RelativeColorimetric = "RelativeColorimetric",
    Saturation = "Saturation",
}

/** Specifies image resize parameters. */
export class ResizeAction implements IResizeAction {
    /** Target width for the output. */
    width!: number;
    /** Target height for the output. */
    height!: number;
    /** Specifies additional resize behaviour. */
    resizeMode!: ResizeMode;

    constructor(data?: IResizeAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["width"];
            this.height = data["height"];
            this.resizeMode = data["resizeMode"];
        }
    }

    static fromJS(data: any): ResizeAction {
        data = typeof data === 'object' ? data : {};
        let result = new ResizeAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["resizeMode"] = this.resizeMode;
        return data; 
    }
}

/** Specifies image resize parameters. */
export interface IResizeAction {
    /** Target width for the output. */
    width: number;
    /** Target height for the output. */
    height: number;
    /** Specifies additional resize behaviour. */
    resizeMode: ResizeMode;
}

/** Specifies how the dimensions of a ResizeAction are applied to the content */
export enum ResizeMode {
    Fit = "Fit",
    Shrink = "Shrink",
    Resize = "Resize",
}

export abstract class ImageActionBase implements IImageActionBase {

    protected _discriminator: string;

    constructor(data?: IImageActionBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ImageActionBase";
    }

    init(data?: any) {
    }

    static fromJS(data: any): ImageActionBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AlphaHandlingAction") {
            let result = new AlphaHandlingAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "CropAction") {
            let result = new CropAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "UnsharpenMaskAction") {
            let result = new UnsharpenMaskAction();
            result.init(data);
            return result;
        }
        if (data["kind"] === "WatermarkAction") {
            let result = new WatermarkAction();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ImageActionBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

export interface IImageActionBase {
}

/** An ImageAction that allows different forms of modifying alpha information in an image. */
export class AlphaHandlingAction extends ImageActionBase implements IAlphaHandlingAction {
    /** Specifies the kind of alpha handling to be applied. */
    alphaHandling!: AlphaHandling;
    /** Specifies potentially needed color information for alpha handling. Must be given in RGB hex format (8 bit per channel). */
    replacementRgbColorHexCode?: string | undefined;

    constructor(data?: IAlphaHandlingAction) {
        super(data);
        this._discriminator = "AlphaHandlingAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.alphaHandling = data["alphaHandling"];
            this.replacementRgbColorHexCode = data["replacementRgbColorHexCode"];
        }
    }

    static fromJS(data: any): AlphaHandlingAction {
        data = typeof data === 'object' ? data : {};
        let result = new AlphaHandlingAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alphaHandling"] = this.alphaHandling;
        data["replacementRgbColorHexCode"] = this.replacementRgbColorHexCode;
        super.toJSON(data);
        return data; 
    }
}

/** An ImageAction that allows different forms of modifying alpha information in an image. */
export interface IAlphaHandlingAction extends IImageActionBase {
    /** Specifies the kind of alpha handling to be applied. */
    alphaHandling: AlphaHandling;
    /** Specifies potentially needed color information for alpha handling. Must be given in RGB hex format (8 bit per channel). */
    replacementRgbColorHexCode?: string | undefined;
}

/** Specifies the kind of AlphaHandling to be applied to an image */
export enum AlphaHandling {
    DiscardAlpha = "DiscardAlpha",
    ReplaceAlpha = "ReplaceAlpha",
    ReplaceInvertedAlpha = "ReplaceInvertedAlpha",
}

/** An ImageAction that allows cropping an image. */
export class CropAction extends ImageActionBase implements ICropAction {
    /** X-Coordinate of top left point of the cropping rectangle. */
    x!: number;
    /** Y-Coordinate of top left point of the cropping rectangle. */
    y!: number;
    /** Width of the cropping rectangle. */
    width!: number;
    /** Height of the cropping rectangle. */
    height!: number;

    constructor(data?: ICropAction) {
        super(data);
        this._discriminator = "CropAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.x = data["x"];
            this.y = data["y"];
            this.width = data["width"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): CropAction {
        data = typeof data === 'object' ? data : {};
        let result = new CropAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        super.toJSON(data);
        return data; 
    }
}

/** An ImageAction that allows cropping an image. */
export interface ICropAction extends IImageActionBase {
    /** X-Coordinate of top left point of the cropping rectangle. */
    x: number;
    /** Y-Coordinate of top left point of the cropping rectangle. */
    y: number;
    /** Width of the cropping rectangle. */
    width: number;
    /** Height of the cropping rectangle. */
    height: number;
}

/** Increases sharpness of an image by using the unsharp mask technique. */
export class UnsharpenMaskAction extends ImageActionBase implements IUnsharpenMaskAction {
    /** Unsharp mask amount (the difference between blurred and original image). */
    amount!: number;
    /** Blur radius used to produce unfocused version of the image. */
    radius!: number;
    /** The threshold value for the unsharp mask in range [0, 1] */
    threshold!: number;

    constructor(data?: IUnsharpenMaskAction) {
        super(data);
        this._discriminator = "UnsharpenMaskAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.amount = data["amount"];
            this.radius = data["radius"];
            this.threshold = data["threshold"];
        }
    }

    static fromJS(data: any): UnsharpenMaskAction {
        data = typeof data === 'object' ? data : {};
        let result = new UnsharpenMaskAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["radius"] = this.radius;
        data["threshold"] = this.threshold;
        super.toJSON(data);
        return data; 
    }
}

/** Increases sharpness of an image by using the unsharp mask technique. */
export interface IUnsharpenMaskAction extends IImageActionBase {
    /** Unsharp mask amount (the difference between blurred and original image). */
    amount: number;
    /** Blur radius used to produce unfocused version of the image. */
    radius: number;
    /** The threshold value for the unsharp mask in range [0, 1] */
    threshold: number;
}

/** An ImageAction that allows rendering a watermark to an image */
export class WatermarkAction extends ImageActionBase implements IWatermarkAction {
    /** Identifies the image to be used as watermark */
    watermarkFilePath?: string | undefined;
    /** Margin to the left border of the image, in pixels */
    marginLeft?: number | undefined;
    /** Margin to the top of the image, in pixels */
    marginTop?: number | undefined;
    /** Margin to the right border of the image, in pixels */
    marginRight?: number | undefined;
    /** Margin to the bottom of the image, in pixels */
    marginBottom?: number | undefined;
    /** Scales the opacity of the watermark */
    opacity!: number;
    /** Scales the watermark width according to the size of the final image. */
    widthRatio!: number;
    /** Scales the watermark height according to the size of the final image. */
    heightRatio!: number;

    constructor(data?: IWatermarkAction) {
        super(data);
        this._discriminator = "WatermarkAction";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.watermarkFilePath = data["watermarkFilePath"];
            this.marginLeft = data["marginLeft"];
            this.marginTop = data["marginTop"];
            this.marginRight = data["marginRight"];
            this.marginBottom = data["marginBottom"];
            this.opacity = data["opacity"];
            this.widthRatio = data["widthRatio"];
            this.heightRatio = data["heightRatio"];
        }
    }

    static fromJS(data: any): WatermarkAction {
        data = typeof data === 'object' ? data : {};
        let result = new WatermarkAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["watermarkFilePath"] = this.watermarkFilePath;
        data["marginLeft"] = this.marginLeft;
        data["marginTop"] = this.marginTop;
        data["marginRight"] = this.marginRight;
        data["marginBottom"] = this.marginBottom;
        data["opacity"] = this.opacity;
        data["widthRatio"] = this.widthRatio;
        data["heightRatio"] = this.heightRatio;
        super.toJSON(data);
        return data; 
    }
}

/** An ImageAction that allows rendering a watermark to an image */
export interface IWatermarkAction extends IImageActionBase {
    /** Identifies the image to be used as watermark */
    watermarkFilePath?: string | undefined;
    /** Margin to the left border of the image, in pixels */
    marginLeft?: number | undefined;
    /** Margin to the top of the image, in pixels */
    marginTop?: number | undefined;
    /** Margin to the right border of the image, in pixels */
    marginRight?: number | undefined;
    /** Margin to the bottom of the image, in pixels */
    marginBottom?: number | undefined;
    /** Scales the opacity of the watermark */
    opacity: number;
    /** Scales the watermark width according to the size of the final image. */
    widthRatio: number;
    /** Scales the watermark height according to the size of the final image. */
    heightRatio: number;
}

/** Special format that represents the original. */
export class OriginalFormat extends FormatBase implements IOriginalFormat {
    extension?: string | undefined;

    constructor(data?: IOriginalFormat) {
        super(data);
        this._discriminator = "OriginalFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): OriginalFormat {
        data = typeof data === 'object' ? data : {};
        let result = new OriginalFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Special format that represents the original. */
export interface IOriginalFormat extends IFormatBase {
    extension?: string | undefined;
}

/** Renders a JPEG image. */
export class JpegFormat extends ImageFormatBase implements IJpegFormat {
    /** Compression quality. Must be in range [0,100] and defaults to 80. */
    quality!: number;
    /** Whether to use progressive encoding or not. */
    isProgressive!: boolean;
    /** Whether to use chroma subsampling or not. */
    chromaSubsamplingEnabled!: boolean;
    extension?: string | undefined;

    constructor(data?: IJpegFormat) {
        super(data);
        this._discriminator = "JpegFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.quality = data["quality"];
            this.isProgressive = data["isProgressive"];
            this.chromaSubsamplingEnabled = data["chromaSubsamplingEnabled"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): JpegFormat {
        data = typeof data === 'object' ? data : {};
        let result = new JpegFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quality"] = this.quality;
        data["isProgressive"] = this.isProgressive;
        data["chromaSubsamplingEnabled"] = this.chromaSubsamplingEnabled;
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Renders a JPEG image. */
export interface IJpegFormat extends IImageFormatBase {
    /** Compression quality. Must be in range [0,100] and defaults to 80. */
    quality: number;
    /** Whether to use progressive encoding or not. */
    isProgressive: boolean;
    /** Whether to use chroma subsampling or not. */
    chromaSubsamplingEnabled: boolean;
    extension?: string | undefined;
}

/** Renders a PNG image. */
export class PngFormat extends ImageFormatBase implements IPngFormat {
    /** Whether the image is interlaced or not. */
    interlaced!: boolean;
    extension?: string | undefined;

    constructor(data?: IPngFormat) {
        super(data);
        this._discriminator = "PngFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.interlaced = data["interlaced"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): PngFormat {
        data = typeof data === 'object' ? data : {};
        let result = new PngFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["interlaced"] = this.interlaced;
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Renders a PNG image. */
export interface IPngFormat extends IImageFormatBase {
    /** Whether the image is interlaced or not. */
    interlaced: boolean;
    extension?: string | undefined;
}

/** Renders a TIFF image */
export class TiffFormat extends ImageFormatBase implements ITiffFormat {
    /** Specifies whether color channels should be premultiplied with alpha (associated alpha) or not (unassociated alpha). */
    alphaPremultiplied!: boolean;
    /** Specifies the compression type to use. */
    compressionType!: CompressionType;
    /** Preserve (including size affecting changes) unspecified extraChannels. */
    includeUnspecifiedTiffExtraChannels!: boolean;
    extension?: string | undefined;

    constructor(data?: ITiffFormat) {
        super(data);
        this._discriminator = "TiffFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.alphaPremultiplied = data["alphaPremultiplied"];
            this.compressionType = data["compressionType"];
            this.includeUnspecifiedTiffExtraChannels = data["includeUnspecifiedTiffExtraChannels"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): TiffFormat {
        data = typeof data === 'object' ? data : {};
        let result = new TiffFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alphaPremultiplied"] = this.alphaPremultiplied;
        data["compressionType"] = this.compressionType;
        data["includeUnspecifiedTiffExtraChannels"] = this.includeUnspecifiedTiffExtraChannels;
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Renders a TIFF image */
export interface ITiffFormat extends IImageFormatBase {
    /** Specifies whether color channels should be premultiplied with alpha (associated alpha) or not (unassociated alpha). */
    alphaPremultiplied: boolean;
    /** Specifies the compression type to use. */
    compressionType: CompressionType;
    /** Preserve (including size affecting changes) unspecified extraChannels. */
    includeUnspecifiedTiffExtraChannels: boolean;
    extension?: string | undefined;
}

/** Available compression types. */
export enum CompressionType {
    None = "None",
    Lzw = "Lzw",
    Rle = "Rle",
    Zip = "Zip",
}

/** Base class for rendering video. */
export abstract class VideoFormatBase extends FormatBase implements IVideoFormatBase {

    constructor(data?: IVideoFormatBase) {
        super(data);
        this._discriminator = "VideoFormatBase";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): VideoFormatBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "Mp4VideoFormat") {
            let result = new Mp4VideoFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoSpriteFormat") {
            let result = new VideoSpriteFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoStillFormat") {
            let result = new VideoStillFormat();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'VideoFormatBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Base class for rendering video. */
export interface IVideoFormatBase extends IFormatBase {
}

/** Renders H.264 in mp4 container. */
export class Mp4VideoFormat extends VideoFormatBase implements IMp4VideoFormat {
    /** Allows resizing of the video. */
    resizeAction?: ResizeAction | undefined;
    /** Gets or sets the encoding audio codec. */
    audioCodec?: AudioFormatBase | undefined;
    /** Gets or sets the encoding codec preset. */
    preset!: Preset;
    extension?: string | undefined;

    constructor(data?: IMp4VideoFormat) {
        super(data);
        if (data) {
            this.resizeAction = data.resizeAction && !(<any>data.resizeAction).toJSON ? new ResizeAction(data.resizeAction) : <ResizeAction>this.resizeAction; 
        }
        this._discriminator = "Mp4VideoFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.resizeAction = data["resizeAction"] ? ResizeAction.fromJS(data["resizeAction"]) : <any>undefined;
            this.audioCodec = data["audioCodec"] ? AudioFormatBase.fromJS(data["audioCodec"]) : <any>undefined;
            this.preset = data["preset"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): Mp4VideoFormat {
        data = typeof data === 'object' ? data : {};
        let result = new Mp4VideoFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resizeAction"] = this.resizeAction ? this.resizeAction.toJSON() : <any>undefined;
        data["audioCodec"] = this.audioCodec ? this.audioCodec.toJSON() : <any>undefined;
        data["preset"] = this.preset;
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Renders H.264 in mp4 container. */
export interface IMp4VideoFormat extends IVideoFormatBase {
    /** Allows resizing of the video. */
    resizeAction?: IResizeAction | undefined;
    /** Gets or sets the encoding audio codec. */
    audioCodec?: AudioFormatBase | undefined;
    /** Gets or sets the encoding codec preset. */
    preset: Preset;
    extension?: string | undefined;
}

/** Base class for rendering audio. */
export abstract class AudioFormatBase extends FormatBase implements IAudioFormatBase {

    constructor(data?: IAudioFormatBase) {
        super(data);
        this._discriminator = "AudioFormatBase";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AudioFormatBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AacAudioFormat") {
            let result = new AacAudioFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "AudioStillFormat") {
            let result = new AudioStillFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "Mp3AudioFormat") {
            let result = new Mp3AudioFormat();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'AudioFormatBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Base class for rendering audio. */
export interface IAudioFormatBase extends IFormatBase {
}

/** Video rendering preset, see http://dev.beandog.org/x264_preset_reference.html for more information. */
export enum Preset {
    Ultrafast = "ultrafast",
    Superfast = "superfast",
    Veryfast = "veryfast",
    Faster = "faster",
    Fast = "fast",
    Medium = "medium",
    Slow = "slow",
    Slower = "slower",
}

/** Generates a sprite image of the input video. */
export class VideoSpriteFormat extends VideoFormatBase implements IVideoSpriteFormat {
    /** Specifies the dimensions of a single frame in the sprite. */
    spriteResizeAction?: ResizeAction | undefined;
    /** Limit for the number of frames to generate. */
    maxNumberOfSprites!: number;
    /** JPEG-quality to use for the sprite. */
    quality!: number;
    extension?: string | undefined;

    constructor(data?: IVideoSpriteFormat) {
        super(data);
        if (data) {
            this.spriteResizeAction = data.spriteResizeAction && !(<any>data.spriteResizeAction).toJSON ? new ResizeAction(data.spriteResizeAction) : <ResizeAction>this.spriteResizeAction; 
        }
        this._discriminator = "VideoSpriteFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.spriteResizeAction = data["spriteResizeAction"] ? ResizeAction.fromJS(data["spriteResizeAction"]) : <any>undefined;
            this.maxNumberOfSprites = data["maxNumberOfSprites"];
            this.quality = data["quality"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): VideoSpriteFormat {
        data = typeof data === 'object' ? data : {};
        let result = new VideoSpriteFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["spriteResizeAction"] = this.spriteResizeAction ? this.spriteResizeAction.toJSON() : <any>undefined;
        data["maxNumberOfSprites"] = this.maxNumberOfSprites;
        data["quality"] = this.quality;
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Generates a sprite image of the input video. */
export interface IVideoSpriteFormat extends IVideoFormatBase {
    /** Specifies the dimensions of a single frame in the sprite. */
    spriteResizeAction?: IResizeAction | undefined;
    /** Limit for the number of frames to generate. */
    maxNumberOfSprites: number;
    /** JPEG-quality to use for the sprite. */
    quality: number;
    extension?: string | undefined;
}

export class VideoStillFormat extends VideoFormatBase implements IVideoStillFormat {
    extension?: string | undefined;
    /** Specifies the position from which to produce the image. */
    positionInSeconds!: number;

    constructor(data?: IVideoStillFormat) {
        super(data);
        this._discriminator = "VideoStillFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
            this.positionInSeconds = data["positionInSeconds"];
        }
    }

    static fromJS(data: any): VideoStillFormat {
        data = typeof data === 'object' ? data : {};
        let result = new VideoStillFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        data["positionInSeconds"] = this.positionInSeconds;
        super.toJSON(data);
        return data; 
    }
}

export interface IVideoStillFormat extends IVideoFormatBase {
    extension?: string | undefined;
    /** Specifies the position from which to produce the image. */
    positionInSeconds: number;
}

/** Specifies Aac encoding for the output and additional settings for the encoder. */
export class AacAudioFormat extends AudioFormatBase implements IAacAudioFormat {
    extension?: string | undefined;
    /** Gets or sets the encoding profile. */
    profile!: Profile;
    /** Gets or sets the encoding coder. */
    coder!: Coder;
    /** Gets or sets the bitrate of the encoding in kbps. */
    bitrate?: number | undefined;
    /** Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality. */
    variableBitRate?: number | undefined;

    constructor(data?: IAacAudioFormat) {
        super(data);
        this._discriminator = "AacAudioFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
            this.profile = data["profile"];
            this.coder = data["coder"];
            this.bitrate = data["bitrate"];
            this.variableBitRate = data["variableBitRate"];
        }
    }

    static fromJS(data: any): AacAudioFormat {
        data = typeof data === 'object' ? data : {};
        let result = new AacAudioFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        data["profile"] = this.profile;
        data["coder"] = this.coder;
        data["bitrate"] = this.bitrate;
        data["variableBitRate"] = this.variableBitRate;
        super.toJSON(data);
        return data; 
    }
}

/** Specifies Aac encoding for the output and additional settings for the encoder. */
export interface IAacAudioFormat extends IAudioFormatBase {
    extension?: string | undefined;
    /** Gets or sets the encoding profile. */
    profile: Profile;
    /** Gets or sets the encoding coder. */
    coder: Coder;
    /** Gets or sets the bitrate of the encoding in kbps. */
    bitrate?: number | undefined;
    /** Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality. */
    variableBitRate?: number | undefined;
}

export enum Profile {
    Aac_low = "aac_low",
    Mpeg2_aac_low = "mpeg2_aac_low",
    Aac_ltp = "aac_ltp",
    Aac_main = "aac_main",
}

/** Audio coders */
export enum Coder {
    Twoloop = "twoloop",
    Anmr = "anmr",
    Fast = "fast",
}

/** Generates a waveform image from an Audio source. */
export class AudioStillFormat extends AudioFormatBase implements IAudioStillFormat {
    extension?: string | undefined;

    constructor(data?: IAudioStillFormat) {
        super(data);
        this._discriminator = "AudioStillFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): AudioStillFormat {
        data = typeof data === 'object' ? data : {};
        let result = new AudioStillFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Generates a waveform image from an Audio source. */
export interface IAudioStillFormat extends IAudioFormatBase {
    extension?: string | undefined;
}

/** Renders an MP3 audio file. */
export class Mp3AudioFormat extends AudioFormatBase implements IMp3AudioFormat {
    extension?: string | undefined;
    /** Gets or sets the encoding bitrate. This setting and Quality are mutually exclusive. */
    bitrate?: number | undefined;
    /** Gets or sets the encoding quality. This setting and Bitrate are mutually exclusive.
Values can be set it range of 0 to 9, where a lower value is a higher quality. */
    quality?: number | undefined;

    constructor(data?: IMp3AudioFormat) {
        super(data);
        this._discriminator = "Mp3AudioFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
            this.bitrate = data["bitrate"];
            this.quality = data["quality"];
        }
    }

    static fromJS(data: any): Mp3AudioFormat {
        data = typeof data === 'object' ? data : {};
        let result = new Mp3AudioFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        data["bitrate"] = this.bitrate;
        data["quality"] = this.quality;
        super.toJSON(data);
        return data; 
    }
}

/** Renders an MP3 audio file. */
export interface IMp3AudioFormat extends IAudioFormatBase {
    extension?: string | undefined;
    /** Gets or sets the encoding bitrate. This setting and Quality are mutually exclusive. */
    bitrate?: number | undefined;
    /** Gets or sets the encoding quality. This setting and Bitrate are mutually exclusive.
Values can be set it range of 0 to 9, where a lower value is a higher quality. */
    quality?: number | undefined;
}

/** Base class for rendering documents. */
export abstract class DocumentFormatBase extends FormatBase implements IDocumentFormatBase {

    constructor(data?: IDocumentFormatBase) {
        super(data);
        this._discriminator = "DocumentFormatBase";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): DocumentFormatBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "DocumentStillFormat") {
            let result = new DocumentStillFormat();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PdfFormat") {
            let result = new PdfFormat();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'DocumentFormatBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Base class for rendering documents. */
export interface IDocumentFormatBase extends IFormatBase {
}

/** Renders a TIFF preview image. */
export class DocumentStillFormat extends DocumentFormatBase implements IDocumentStillFormat {
    extension?: string | undefined;

    constructor(data?: IDocumentStillFormat) {
        super(data);
        this._discriminator = "DocumentStillFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): DocumentStillFormat {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentStillFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        super.toJSON(data);
        return data; 
    }
}

/** Renders a TIFF preview image. */
export interface IDocumentStillFormat extends IDocumentFormatBase {
    extension?: string | undefined;
}

export class PdfFormat extends DocumentFormatBase implements IPdfFormat {
    /** Specifies compression quality used for ReduceFileSize. */
    jpegQuality!: number;
    /** Whether to linearize the output for fast web viewing. */
    fastWebView!: boolean;
    /** Whether to apply measures to decrease output size or not. */
    reduceFileSize!: boolean;
    extension?: string | undefined;
    /** Whether to extract document full text from this output. */
    extractFullText!: boolean;

    constructor(data?: IPdfFormat) {
        super(data);
        this._discriminator = "PdfFormat";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.jpegQuality = data["jpegQuality"];
            this.fastWebView = data["fastWebView"];
            this.reduceFileSize = data["reduceFileSize"];
            this.extension = data["extension"];
            this.extractFullText = data["extractFullText"];
        }
    }

    static fromJS(data: any): PdfFormat {
        data = typeof data === 'object' ? data : {};
        let result = new PdfFormat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jpegQuality"] = this.jpegQuality;
        data["fastWebView"] = this.fastWebView;
        data["reduceFileSize"] = this.reduceFileSize;
        data["extension"] = this.extension;
        data["extractFullText"] = this.extractFullText;
        super.toJSON(data);
        return data; 
    }
}

export interface IPdfFormat extends IDocumentFormatBase {
    /** Specifies compression quality used for ReduceFileSize. */
    jpegQuality: number;
    /** Whether to linearize the output for fast web viewing. */
    fastWebView: boolean;
    /** Whether to apply measures to decrease output size or not. */
    reduceFileSize: boolean;
    extension?: string | undefined;
    /** Whether to extract document full text from this output. */
    extractFullText: boolean;
}

/** Used to create multiple new output formats at once. */
export class OutputFormatCreateManyRequest implements IOutputFormatCreateManyRequest {
    /** Output format items to be created. */
    items?: OutputFormat[] | undefined;

    constructor(data?: IOutputFormatCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OutputFormat.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputFormatCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Used to create multiple new output formats at once. */
export interface IOutputFormatCreateManyRequest {
    /** Output format items to be created. */
    items?: OutputFormat[] | undefined;
}

/** Used to modify multiple output formats at once. */
export class OutputFormatUpdateManyRequest implements IOutputFormatUpdateManyRequest {
    /** Output format items to be modified. */
    items?: OutputFormatUpdateManyRequestItem[] | undefined;

    constructor(data?: IOutputFormatUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OutputFormatUpdateManyRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputFormatUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Used to modify multiple output formats at once. */
export interface IOutputFormatUpdateManyRequest {
    /** Output format items to be modified. */
    items?: OutputFormatUpdateManyRequestItem[] | undefined;
}

/** Represents one item to be modified in a bulk update operation on output formats. */
export class OutputFormatUpdateManyRequestItem extends OutputFormatEditable implements IOutputFormatUpdateManyRequestItem {
    /** ID of the output format to modify. */
    id?: string | undefined;

    constructor(data?: IOutputFormatUpdateManyRequestItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OutputFormatUpdateManyRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatUpdateManyRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

/** Represents one item to be modified in a bulk update operation on output formats. */
export interface IOutputFormatUpdateManyRequestItem extends IOutputFormatEditable {
    /** ID of the output format to modify. */
    id?: string | undefined;
}

/** Used to remove multiple output formats at once. */
export class OutputFormatDeleteManyRequest implements IOutputFormatDeleteManyRequest {
    /** List of IDs of output formats to remove. */
    ids?: string[] | undefined;

    constructor(data?: IOutputFormatDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["ids"])) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): OutputFormatDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

/** Used to remove multiple output formats at once. */
export interface IOutputFormatDeleteManyRequest {
    /** List of IDs of output formats to remove. */
    ids?: string[] | undefined;
}

/** Used to change the download file name pattern for multiple formats at once. */
export class OutputFormatDownloadFileNamePatternUpdateManyRequest implements IOutputFormatDownloadFileNamePatternUpdateManyRequest {
    /** Download file name update requests to be processed. */
    items!: OutputFormatDownloadFileNamePatternUpdateRequestItem[];

    constructor(data?: IOutputFormatDownloadFileNamePatternUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new OutputFormatDownloadFileNamePatternUpdateRequestItem(item) : <OutputFormatDownloadFileNamePatternUpdateRequestItem>item;
                }
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OutputFormatDownloadFileNamePatternUpdateRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputFormatDownloadFileNamePatternUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatDownloadFileNamePatternUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Used to change the download file name pattern for multiple formats at once. */
export interface IOutputFormatDownloadFileNamePatternUpdateManyRequest {
    /** Download file name update requests to be processed. */
    items: IOutputFormatDownloadFileNamePatternUpdateRequestItem[];
}

/** Represents a change to the download file name pattern to one output format. */
export class OutputFormatDownloadFileNamePatternUpdateRequestItem implements IOutputFormatDownloadFileNamePatternUpdateRequestItem {
    /** ID of the output format to set pattern for. */
    id!: string;
    /** The patterns to use per metadata language.
The customer's default language is required. */
    patterns?: TranslatedStringDictionary | undefined;

    constructor(data?: IOutputFormatDownloadFileNamePatternUpdateRequestItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patterns = data.patterns && !(<any>data.patterns).toJSON ? new TranslatedStringDictionary(data.patterns) : <TranslatedStringDictionary>this.patterns; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.patterns = data["patterns"] ? TranslatedStringDictionary.fromJS(data["patterns"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputFormatDownloadFileNamePatternUpdateRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatDownloadFileNamePatternUpdateRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patterns"] = this.patterns ? this.patterns.toJSON() : <any>undefined;
        return data; 
    }
}

/** Represents a change to the download file name pattern to one output format. */
export interface IOutputFormatDownloadFileNamePatternUpdateRequestItem {
    /** ID of the output format to set pattern for. */
    id: string;
    /** The patterns to use per metadata language.
The customer's default language is required. */
    patterns?: ITranslatedStringDictionary | undefined;
}

/** Specifies for which content a given format should be rendered */
export class OutputFormatRenderPreviewRequest implements IOutputFormatRenderPreviewRequest {
    /** The content for which the format should be rendered */
    contentId?: string | undefined;
    /** The format which should be rendered. */
    outputFormat?: OutputFormatRenderingSpecification | undefined;

    constructor(data?: IOutputFormatRenderPreviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.outputFormat = data.outputFormat && !(<any>data.outputFormat).toJSON ? new OutputFormatRenderingSpecification(data.outputFormat) : <OutputFormatRenderingSpecification>this.outputFormat; 
        }
    }

    init(data?: any) {
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormat = data["outputFormat"] ? OutputFormatRenderingSpecification.fromJS(data["outputFormat"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputFormatRenderPreviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatRenderPreviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        data["outputFormat"] = this.outputFormat ? this.outputFormat.toJSON() : <any>undefined;
        return data; 
    }
}

/** Specifies for which content a given format should be rendered */
export interface IOutputFormatRenderPreviewRequest {
    /** The content for which the format should be rendered */
    contentId?: string | undefined;
    /** The format which should be rendered. */
    outputFormat?: IOutputFormatRenderingSpecification | undefined;
}

/** User profile. */
export class UserProfile implements IUserProfile {
    /** ID of the user. */
    id?: string | undefined;
    /** Email address. */
    emailAddress?: string | undefined;
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Language code. */
    languageCode?: string | undefined;
    /** Address. */
    address?: UserAddress | undefined;
    /** Authorization state. */
    authorizationState!: AuthorizationState;
    /** Indicates if the user is locked. */
    isLocked!: boolean;
    /** A list of user rights assigned to the user. */
    userRights?: UserRight[] | undefined;
    /** A list of user role IDs assigned to the user. */
    userRoleIds?: string[] | undefined;
    /** Indicates if the user has not accepted the latest terms of consent. */
    termsConsentExpired!: boolean;
    /** A list of system user roles assigned to the user. */
    systemUserRoles?: SystemUserRole[] | undefined;
    /** Indicates if the user has the developer flag set. */
    isDeveloper!: boolean;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.address = data.address && !(<any>data.address).toJSON ? new UserAddress(data.address) : <UserAddress>this.address; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.emailAddress = data["emailAddress"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.languageCode = data["languageCode"];
            this.address = data["address"] ? UserAddress.fromJS(data["address"]) : <any>undefined;
            this.authorizationState = data["authorizationState"];
            this.isLocked = data["isLocked"];
            if (Array.isArray(data["userRights"])) {
                this.userRights = [] as any;
                for (let item of data["userRights"])
                    this.userRights!.push(item);
            }
            if (Array.isArray(data["userRoleIds"])) {
                this.userRoleIds = [] as any;
                for (let item of data["userRoleIds"])
                    this.userRoleIds!.push(item);
            }
            this.termsConsentExpired = data["termsConsentExpired"];
            if (Array.isArray(data["systemUserRoles"])) {
                this.systemUserRoles = [] as any;
                for (let item of data["systemUserRoles"])
                    this.systemUserRoles!.push(item);
            }
            this.isDeveloper = data["isDeveloper"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailAddress"] = this.emailAddress;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["languageCode"] = this.languageCode;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["authorizationState"] = this.authorizationState;
        data["isLocked"] = this.isLocked;
        if (Array.isArray(this.userRights)) {
            data["userRights"] = [];
            for (let item of this.userRights)
                data["userRights"].push(item);
        }
        if (Array.isArray(this.userRoleIds)) {
            data["userRoleIds"] = [];
            for (let item of this.userRoleIds)
                data["userRoleIds"].push(item);
        }
        data["termsConsentExpired"] = this.termsConsentExpired;
        if (Array.isArray(this.systemUserRoles)) {
            data["systemUserRoles"] = [];
            for (let item of this.systemUserRoles)
                data["systemUserRoles"].push(item);
        }
        data["isDeveloper"] = this.isDeveloper;
        return data; 
    }
}

/** User profile. */
export interface IUserProfile {
    /** ID of the user. */
    id?: string | undefined;
    /** Email address. */
    emailAddress?: string | undefined;
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Language code. */
    languageCode?: string | undefined;
    /** Address. */
    address?: IUserAddress | undefined;
    /** Authorization state. */
    authorizationState: AuthorizationState;
    /** Indicates if the user is locked. */
    isLocked: boolean;
    /** A list of user rights assigned to the user. */
    userRights?: UserRight[] | undefined;
    /** A list of user role IDs assigned to the user. */
    userRoleIds?: string[] | undefined;
    /** Indicates if the user has not accepted the latest terms of consent. */
    termsConsentExpired: boolean;
    /** A list of system user roles assigned to the user. */
    systemUserRoles?: SystemUserRole[] | undefined;
    /** Indicates if the user has the developer flag set. */
    isDeveloper: boolean;
}

/** User's address */
export class UserAddress implements IUserAddress {
    /** Company address line */
    company?: string | undefined;
    /** Company department. */
    department?: string | undefined;
    /** Street and house number. */
    address?: string | undefined;
    /** Additional address line. */
    alternativeAddress?: string | undefined;
    /** ZIP code. */
    zip?: string | undefined;
    /** City or town. */
    city?: string | undefined;
    /** Phone number. */
    phone?: string | undefined;
    /** Country code. */
    countryCode?: string | undefined;

    constructor(data?: IUserAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company = data["company"];
            this.department = data["department"];
            this.address = data["address"];
            this.alternativeAddress = data["alternativeAddress"];
            this.zip = data["zip"];
            this.city = data["city"];
            this.phone = data["phone"];
            this.countryCode = data["countryCode"];
        }
    }

    static fromJS(data: any): UserAddress {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company"] = this.company;
        data["department"] = this.department;
        data["address"] = this.address;
        data["alternativeAddress"] = this.alternativeAddress;
        data["zip"] = this.zip;
        data["city"] = this.city;
        data["phone"] = this.phone;
        data["countryCode"] = this.countryCode;
        return data; 
    }
}

/** User's address */
export interface IUserAddress {
    /** Company address line */
    company?: string | undefined;
    /** Company department. */
    department?: string | undefined;
    /** Street and house number. */
    address?: string | undefined;
    /** Additional address line. */
    alternativeAddress?: string | undefined;
    /** ZIP code. */
    zip?: string | undefined;
    /** City or town. */
    city?: string | undefined;
    /** Phone number. */
    phone?: string | undefined;
    /** Country code. */
    countryCode?: string | undefined;
}

/** System user roles. */
export enum SystemUserRole {
    Administrator = "Administrator",
}

/** Request to update a user profile. */
export class UserProfileUpdateRequest implements IUserProfileUpdateRequest {
    /** ID of the user. */
    id?: string | undefined;
    /** Email address. */
    emailAddress?: string | undefined;
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Language code. */
    languageCode?: string | undefined;
    /** Address. */
    address?: UserAddress | undefined;

    constructor(data?: IUserProfileUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.address = data.address && !(<any>data.address).toJSON ? new UserAddress(data.address) : <UserAddress>this.address; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.emailAddress = data["emailAddress"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.languageCode = data["languageCode"];
            this.address = data["address"] ? UserAddress.fromJS(data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserProfileUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailAddress"] = this.emailAddress;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["languageCode"] = this.languageCode;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to update a user profile. */
export interface IUserProfileUpdateRequest {
    /** ID of the user. */
    id?: string | undefined;
    /** Email address. */
    emailAddress?: string | undefined;
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Language code. */
    languageCode?: string | undefined;
    /** Address. */
    address?: IUserAddress | undefined;
}

/** The details of a schema */
export class SchemaDetail implements ISchemaDetail {
    /** The schema ID. It is unique throughout the whole customer setup. */
    id!: string;
    /** System generated schema namespace. It contains the full schema hierarchy up to the root schema (i.e. [RootSchemaId].[ParentSchemaId].[SchemaId]). */
    schemaNamespace!: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types!: SchemaType[];
    /** Language specific schema names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: TranslatedStringDictionary | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns!: DisplayPattern[];
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: SortInfo[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Identifies a system provided schema. A system schema cannot be created, updated or deleted. */
    system!: boolean;
    /** The owner token ID. Defines the schema owner. */
    ownerTokenId!: string;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll!: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;
    /** The complete list of all descendant schema IDs. */
    descendantSchemaIds?: string[] | undefined;
    /** Audit information. */
    audit?: UserAuditDetail | undefined;
    /** The number of fields generated by the schema in the search index for filtering, searching and sorting. */
    searchFieldCount?: SearchFieldCount | undefined;

    constructor(data?: ISchemaDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
            if (data.displayPatterns) {
                this.displayPatterns = [];
                for (let i = 0; i < data.displayPatterns.length; i++) {
                    let item = data.displayPatterns[i];
                    this.displayPatterns[i] = item && !(<any>item).toJSON ? new DisplayPattern(item) : <DisplayPattern>item;
                }
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
            this.searchFieldCount = data.searchFieldCount && !(<any>data.searchFieldCount).toJSON ? new SearchFieldCount(data.searchFieldCount) : <SearchFieldCount>this.searchFieldCount; 
        }
        if (!data) {
            this.types = [];
            this.displayPatterns = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.schemaNamespace = data["schemaNamespace"];
            this.parentSchemaId = data["parentSchemaId"];
            if (Array.isArray(data["types"])) {
                this.types = [] as any;
                for (let item of data["types"])
                    this.types!.push(item);
            }
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (Array.isArray(data["displayPatterns"])) {
                this.displayPatterns = [] as any;
                for (let item of data["displayPatterns"])
                    this.displayPatterns!.push(DisplayPattern.fromJS(item));
            }
            if (Array.isArray(data["fields"])) {
                this.fields = [] as any;
                for (let item of data["fields"])
                    this.fields!.push(FieldBase.fromJS(item));
            }
            if (Array.isArray(data["fieldsOverwrite"])) {
                this.fieldsOverwrite = [] as any;
                for (let item of data["fieldsOverwrite"])
                    this.fieldsOverwrite!.push(FieldOverwriteBase.fromJS(item));
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            this.system = data["system"];
            this.ownerTokenId = data["ownerTokenId"];
            this.viewForAll = data["viewForAll"];
            if (Array.isArray(data["schemaPermissionSetIds"])) {
                this.schemaPermissionSetIds = [] as any;
                for (let item of data["schemaPermissionSetIds"])
                    this.schemaPermissionSetIds!.push(item);
            }
            if (Array.isArray(data["referencedInContentSchemaIds"])) {
                this.referencedInContentSchemaIds = [] as any;
                for (let item of data["referencedInContentSchemaIds"])
                    this.referencedInContentSchemaIds!.push(item);
            }
            if (Array.isArray(data["descendantSchemaIds"])) {
                this.descendantSchemaIds = [] as any;
                for (let item of data["descendantSchemaIds"])
                    this.descendantSchemaIds!.push(item);
            }
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
            this.searchFieldCount = data["searchFieldCount"] ? SearchFieldCount.fromJS(data["searchFieldCount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SchemaDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["schemaNamespace"] = this.schemaNamespace;
        data["parentSchemaId"] = this.parentSchemaId;
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (Array.isArray(this.displayPatterns)) {
            data["displayPatterns"] = [];
            for (let item of this.displayPatterns)
                data["displayPatterns"].push(item.toJSON());
        }
        if (Array.isArray(this.fields)) {
            data["fields"] = [];
            for (let item of this.fields)
                data["fields"].push(item.toJSON());
        }
        if (Array.isArray(this.fieldsOverwrite)) {
            data["fieldsOverwrite"] = [];
            for (let item of this.fieldsOverwrite)
                data["fieldsOverwrite"].push(item.toJSON());
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        data["system"] = this.system;
        data["ownerTokenId"] = this.ownerTokenId;
        data["viewForAll"] = this.viewForAll;
        if (Array.isArray(this.schemaPermissionSetIds)) {
            data["schemaPermissionSetIds"] = [];
            for (let item of this.schemaPermissionSetIds)
                data["schemaPermissionSetIds"].push(item);
        }
        if (Array.isArray(this.referencedInContentSchemaIds)) {
            data["referencedInContentSchemaIds"] = [];
            for (let item of this.referencedInContentSchemaIds)
                data["referencedInContentSchemaIds"].push(item);
        }
        if (Array.isArray(this.descendantSchemaIds)) {
            data["descendantSchemaIds"] = [];
            for (let item of this.descendantSchemaIds)
                data["descendantSchemaIds"].push(item);
        }
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["searchFieldCount"] = this.searchFieldCount ? this.searchFieldCount.toJSON() : <any>undefined;
        return data; 
    }
}

/** The details of a schema */
export interface ISchemaDetail {
    /** The schema ID. It is unique throughout the whole customer setup. */
    id: string;
    /** System generated schema namespace. It contains the full schema hierarchy up to the root schema (i.e. [RootSchemaId].[ParentSchemaId].[SchemaId]). */
    schemaNamespace: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types: SchemaType[];
    /** Language specific schema names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: ITranslatedStringDictionary | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns: IDisplayPattern[];
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: ISortInfo[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Identifies a system provided schema. A system schema cannot be created, updated or deleted. */
    system: boolean;
    /** The owner token ID. Defines the schema owner. */
    ownerTokenId: string;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;
    /** The complete list of all descendant schema IDs. */
    descendantSchemaIds?: string[] | undefined;
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
    /** The number of fields generated by the schema in the search index for filtering, searching and sorting. */
    searchFieldCount?: ISearchFieldCount | undefined;
}

/** Represent the template whose value will be resolved based on the actual content. */
export class DisplayPattern implements IDisplayPattern {
    /** The template engine used for parsing the display patterns. */
    templateEngine!: TemplateEngine;
    /** The display pattern type. */
    displayPatternType!: DisplayPatternType;
    /** Language specific pattern templates. */
    templates?: TranslatedStringDictionary | undefined;

    constructor(data?: IDisplayPattern) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.templates = data.templates && !(<any>data.templates).toJSON ? new TranslatedStringDictionary(data.templates) : <TranslatedStringDictionary>this.templates; 
        }
    }

    init(data?: any) {
        if (data) {
            this.templateEngine = data["templateEngine"];
            this.displayPatternType = data["displayPatternType"];
            this.templates = data["templates"] ? TranslatedStringDictionary.fromJS(data["templates"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DisplayPattern {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayPattern();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateEngine"] = this.templateEngine;
        data["displayPatternType"] = this.displayPatternType;
        data["templates"] = this.templates ? this.templates.toJSON() : <any>undefined;
        return data; 
    }
}

/** Represent the template whose value will be resolved based on the actual content. */
export interface IDisplayPattern {
    /** The template engine used for parsing the display patterns. */
    templateEngine: TemplateEngine;
    /** The display pattern type. */
    displayPatternType: DisplayPatternType;
    /** Language specific pattern templates. */
    templates?: ITranslatedStringDictionary | undefined;
}

/** The template engine used for parsing the display patterns */
export enum TemplateEngine {
    DotLiquid = "DotLiquid",
}

/** The field base class */
export abstract class FieldBase implements IFieldBase {
    /** The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case. */
    id!: string;
    /** The index ID is auto generated by the system. */
    indexId?: string | undefined;
    /** The field namespace is auto generated by the system: it carries the hierarchy information. */
    fieldNamespace?: string | undefined;
    /** Language specific field names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific field descriptions. */
    descriptions?: TranslatedStringDictionary | undefined;
    /** Defines if a field value is mandatory or not. */
    required!: boolean;
    /** Defines if the field can be edited or not. */
    fixed!: boolean;
    /** Field is stored for filtering. */
    index!: boolean;
    /** Field is stored for simple search. */
    simpleSearch!: boolean;
    /** Field is stored for sorting. */
    sortable!: boolean;

    protected _discriminator: string;

    constructor(data?: IFieldBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
        }
        this._discriminator = "FieldBase";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.indexId = data["indexId"];
            this.fieldNamespace = data["fieldNamespace"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            this.required = data["required"];
            this.fixed = data["fixed"];
            this.index = data["index"];
            this.simpleSearch = data["simpleSearch"];
            this.sortable = data["sortable"];
        }
    }

    static fromJS(data: any): FieldBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldBoolean") {
            let result = new FieldBoolean();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDate") {
            let result = new FieldDate();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDateTime") {
            let result = new FieldDateTime();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDateTimeArray") {
            let result = new FieldDateTimeArray();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDecimal") {
            let result = new FieldDecimal();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDictionary") {
            let result = new FieldDictionary();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldDictionaryArray") {
            let result = new FieldDictionaryArray();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldGeoPoint") {
            let result = new FieldGeoPoint();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldTrigger") {
            let result = new FieldTrigger();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldLong") {
            let result = new FieldLong();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldLongArray") {
            let result = new FieldLongArray();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldSingleFieldset") {
            let result = new FieldSingleFieldset();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldMultiFieldset") {
            let result = new FieldMultiFieldset();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldSingleTagbox") {
            let result = new FieldSingleTagbox();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldMultiTagbox") {
            let result = new FieldMultiTagbox();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldString") {
            let result = new FieldString();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldStringArray") {
            let result = new FieldStringArray();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldTranslatedString") {
            let result = new FieldTranslatedString();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldSingleRelation") {
            let result = new FieldSingleRelation();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldMultiRelation") {
            let result = new FieldMultiRelation();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'FieldBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["indexId"] = this.indexId;
        data["fieldNamespace"] = this.fieldNamespace;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        data["required"] = this.required;
        data["fixed"] = this.fixed;
        data["index"] = this.index;
        data["simpleSearch"] = this.simpleSearch;
        data["sortable"] = this.sortable;
        return data; 
    }
}

/** The field base class */
export interface IFieldBase {
    /** The field ID. It can be a slug; it must be unique within the schema hierarchy (ancestors / descendants); it must be begin with lower case. */
    id: string;
    /** The index ID is auto generated by the system. */
    indexId?: string | undefined;
    /** The field namespace is auto generated by the system: it carries the hierarchy information. */
    fieldNamespace?: string | undefined;
    /** Language specific field names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific field descriptions. */
    descriptions?: ITranslatedStringDictionary | undefined;
    /** Defines if a field value is mandatory or not. */
    required: boolean;
    /** Defines if the field can be edited or not. */
    fixed: boolean;
    /** Field is stored for filtering. */
    index: boolean;
    /** Field is stored for simple search. */
    simpleSearch: boolean;
    /** Field is stored for sorting. */
    sortable: boolean;
}

/** The field used to store a boolean */
export class FieldBoolean extends FieldBase implements IFieldBoolean {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldBoolean) {
        super(data);
        this._discriminator = "FieldBoolean";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new FieldBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a boolean */
export interface IFieldBoolean extends IFieldBase {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store a date */
export class FieldDate extends FieldBase implements IFieldDate {
    /** The date format structure. */
    format?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldDate) {
        super(data);
        this._discriminator = "FieldDate";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.format = data["format"];
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldDate {
        data = typeof data === 'object' ? data : {};
        let result = new FieldDate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format;
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a date */
export interface IFieldDate extends IFieldBase {
    /** The date format structure. */
    format?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store a date time */
export class FieldDateTime extends FieldBase implements IFieldDateTime {
    /** The date time format structure. */
    format?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldDateTime) {
        super(data);
        this._discriminator = "FieldDateTime";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.format = data["format"];
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldDateTime {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldDateTimeArray") {
            let result = new FieldDateTimeArray();
            result.init(data);
            return result;
        }
        let result = new FieldDateTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format;
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a date time */
export interface IFieldDateTime extends IFieldBase {
    /** The date time format structure. */
    format?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store multiple date time values */
export class FieldDateTimeArray extends FieldDateTime implements IFieldDateTimeArray {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldDateTimeArray) {
        super(data);
        this._discriminator = "FieldDateTimeArray";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldDateTimeArray {
        data = typeof data === 'object' ? data : {};
        let result = new FieldDateTimeArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple date time values */
export interface IFieldDateTimeArray extends IFieldDateTime {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** The field used to store a decimal value */
export class FieldDecimal extends FieldBase implements IFieldDecimal {
    /** The decimal pattern structure. */
    pattern?: string | undefined;
    /** The minimum possible value. */
    minimum?: number | undefined;
    /** The maximum possible value. */
    maximum?: number | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldDecimal) {
        super(data);
        this._discriminator = "FieldDecimal";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.pattern = data["pattern"];
            this.minimum = data["minimum"];
            this.maximum = data["maximum"];
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldDecimal {
        data = typeof data === 'object' ? data : {};
        let result = new FieldDecimal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pattern"] = this.pattern;
        data["minimum"] = this.minimum;
        data["maximum"] = this.maximum;
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a decimal value */
export interface IFieldDecimal extends IFieldBase {
    /** The decimal pattern structure. */
    pattern?: string | undefined;
    /** The minimum possible value. */
    minimum?: number | undefined;
    /** The maximum possible value. */
    maximum?: number | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store a dictionary of values */
export class FieldDictionary extends FieldBase implements IFieldDictionary {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldDictionary) {
        super(data);
        this._discriminator = "FieldDictionary";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldDictionary {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldDictionaryArray") {
            let result = new FieldDictionaryArray();
            result.init(data);
            return result;
        }
        let result = new FieldDictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a dictionary of values */
export interface IFieldDictionary extends IFieldBase {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store multiple dictionaries' values */
export class FieldDictionaryArray extends FieldDictionary implements IFieldDictionaryArray {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldDictionaryArray) {
        super(data);
        this._discriminator = "FieldDictionaryArray";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldDictionaryArray {
        data = typeof data === 'object' ? data : {};
        let result = new FieldDictionaryArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple dictionaries' values */
export interface IFieldDictionaryArray extends IFieldDictionary {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** The field used to store a geo point */
export class FieldGeoPoint extends FieldBase implements IFieldGeoPoint {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldGeoPoint) {
        super(data);
        this._discriminator = "FieldGeoPoint";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldGeoPoint {
        data = typeof data === 'object' ? data : {};
        let result = new FieldGeoPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a geo point */
export interface IFieldGeoPoint extends IFieldBase {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** A field that can be triggered, and store in such occasion the id of the user and the time that triggered it. The last user who triggered it and the last time in which it was triggered can be used for filtering or for simple search (if enabled on the field). Such information are stored in two inner fields: "triggeredBy" and "triggeredOn". In order to be triggered in a Content or ListItem metadata dictionary, the special '"_trigger": true' should be sent in the data of the field itself. */
export class FieldTrigger extends FieldBase implements IFieldTrigger {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldTrigger) {
        super(data);
        this._discriminator = "FieldTrigger";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldTrigger {
        data = typeof data === 'object' ? data : {};
        let result = new FieldTrigger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** A field that can be triggered, and store in such occasion the id of the user and the time that triggered it. The last user who triggered it and the last time in which it was triggered can be used for filtering or for simple search (if enabled on the field). Such information are stored in two inner fields: "triggeredBy" and "triggeredOn". In order to be triggered in a Content or ListItem metadata dictionary, the special '"_trigger": true' should be sent in the data of the field itself. */
export interface IFieldTrigger extends IFieldBase {
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store a long value */
export class FieldLong extends FieldBase implements IFieldLong {
    /** The long pattern structure. */
    pattern?: string | undefined;
    /** The minimum possible value. */
    minimum?: number | undefined;
    /** The maximum possible value. */
    maximum?: number | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldLong) {
        super(data);
        this._discriminator = "FieldLong";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.pattern = data["pattern"];
            this.minimum = data["minimum"];
            this.maximum = data["maximum"];
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldLong {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldLongArray") {
            let result = new FieldLongArray();
            result.init(data);
            return result;
        }
        let result = new FieldLong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pattern"] = this.pattern;
        data["minimum"] = this.minimum;
        data["maximum"] = this.maximum;
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a long value */
export interface IFieldLong extends IFieldBase {
    /** The long pattern structure. */
    pattern?: string | undefined;
    /** The minimum possible value. */
    minimum?: number | undefined;
    /** The maximum possible value. */
    maximum?: number | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store multiple long values */
export class FieldLongArray extends FieldLong implements IFieldLongArray {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldLongArray) {
        super(data);
        this._discriminator = "FieldLongArray";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldLongArray {
        data = typeof data === 'object' ? data : {};
        let result = new FieldLongArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple long values */
export interface IFieldLongArray extends IFieldLong {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** The field used to store a single fieldset */
export class FieldSingleFieldset extends FieldBase implements IFieldSingleFieldset {
    /** The ID of the schema to be used as fieldset (it must be of type Struct). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;

    constructor(data?: IFieldSingleFieldset) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
        }
        this._discriminator = "FieldSingleFieldset";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FieldSingleFieldset {
        data = typeof data === 'object' ? data : {};
        let result = new FieldSingleFieldset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a single fieldset */
export interface IFieldSingleFieldset extends IFieldBase {
    /** The ID of the schema to be used as fieldset (it must be of type Struct). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
}

/** Indexing information for a schema */
export class SchemaIndexingInfo implements ISchemaIndexingInfo {
    /** A collection of indexing information for the fields of a schema */
    fields?: FieldIndexingInfo[] | undefined;

    constructor(data?: ISchemaIndexingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.fields) {
                this.fields = [];
                for (let i = 0; i < data.fields.length; i++) {
                    let item = data.fields[i];
                    this.fields[i] = item && !(<any>item).toJSON ? new FieldIndexingInfo(item) : <FieldIndexingInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["fields"])) {
                this.fields = [] as any;
                for (let item of data["fields"])
                    this.fields!.push(FieldIndexingInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaIndexingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaIndexingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fields)) {
            data["fields"] = [];
            for (let item of this.fields)
                data["fields"].push(item.toJSON());
        }
        return data; 
    }
}

/** Indexing information for a schema */
export interface ISchemaIndexingInfo {
    /** A collection of indexing information for the fields of a schema */
    fields?: IFieldIndexingInfo[] | undefined;
}

/** Indexing information for a field of a schema */
export class FieldIndexingInfo implements IFieldIndexingInfo {
    /** The field ID. */
    id!: string;
    /** Field is stored for filtering. */
    index!: boolean;
    /** Field is stored for simple search. */
    simpleSearch!: boolean;
    /** Field is stored for sorting. */
    sortable!: boolean;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;
    /** Indexing information of schema's fields related to this field (if existing). */
    relatedSchemaIndexing?: SchemaIndexingInfo | undefined;

    constructor(data?: IFieldIndexingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.relatedSchemaIndexing = data.relatedSchemaIndexing && !(<any>data.relatedSchemaIndexing).toJSON ? new SchemaIndexingInfo(data.relatedSchemaIndexing) : <SchemaIndexingInfo>this.relatedSchemaIndexing; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.index = data["index"];
            this.simpleSearch = data["simpleSearch"];
            this.sortable = data["sortable"];
            this.boost = data["boost"];
            this.relatedSchemaIndexing = data["relatedSchemaIndexing"] ? SchemaIndexingInfo.fromJS(data["relatedSchemaIndexing"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FieldIndexingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FieldIndexingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["index"] = this.index;
        data["simpleSearch"] = this.simpleSearch;
        data["sortable"] = this.sortable;
        data["boost"] = this.boost;
        data["relatedSchemaIndexing"] = this.relatedSchemaIndexing ? this.relatedSchemaIndexing.toJSON() : <any>undefined;
        return data; 
    }
}

/** Indexing information for a field of a schema */
export interface IFieldIndexingInfo {
    /** The field ID. */
    id: string;
    /** Field is stored for filtering. */
    index: boolean;
    /** Field is stored for simple search. */
    simpleSearch: boolean;
    /** Field is stored for sorting. */
    sortable: boolean;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
    /** Indexing information of schema's fields related to this field (if existing). */
    relatedSchemaIndexing?: ISchemaIndexingInfo | undefined;
}

/** The field used to store multiple fieldsets */
export class FieldMultiFieldset extends FieldBase implements IFieldMultiFieldset {
    /** The ID of the schema to be used as fieldset (it must be of type Struct, and it cannot be a system schema). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldMultiFieldset) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
        }
        this._discriminator = "FieldMultiFieldset";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldMultiFieldset {
        data = typeof data === 'object' ? data : {};
        let result = new FieldMultiFieldset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple fieldsets */
export interface IFieldMultiFieldset extends IFieldBase {
    /** The ID of the schema to be used as fieldset (it must be of type Struct, and it cannot be a system schema). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** The field used to store a single tagbox */
export class FieldSingleTagbox extends FieldBase implements IFieldSingleTagbox {
    /** The ID of the schema to be used as tagbox (it must be of type List). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;
    /** An optional filter to limit the list items. */
    filter?: FilterBase | undefined;
    /** Json serialized template used for creating new list item (no logic is implemented in backend). */
    listItemCreateTemplate?: string | undefined;
    /** Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
The information is only consumed by the client application. No actual logic is implemented in the backend. */
    viewModeDisplayPatternType!: DisplayPatternType;

    constructor(data?: IFieldSingleTagbox) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
        }
        this._discriminator = "FieldSingleTagbox";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.listItemCreateTemplate = data["listItemCreateTemplate"];
            this.viewModeDisplayPatternType = data["viewModeDisplayPatternType"];
        }
    }

    static fromJS(data: any): FieldSingleTagbox {
        data = typeof data === 'object' ? data : {};
        let result = new FieldSingleTagbox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["listItemCreateTemplate"] = this.listItemCreateTemplate;
        data["viewModeDisplayPatternType"] = this.viewModeDisplayPatternType;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a single tagbox */
export interface IFieldSingleTagbox extends IFieldBase {
    /** The ID of the schema to be used as tagbox (it must be of type List). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
    /** An optional filter to limit the list items. */
    filter?: FilterBase | undefined;
    /** Json serialized template used for creating new list item (no logic is implemented in backend). */
    listItemCreateTemplate?: string | undefined;
    /** Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
The information is only consumed by the client application. No actual logic is implemented in the backend. */
    viewModeDisplayPatternType: DisplayPatternType;
}

/** The field used to store multiple tagboxes */
export class FieldMultiTagbox extends FieldBase implements IFieldMultiTagbox {
    /** The ID of the schema to be used as tagbox (it must be of type List). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
    /** An optional filter to limit the returned list items. */
    filter?: FilterBase | undefined;
    /** Json serialized template used for creating new list item (no logic is implemented in backend). */
    listItemCreateTemplate?: string | undefined;
    /** Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
The information is only consumed by the client application. No actual logic is implemented in the backend. */
    viewModeDisplayPatternType!: DisplayPatternType;

    constructor(data?: IFieldMultiTagbox) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
        }
        this._discriminator = "FieldMultiTagbox";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.listItemCreateTemplate = data["listItemCreateTemplate"];
            this.viewModeDisplayPatternType = data["viewModeDisplayPatternType"];
        }
    }

    static fromJS(data: any): FieldMultiTagbox {
        data = typeof data === 'object' ? data : {};
        let result = new FieldMultiTagbox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["listItemCreateTemplate"] = this.listItemCreateTemplate;
        data["viewModeDisplayPatternType"] = this.viewModeDisplayPatternType;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple tagboxes */
export interface IFieldMultiTagbox extends IFieldBase {
    /** The ID of the schema to be used as tagbox (it must be of type List). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
    /** An optional filter to limit the returned list items. */
    filter?: FilterBase | undefined;
    /** Json serialized template used for creating new list item (no logic is implemented in backend). */
    listItemCreateTemplate?: string | undefined;
    /** Defines the display pattern type to be used (Name or List only) when showing a tagbox item in view mode. Defaults to "Name".
The information is only consumed by the client application. No actual logic is implemented in the backend. */
    viewModeDisplayPatternType: DisplayPatternType;
}

/** The field used to store a string value */
export class FieldString extends FieldBase implements IFieldString {
    /** A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template. */
    template?: string | undefined;
    /** Contains a regex validation pattern. */
    pattern?: string | undefined;
    /** The minimum string's lenght. */
    minimumLength?: number | undefined;
    /** The maximum string's length. */
    maximumLength?: number | undefined;
    /** Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the Index property is set to true. */
    indexAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the SimpleSearch property is set to true. */
    simpleSearchAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines that the field value must be displayed in a multiline component. */
    multiLine!: boolean;
    /** If values are stored in this list, field values are limited to these ones. */
    grantedValues?: string[] | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldString) {
        super(data);
        this._discriminator = "FieldString";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.template = data["template"];
            this.pattern = data["pattern"];
            this.minimumLength = data["minimumLength"];
            this.maximumLength = data["maximumLength"];
            if (Array.isArray(data["indexAnalyzers"])) {
                this.indexAnalyzers = [] as any;
                for (let item of data["indexAnalyzers"])
                    this.indexAnalyzers!.push(AnalyzerBase.fromJS(item));
            }
            if (Array.isArray(data["simpleSearchAnalyzers"])) {
                this.simpleSearchAnalyzers = [] as any;
                for (let item of data["simpleSearchAnalyzers"])
                    this.simpleSearchAnalyzers!.push(AnalyzerBase.fromJS(item));
            }
            this.multiLine = data["multiLine"];
            if (Array.isArray(data["grantedValues"])) {
                this.grantedValues = [] as any;
                for (let item of data["grantedValues"])
                    this.grantedValues!.push(item);
            }
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldString {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldStringArray") {
            let result = new FieldStringArray();
            result.init(data);
            return result;
        }
        let result = new FieldString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["template"] = this.template;
        data["pattern"] = this.pattern;
        data["minimumLength"] = this.minimumLength;
        data["maximumLength"] = this.maximumLength;
        if (Array.isArray(this.indexAnalyzers)) {
            data["indexAnalyzers"] = [];
            for (let item of this.indexAnalyzers)
                data["indexAnalyzers"].push(item.toJSON());
        }
        if (Array.isArray(this.simpleSearchAnalyzers)) {
            data["simpleSearchAnalyzers"] = [];
            for (let item of this.simpleSearchAnalyzers)
                data["simpleSearchAnalyzers"].push(item.toJSON());
        }
        data["multiLine"] = this.multiLine;
        if (Array.isArray(this.grantedValues)) {
            data["grantedValues"] = [];
            for (let item of this.grantedValues)
                data["grantedValues"].push(item);
        }
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a string value */
export interface IFieldString extends IFieldBase {
    /** A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template. */
    template?: string | undefined;
    /** Contains a regex validation pattern. */
    pattern?: string | undefined;
    /** The minimum string's lenght. */
    minimumLength?: number | undefined;
    /** The maximum string's length. */
    maximumLength?: number | undefined;
    /** Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the Index property is set to true. */
    indexAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the SimpleSearch property is set to true. */
    simpleSearchAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines that the field value must be displayed in a multiline component. */
    multiLine: boolean;
    /** If values are stored in this list, field values are limited to these ones. */
    grantedValues?: string[] | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The analyzer base class */
export abstract class AnalyzerBase implements IAnalyzerBase {

    protected _discriminator: string;

    constructor(data?: IAnalyzerBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AnalyzerBase";
    }

    init(data?: any) {
    }

    static fromJS(data: any): AnalyzerBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "EdgeNGramAnalyzer") {
            let result = new EdgeNGramAnalyzer();
            result.init(data);
            return result;
        }
        if (data["kind"] === "LanguageAnalyzer") {
            let result = new LanguageAnalyzer();
            result.init(data);
            return result;
        }
        if (data["kind"] === "NGramAnalyzer") {
            let result = new NGramAnalyzer();
            result.init(data);
            return result;
        }
        if (data["kind"] === "PathHierarchyAnalyzer") {
            let result = new PathHierarchyAnalyzer();
            result.init(data);
            return result;
        }
        if (data["kind"] === "SimpleAnalyzer") {
            let result = new SimpleAnalyzer();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'AnalyzerBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        return data; 
    }
}

/** The analyzer base class */
export interface IAnalyzerBase {
}

/** An analyzer using the ElasticSearch's EdgeNGram tokenizer */
export class EdgeNGramAnalyzer extends AnalyzerBase implements IEdgeNGramAnalyzer {
    /** The analyzer type: EdgeNGram */
    type!: Analyzer;
    /** The suffix for the analyzed field: edgengram. */
    fieldSuffix?: string | undefined;

    constructor(data?: IEdgeNGramAnalyzer) {
        super(data);
        this._discriminator = "EdgeNGramAnalyzer";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
            this.fieldSuffix = data["fieldSuffix"];
        }
    }

    static fromJS(data: any): EdgeNGramAnalyzer {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeNGramAnalyzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fieldSuffix"] = this.fieldSuffix;
        super.toJSON(data);
        return data; 
    }
}

/** An analyzer using the ElasticSearch's EdgeNGram tokenizer */
export interface IEdgeNGramAnalyzer extends IAnalyzerBase {
    /** The analyzer type: EdgeNGram */
    type: Analyzer;
    /** The suffix for the analyzed field: edgengram. */
    fieldSuffix?: string | undefined;
}

/** An analyzer using an ElasticSearch's language tokenizer */
export class LanguageAnalyzer extends AnalyzerBase implements ILanguageAnalyzer {
    /** The analyzer type: Language */
    type!: Analyzer;
    /** The suffix for the analyzed field: language. */
    fieldSuffix?: string | undefined;

    constructor(data?: ILanguageAnalyzer) {
        super(data);
        this._discriminator = "LanguageAnalyzer";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
            this.fieldSuffix = data["fieldSuffix"];
        }
    }

    static fromJS(data: any): LanguageAnalyzer {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageAnalyzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fieldSuffix"] = this.fieldSuffix;
        super.toJSON(data);
        return data; 
    }
}

/** An analyzer using an ElasticSearch's language tokenizer */
export interface ILanguageAnalyzer extends IAnalyzerBase {
    /** The analyzer type: Language */
    type: Analyzer;
    /** The suffix for the analyzed field: language. */
    fieldSuffix?: string | undefined;
}

/** An analyzer using the ElasticSearch's NGram tokenizer */
export class NGramAnalyzer extends AnalyzerBase implements INGramAnalyzer {
    /** The analyzer type: NGram */
    type!: Analyzer;
    /** The suffix for the analyzed field: ngram. */
    fieldSuffix?: string | undefined;

    constructor(data?: INGramAnalyzer) {
        super(data);
        this._discriminator = "NGramAnalyzer";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
            this.fieldSuffix = data["fieldSuffix"];
        }
    }

    static fromJS(data: any): NGramAnalyzer {
        data = typeof data === 'object' ? data : {};
        let result = new NGramAnalyzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fieldSuffix"] = this.fieldSuffix;
        super.toJSON(data);
        return data; 
    }
}

/** An analyzer using the ElasticSearch's NGram tokenizer */
export interface INGramAnalyzer extends IAnalyzerBase {
    /** The analyzer type: NGram */
    type: Analyzer;
    /** The suffix for the analyzed field: ngram. */
    fieldSuffix?: string | undefined;
}

/** An analyzer using the ElasticSearch's path hierarchy tokenizer */
export class PathHierarchyAnalyzer extends AnalyzerBase implements IPathHierarchyAnalyzer {
    /** The analyzer type: PathHierarchy */
    type!: Analyzer;
    /** The suffix for the analyzed field: pathhierarchy. */
    fieldSuffix?: string | undefined;

    constructor(data?: IPathHierarchyAnalyzer) {
        super(data);
        this._discriminator = "PathHierarchyAnalyzer";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
            this.fieldSuffix = data["fieldSuffix"];
        }
    }

    static fromJS(data: any): PathHierarchyAnalyzer {
        data = typeof data === 'object' ? data : {};
        let result = new PathHierarchyAnalyzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fieldSuffix"] = this.fieldSuffix;
        super.toJSON(data);
        return data; 
    }
}

/** An analyzer using the ElasticSearch's path hierarchy tokenizer */
export interface IPathHierarchyAnalyzer extends IAnalyzerBase {
    /** The analyzer type: PathHierarchy */
    type: Analyzer;
    /** The suffix for the analyzed field: pathhierarchy. */
    fieldSuffix?: string | undefined;
}

/** An analyzer using a custom pattern tokenizer */
export class SimpleAnalyzer extends AnalyzerBase implements ISimpleAnalyzer {
    /** The analyzer type: Simple */
    type!: Analyzer;
    /** The suffix for the analyzed field: simple. */
    fieldSuffix?: string | undefined;

    constructor(data?: ISimpleAnalyzer) {
        super(data);
        this._discriminator = "SimpleAnalyzer";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.type = data["type"];
            this.fieldSuffix = data["fieldSuffix"];
        }
    }

    static fromJS(data: any): SimpleAnalyzer {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleAnalyzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fieldSuffix"] = this.fieldSuffix;
        super.toJSON(data);
        return data; 
    }
}

/** An analyzer using a custom pattern tokenizer */
export interface ISimpleAnalyzer extends IAnalyzerBase {
    /** The analyzer type: Simple */
    type: Analyzer;
    /** The suffix for the analyzed field: simple. */
    fieldSuffix?: string | undefined;
}

/** The field used to store multiple string values */
export class FieldStringArray extends FieldString implements IFieldStringArray {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldStringArray) {
        super(data);
        this._discriminator = "FieldStringArray";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldStringArray {
        data = typeof data === 'object' ? data : {};
        let result = new FieldStringArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple string values */
export interface IFieldStringArray extends IFieldString {
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** The field used to store a translated string values */
export class FieldTranslatedString extends FieldBase implements IFieldTranslatedString {
    /** Contains a regex validation pattern. */
    pattern?: string | undefined;
    /** The minimum string's lenght. */
    minimumLength?: number | undefined;
    /** The maximum string's length. */
    maximumLength?: number | undefined;
    /** Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the Index property is set to true. */
    indexAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the SimpleSearch property is set to true. */
    simpleSearchAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines that the field value must be displayed in a multiline component. */
    multiLine!: boolean;
    /** Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.
If Required is true, the field and all its metadata languages are required.
If Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory. */
    requiredMetadataLanguages?: string[] | undefined;
    /** A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.
             */
    template?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost!: number;

    constructor(data?: IFieldTranslatedString) {
        super(data);
        this._discriminator = "FieldTranslatedString";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.pattern = data["pattern"];
            this.minimumLength = data["minimumLength"];
            this.maximumLength = data["maximumLength"];
            if (Array.isArray(data["indexAnalyzers"])) {
                this.indexAnalyzers = [] as any;
                for (let item of data["indexAnalyzers"])
                    this.indexAnalyzers!.push(AnalyzerBase.fromJS(item));
            }
            if (Array.isArray(data["simpleSearchAnalyzers"])) {
                this.simpleSearchAnalyzers = [] as any;
                for (let item of data["simpleSearchAnalyzers"])
                    this.simpleSearchAnalyzers!.push(AnalyzerBase.fromJS(item));
            }
            this.multiLine = data["multiLine"];
            if (Array.isArray(data["requiredMetadataLanguages"])) {
                this.requiredMetadataLanguages = [] as any;
                for (let item of data["requiredMetadataLanguages"])
                    this.requiredMetadataLanguages!.push(item);
            }
            this.template = data["template"];
            this.boost = data["boost"];
        }
    }

    static fromJS(data: any): FieldTranslatedString {
        data = typeof data === 'object' ? data : {};
        let result = new FieldTranslatedString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pattern"] = this.pattern;
        data["minimumLength"] = this.minimumLength;
        data["maximumLength"] = this.maximumLength;
        if (Array.isArray(this.indexAnalyzers)) {
            data["indexAnalyzers"] = [];
            for (let item of this.indexAnalyzers)
                data["indexAnalyzers"].push(item.toJSON());
        }
        if (Array.isArray(this.simpleSearchAnalyzers)) {
            data["simpleSearchAnalyzers"] = [];
            for (let item of this.simpleSearchAnalyzers)
                data["simpleSearchAnalyzers"].push(item.toJSON());
        }
        data["multiLine"] = this.multiLine;
        if (Array.isArray(this.requiredMetadataLanguages)) {
            data["requiredMetadataLanguages"] = [];
            for (let item of this.requiredMetadataLanguages)
                data["requiredMetadataLanguages"].push(item);
        }
        data["template"] = this.template;
        data["boost"] = this.boost;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a translated string values */
export interface IFieldTranslatedString extends IFieldBase {
    /** Contains a regex validation pattern. */
    pattern?: string | undefined;
    /** The minimum string's lenght. */
    minimumLength?: number | undefined;
    /** The maximum string's length. */
    maximumLength?: number | undefined;
    /** Defines how the value must be analyzed for filtering by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the Index property is set to true. */
    indexAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines how the value must be analyzed for searches by ElasticSearch. A string field can have multiple analyzers, but only one per analyzer type.
The analyzers are applied only if the SimpleSearch property is set to true. */
    simpleSearchAnalyzers?: AnalyzerBase[] | undefined;
    /** Defines that the field value must be displayed in a multiline component. */
    multiLine: boolean;
    /** Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.
If Required is true, the field and all its metadata languages are required.
If Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory. */
    requiredMetadataLanguages?: string[] | undefined;
    /** A DotLiquid template. If set, it transforms the field in a calculated field, so that its value is calculated based on this template.
             */
    template?: string | undefined;
    /** Value to prioritize search results. Set to 1 by default. Ignored if SimpleSearch not set to true. */
    boost: number;
}

/** The field used to store a single relation */
export class FieldSingleRelation extends FieldBase implements IFieldSingleRelation {
    /** The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;
    /** Defines the allowed elation types. */
    relationTypes!: RelationType[];

    constructor(data?: IFieldSingleRelation) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
            if (data.relationTypes) {
                this.relationTypes = [];
                for (let i = 0; i < data.relationTypes.length; i++) {
                    let item = data.relationTypes[i];
                    this.relationTypes[i] = item && !(<any>item).toJSON ? new RelationType(item) : <RelationType>item;
                }
            }
        }
        if (!data) {
            this.relationTypes = [];
        }
        this._discriminator = "FieldSingleRelation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
            if (Array.isArray(data["relationTypes"])) {
                this.relationTypes = [] as any;
                for (let item of data["relationTypes"])
                    this.relationTypes!.push(RelationType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FieldSingleRelation {
        data = typeof data === 'object' ? data : {};
        let result = new FieldSingleRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.relationTypes)) {
            data["relationTypes"] = [];
            for (let item of this.relationTypes)
                data["relationTypes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store a single relation */
export interface IFieldSingleRelation extends IFieldBase {
    /** The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
    /** Defines the allowed elation types. */
    relationTypes: IRelationType[];
}

/** Defines a relation */
export class RelationType implements IRelationType {
    /** The ID of the relation type. */
    id!: string;
    /** Language specific relation names. */
    names?: TranslatedStringDictionary | undefined;
    /** Defines the type of the document target of the relation. Currently supported: Content, ListItem. */
    targetDocType!: string;
    /** An optional filter to limit the documents of type TargetDocType. */
    filter?: FilterBase | undefined;

    constructor(data?: IRelationType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.targetDocType = data["targetDocType"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RelationType {
        data = typeof data === 'object' ? data : {};
        let result = new RelationType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["targetDocType"] = this.targetDocType;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        return data; 
    }
}

/** Defines a relation */
export interface IRelationType {
    /** The ID of the relation type. */
    id: string;
    /** Language specific relation names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Defines the type of the document target of the relation. Currently supported: Content, ListItem. */
    targetDocType: string;
    /** An optional filter to limit the documents of type TargetDocType. */
    filter?: FilterBase | undefined;
}

/** The field used to store multiple relations */
export class FieldMultiRelation extends FieldBase implements IFieldMultiRelation {
    /** The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema). */
    schemaId!: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: SchemaIndexingInfo | undefined;
    /** The relation types supported by the field. */
    relationTypes!: RelationType[];
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;

    constructor(data?: IFieldMultiRelation) {
        super(data);
        if (data) {
            this.schemaIndexingInfo = data.schemaIndexingInfo && !(<any>data.schemaIndexingInfo).toJSON ? new SchemaIndexingInfo(data.schemaIndexingInfo) : <SchemaIndexingInfo>this.schemaIndexingInfo; 
            if (data.relationTypes) {
                this.relationTypes = [];
                for (let i = 0; i < data.relationTypes.length; i++) {
                    let item = data.relationTypes[i];
                    this.relationTypes[i] = item && !(<any>item).toJSON ? new RelationType(item) : <RelationType>item;
                }
            }
        }
        if (!data) {
            this.relationTypes = [];
        }
        this._discriminator = "FieldMultiRelation";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.schemaId = data["schemaId"];
            this.schemaIndexingInfo = data["schemaIndexingInfo"] ? SchemaIndexingInfo.fromJS(data["schemaIndexingInfo"]) : <any>undefined;
            if (Array.isArray(data["relationTypes"])) {
                this.relationTypes = [] as any;
                for (let item of data["relationTypes"])
                    this.relationTypes!.push(RelationType.fromJS(item));
            }
            this.maximumItems = data["maximumItems"];
            this.minimumItems = data["minimumItems"];
        }
    }

    static fromJS(data: any): FieldMultiRelation {
        data = typeof data === 'object' ? data : {};
        let result = new FieldMultiRelation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaId"] = this.schemaId;
        data["schemaIndexingInfo"] = this.schemaIndexingInfo ? this.schemaIndexingInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.relationTypes)) {
            data["relationTypes"] = [];
            for (let item of this.relationTypes)
                data["relationTypes"].push(item.toJSON());
        }
        data["maximumItems"] = this.maximumItems;
        data["minimumItems"] = this.minimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** The field used to store multiple relations */
export interface IFieldMultiRelation extends IFieldBase {
    /** The ID of the schema used for relation metadata (it must be of type Struct, and it cannot be a system schema). */
    schemaId: string;
    /** Indexing information of fields of the related schema identified by the SchemaId property. */
    schemaIndexingInfo?: ISchemaIndexingInfo | undefined;
    /** The relation types supported by the field. */
    relationTypes: IRelationType[];
    /** The maximum number of items that can be stored. */
    maximumItems?: number | undefined;
    /** The minimum number of items that must be stored. */
    minimumItems?: number | undefined;
}

/** Base class to overwrite field's information */
export abstract class FieldOverwriteBase implements IFieldOverwriteBase {
    /** The field's ID whose information need to be overwritten. */
    id?: string | undefined;
    /** Defines if a field value is mandatory or not: this value will overwrite the existing Required value specified in the parent schema  if
OverwriteRequired is set to true. */
    required!: boolean;
    /** Enable the overwriting of the Required property of the field specified by the Id property. */
    overwriteRequired!: boolean;

    protected _discriminator: string;

    constructor(data?: IFieldOverwriteBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "FieldOverwriteBase";
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.required = data["required"];
            this.overwriteRequired = data["overwriteRequired"];
        }
    }

    static fromJS(data: any): FieldOverwriteBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "FieldOverwriteSingleTagbox") {
            let result = new FieldOverwriteSingleTagbox();
            result.init(data);
            return result;
        }
        if (data["kind"] === "FieldOverwriteMultiTagbox") {
            let result = new FieldOverwriteMultiTagbox();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'FieldOverwriteBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["id"] = this.id;
        data["required"] = this.required;
        data["overwriteRequired"] = this.overwriteRequired;
        return data; 
    }
}

/** Base class to overwrite field's information */
export interface IFieldOverwriteBase {
    /** The field's ID whose information need to be overwritten. */
    id?: string | undefined;
    /** Defines if a field value is mandatory or not: this value will overwrite the existing Required value specified in the parent schema  if
OverwriteRequired is set to true. */
    required: boolean;
    /** Enable the overwriting of the Required property of the field specified by the Id property. */
    overwriteRequired: boolean;
}

/** Overwritten information for FieldSingleTagbox */
export class FieldOverwriteSingleTagbox extends FieldOverwriteBase implements IFieldOverwriteSingleTagbox {
    /** An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema  if
OverwriteFilter is set to true. */
    filter?: FilterBase | undefined;
    /** Enable the overwriting of the Filter property of the field specified by the Id property. */
    overwriteFilter!: boolean;
    /** Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema  if
OverwriteListItemCreateTemplate is set to true. */
    listItemCreateTemplate?: string | undefined;
    /** Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property. */
    overwriteListItemCreateTemplate!: boolean;

    constructor(data?: IFieldOverwriteSingleTagbox) {
        super(data);
        this._discriminator = "FieldOverwriteSingleTagbox";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.overwriteFilter = data["overwriteFilter"];
            this.listItemCreateTemplate = data["listItemCreateTemplate"];
            this.overwriteListItemCreateTemplate = data["overwriteListItemCreateTemplate"];
        }
    }

    static fromJS(data: any): FieldOverwriteSingleTagbox {
        data = typeof data === 'object' ? data : {};
        let result = new FieldOverwriteSingleTagbox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["overwriteFilter"] = this.overwriteFilter;
        data["listItemCreateTemplate"] = this.listItemCreateTemplate;
        data["overwriteListItemCreateTemplate"] = this.overwriteListItemCreateTemplate;
        super.toJSON(data);
        return data; 
    }
}

/** Overwritten information for FieldSingleTagbox */
export interface IFieldOverwriteSingleTagbox extends IFieldOverwriteBase {
    /** An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema  if
OverwriteFilter is set to true. */
    filter?: FilterBase | undefined;
    /** Enable the overwriting of the Filter property of the field specified by the Id property. */
    overwriteFilter: boolean;
    /** Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema  if
OverwriteListItemCreateTemplate is set to true. */
    listItemCreateTemplate?: string | undefined;
    /** Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property. */
    overwriteListItemCreateTemplate: boolean;
}

/** Overwritten information for FieldMultiTagbox */
export class FieldOverwriteMultiTagbox extends FieldOverwriteBase implements IFieldOverwriteMultiTagbox {
    /** An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema if
OverwriteFilter is set to true. */
    filter?: FilterBase | undefined;
    /** Enable the overwriting of the Filter property of the field specified by the Id property. */
    overwriteFilter!: boolean;
    /** Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema if
OverwriteListItemCreateTemplate is set to true. */
    listItemCreateTemplate?: string | undefined;
    /** Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property. */
    overwriteListItemCreateTemplate!: boolean;
    /** The maximum number of items that can be stored: this value will overwrite the existing MaximumItems value specified in the parent schema if
OverwriteMaximumItems is set to true. */
    maximumItems?: number | undefined;
    /** Enable the overwriting of the MaximumItems property of the field specified by the Id property. */
    overwriteMaximumItems!: boolean;
    /** The minimum number of items that must be stored: this value will overwrite the existing MinimumItems value specified in the parent schema if
OverwriteMinimumItems is set to true. */
    minimumItems?: number | undefined;
    /** Enable the overwriting of the MinimumItems property of the field specified by the Id property. */
    overwriteMinimumItems!: boolean;

    constructor(data?: IFieldOverwriteMultiTagbox) {
        super(data);
        this._discriminator = "FieldOverwriteMultiTagbox";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.overwriteFilter = data["overwriteFilter"];
            this.listItemCreateTemplate = data["listItemCreateTemplate"];
            this.overwriteListItemCreateTemplate = data["overwriteListItemCreateTemplate"];
            this.maximumItems = data["maximumItems"];
            this.overwriteMaximumItems = data["overwriteMaximumItems"];
            this.minimumItems = data["minimumItems"];
            this.overwriteMinimumItems = data["overwriteMinimumItems"];
        }
    }

    static fromJS(data: any): FieldOverwriteMultiTagbox {
        data = typeof data === 'object' ? data : {};
        let result = new FieldOverwriteMultiTagbox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["overwriteFilter"] = this.overwriteFilter;
        data["listItemCreateTemplate"] = this.listItemCreateTemplate;
        data["overwriteListItemCreateTemplate"] = this.overwriteListItemCreateTemplate;
        data["maximumItems"] = this.maximumItems;
        data["overwriteMaximumItems"] = this.overwriteMaximumItems;
        data["minimumItems"] = this.minimumItems;
        data["overwriteMinimumItems"] = this.overwriteMinimumItems;
        super.toJSON(data);
        return data; 
    }
}

/** Overwritten information for FieldMultiTagbox */
export interface IFieldOverwriteMultiTagbox extends IFieldOverwriteBase {
    /** An optional filter to limit the list items: this value will overwrite the existing Filter value specified in the parent schema if
OverwriteFilter is set to true. */
    filter?: FilterBase | undefined;
    /** Enable the overwriting of the Filter property of the field specified by the Id property. */
    overwriteFilter: boolean;
    /** Json serialized template used for creating new list item: this value will overwrite the existing ListItemCreateTemplate value specified in the parent schema if
OverwriteListItemCreateTemplate is set to true. */
    listItemCreateTemplate?: string | undefined;
    /** Enable the overwriting of the ListItemCreateTemplate property of the field specified by the Id property. */
    overwriteListItemCreateTemplate: boolean;
    /** The maximum number of items that can be stored: this value will overwrite the existing MaximumItems value specified in the parent schema if
OverwriteMaximumItems is set to true. */
    maximumItems?: number | undefined;
    /** Enable the overwriting of the MaximumItems property of the field specified by the Id property. */
    overwriteMaximumItems: boolean;
    /** The minimum number of items that must be stored: this value will overwrite the existing MinimumItems value specified in the parent schema if
OverwriteMinimumItems is set to true. */
    minimumItems?: number | undefined;
    /** Enable the overwriting of the MinimumItems property of the field specified by the Id property. */
    overwriteMinimumItems: boolean;
}

/** Count information of fields in the search index for filtering, searching and sorting */
export class SearchFieldCount implements ISearchFieldCount {
    /** The number of fields created in the search index to store filter information for a schema. */
    indexedField!: number;
    /** The number of fields created in the search index to store search information for a schema. */
    simpleSearchField!: number;
    /** The number of fields created in the search index to store sorting information for a schema. */
    sortableField!: number;

    constructor(data?: ISearchFieldCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.indexedField = data["indexedField"];
            this.simpleSearchField = data["simpleSearchField"];
            this.sortableField = data["sortableField"];
        }
    }

    static fromJS(data: any): SearchFieldCount {
        data = typeof data === 'object' ? data : {};
        let result = new SearchFieldCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indexedField"] = this.indexedField;
        data["simpleSearchField"] = this.simpleSearchField;
        data["sortableField"] = this.sortableField;
        return data; 
    }
}

/** Count information of fields in the search index for filtering, searching and sorting */
export interface ISearchFieldCount {
    /** The number of fields created in the search index to store filter information for a schema. */
    indexedField: number;
    /** The number of fields created in the search index to store search information for a schema. */
    simpleSearchField: number;
    /** The number of fields created in the search index to store sorting information for a schema. */
    sortableField: number;
}

export class BaseResultOfSchema implements IBaseResultOfSchema {
    totalResults!: number;
    results!: Schema[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new Schema(item) : <Schema>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(Schema.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfSchema {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfSchema {
    totalResults: number;
    results: ISchema[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfSchema extends BaseResultOfSchema implements ISearchBehaviorBaseResultOfSchema {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfSchema) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfSchema {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfSchema extends IBaseResultOfSchema {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Result for schema search operation */
export class SchemaSearchResult extends SearchBehaviorBaseResultOfSchema implements ISchemaSearchResult {

    constructor(data?: ISchemaSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result for schema search operation */
export interface ISchemaSearchResult extends ISearchBehaviorBaseResultOfSchema {
}

/** A schema */
export class Schema implements ISchema {
    /** The schema ID. It is unique throughout the whole customer setup. */
    id!: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types?: SchemaType[] | undefined;
    /** Language specific schema names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: TranslatedStringDictionary | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** The count of all fields. */
    fieldCount!: number;
    /** The count of all schema descendants with an immediate inheritance. */
    childCount!: number;
    /** The descendant depth of the schema. */
    level!: number;
    /** Identifies a system provided schema. A system schema cannot be created, updated or deleted. */
    system!: boolean;

    constructor(data?: ISchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.parentSchemaId = data["parentSchemaId"];
            if (Array.isArray(data["types"])) {
                this.types = [] as any;
                for (let item of data["types"])
                    this.types!.push(item);
            }
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.fieldCount = data["fieldCount"];
            this.childCount = data["childCount"];
            this.level = data["level"];
            this.system = data["system"];
        }
    }

    static fromJS(data: any): Schema {
        data = typeof data === 'object' ? data : {};
        let result = new Schema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentSchemaId"] = this.parentSchemaId;
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["fieldCount"] = this.fieldCount;
        data["childCount"] = this.childCount;
        data["level"] = this.level;
        data["system"] = this.system;
        return data; 
    }
}

/** A schema */
export interface ISchema {
    /** The schema ID. It is unique throughout the whole customer setup. */
    id: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types?: SchemaType[] | undefined;
    /** Language specific schema names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: ITranslatedStringDictionary | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** The count of all fields. */
    fieldCount: number;
    /** The count of all schema descendants with an immediate inheritance. */
    childCount: number;
    /** The descendant depth of the schema. */
    level: number;
    /** Identifies a system provided schema. A system schema cannot be created, updated or deleted. */
    system: boolean;
}

/** Request to search schemas */
export class SchemaSearchRequest implements ISchemaSearchRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied in the specified order. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Sorts the search results. Currently only sorting on the Names property is allowed. */
    sort?: SortInfo[] | undefined;
    /** Limits the number of the returned schemas. Defaults to 30. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional filter to limit the schemas. */
    filter?: FilterBase | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the SchemaSearchResult.
Warning! It severely affects performance. */
    debugMode!: boolean;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the schemas to the ones the user has the specified MetadataRights. */
    rightsFilter?: MetadataRight[] | undefined;

    constructor(data?: ISchemaSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            if (Array.isArray(data["rightsFilter"])) {
                this.rightsFilter = [] as any;
                for (let item of data["rightsFilter"])
                    this.rightsFilter!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        if (Array.isArray(this.rightsFilter)) {
            data["rightsFilter"] = [];
            for (let item of this.rightsFilter)
                data["rightsFilter"].push(item);
        }
        return data; 
    }
}

/** Request to search schemas */
export interface ISchemaSearchRequest {
    /** The string used to query the data. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied in the specified order. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Sorts the search results. Currently only sorting on the Names property is allowed. */
    sort?: ISortInfo[] | undefined;
    /** Limits the number of the returned schemas. Defaults to 30. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional filter to limit the schemas. */
    filter?: FilterBase | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the SchemaSearchResult.
Warning! It severely affects performance. */
    debugMode: boolean;
    /** When searching in multi language fields, limit the searchable fields to the ones corresponding to the specified languages.
If not specified, all metadata languages in the system are used. */
    searchLanguages?: string[] | undefined;
    /** Limits the schemas to the ones the user has the specified MetadataRights. */
    rightsFilter?: MetadataRight[] | undefined;
}

/** Contains compiled field information. */
export class IndexField implements IIndexField {
    id?: string | undefined;
    /** The field id. */
    fieldId?: string | undefined;
    /** The field's type name. */
    type?: string | undefined;
    /** Contains all index field name variants of the field. */
    indexFields?: { [key in keyof typeof Analyzer] : string; } | undefined;
    /** Contains all simple search field name variants of the field.
The amount of simple search fields can be equal or less to the amount of IndexFields, but never more. */
    simpleSearchFields?: { [key in keyof typeof Analyzer] : string; } | undefined;
    /** Contains the fields boost value. */
    boost!: number;
    /** Not to be returned for search query, but only used for mapping purposes */
    ignoreForSearch!: boolean;
    /** The path of the Nested document this property belongs to. If set to null, it means that there is no Nested document */
    nestedPath?: string | undefined;
    /** Path to the sorting information in the DataSortValuesField sort index. */
    sortField?: string | undefined;

    constructor(data?: IIndexField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.fieldId = data["fieldId"];
            this.type = data["type"];
            if (data["indexFields"]) {
                this.indexFields = {} as any;
                for (let key in data["indexFields"]) {
                    if (data["indexFields"].hasOwnProperty(key))
                        this.indexFields![key] = data["indexFields"][key];
                }
            }
            if (data["simpleSearchFields"]) {
                this.simpleSearchFields = {} as any;
                for (let key in data["simpleSearchFields"]) {
                    if (data["simpleSearchFields"].hasOwnProperty(key))
                        this.simpleSearchFields![key] = data["simpleSearchFields"][key];
                }
            }
            this.boost = data["boost"];
            this.ignoreForSearch = data["ignoreForSearch"];
            this.nestedPath = data["nestedPath"];
            this.sortField = data["sortField"];
        }
    }

    static fromJS(data: any): IndexField {
        data = typeof data === 'object' ? data : {};
        let result = new IndexField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fieldId"] = this.fieldId;
        data["type"] = this.type;
        if (this.indexFields) {
            data["indexFields"] = {};
            for (let key in this.indexFields) {
                if (this.indexFields.hasOwnProperty(key))
                    data["indexFields"][key] = this.indexFields[key];
            }
        }
        if (this.simpleSearchFields) {
            data["simpleSearchFields"] = {};
            for (let key in this.simpleSearchFields) {
                if (this.simpleSearchFields.hasOwnProperty(key))
                    data["simpleSearchFields"][key] = this.simpleSearchFields[key];
            }
        }
        data["boost"] = this.boost;
        data["ignoreForSearch"] = this.ignoreForSearch;
        data["nestedPath"] = this.nestedPath;
        data["sortField"] = this.sortField;
        return data; 
    }
}

/** Contains compiled field information. */
export interface IIndexField {
    id?: string | undefined;
    /** The field id. */
    fieldId?: string | undefined;
    /** The field's type name. */
    type?: string | undefined;
    /** Contains all index field name variants of the field. */
    indexFields?: { [key in keyof typeof Analyzer] : string; } | undefined;
    /** Contains all simple search field name variants of the field.
The amount of simple search fields can be equal or less to the amount of IndexFields, but never more. */
    simpleSearchFields?: { [key in keyof typeof Analyzer] : string; } | undefined;
    /** Contains the fields boost value. */
    boost: number;
    /** Not to be returned for search query, but only used for mapping purposes */
    ignoreForSearch: boolean;
    /** The path of the Nested document this property belongs to. If set to null, it means that there is no Nested document */
    nestedPath?: string | undefined;
    /** Path to the sorting information in the DataSortValuesField sort index. */
    sortField?: string | undefined;
}

/** Request to search indexed fields of specific schemas */
export class IndexFieldsSearchBySchemaIdsRequest implements IIndexFieldsSearchBySchemaIdsRequest {
    /** The IDs of the schemas for which the indexed fields should be returned. */
    schemaIds?: string[] | undefined;
    /** Controls how the search works which schemas should be considered in the search.
AllDescendantsFieldsOnRootSchema: All indexed fields from descendant schemas of root ones will be returned. Schemas that are not root schemas will be ignored.
SchemaAndParentFieldsOnly: Indexed fields of the requested schema and its parents will be returned. */
    searchMode!: IndexFieldsSearchMode;

    constructor(data?: IIndexFieldsSearchBySchemaIdsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            this.searchMode = data["searchMode"];
        }
    }

    static fromJS(data: any): IndexFieldsSearchBySchemaIdsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new IndexFieldsSearchBySchemaIdsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        data["searchMode"] = this.searchMode;
        return data; 
    }
}

/** Request to search indexed fields of specific schemas */
export interface IIndexFieldsSearchBySchemaIdsRequest {
    /** The IDs of the schemas for which the indexed fields should be returned. */
    schemaIds?: string[] | undefined;
    /** Controls how the search works which schemas should be considered in the search.
AllDescendantsFieldsOnRootSchema: All indexed fields from descendant schemas of root ones will be returned. Schemas that are not root schemas will be ignored.
SchemaAndParentFieldsOnly: Indexed fields of the requested schema and its parents will be returned. */
    searchMode: IndexFieldsSearchMode;
}

/** How the index field search works */
export enum IndexFieldsSearchMode {
    AllDescendantsFieldsOnRootSchema = "AllDescendantsFieldsOnRootSchema",
    SchemaAndParentFieldsOnly = "SchemaAndParentFieldsOnly",
}

/** Exists response */
export class SchemaExistsResponse implements ISchemaExistsResponse {
    /** It indicates if it exists. */
    exists!: boolean;

    constructor(data?: ISchemaExistsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exists = data["exists"];
        }
    }

    static fromJS(data: any): SchemaExistsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaExistsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exists"] = this.exists;
        return data; 
    }
}

/** Exists response */
export interface ISchemaExistsResponse {
    /** It indicates if it exists. */
    exists: boolean;
}

/** Response for a query if a field exists */
export class FieldExistsResponse implements IFieldExistsResponse {
    /** Indicates if a field with the specified ID currently exists. */
    exists!: boolean;
    /** Indicates if a field with the specified ID was previously used.
A field ID that was previously in use cannot be used again. */
    previouslyUsed!: boolean;
    /** If the field does already exist or has already existed, this will contain the ID
of the schema containing it. It case of parent-child schemas, a field ID
has to be unique across the schema hierarchy. */
    schemaId?: string | undefined;

    constructor(data?: IFieldExistsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exists = data["exists"];
            this.previouslyUsed = data["previouslyUsed"];
            this.schemaId = data["schemaId"];
        }
    }

    static fromJS(data: any): FieldExistsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FieldExistsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exists"] = this.exists;
        data["previouslyUsed"] = this.previouslyUsed;
        data["schemaId"] = this.schemaId;
        return data; 
    }
}

/** Response for a query if a field exists */
export interface IFieldExistsResponse {
    /** Indicates if a field with the specified ID currently exists. */
    exists: boolean;
    /** Indicates if a field with the specified ID was previously used.
A field ID that was previously in use cannot be used again. */
    previouslyUsed: boolean;
    /** If the field does already exist or has already existed, this will contain the ID
of the schema containing it. It case of parent-child schemas, a field ID
has to be unique across the schema hierarchy. */
    schemaId?: string | undefined;
}

export class SchemaOwnershipTransferRequest implements ISchemaOwnershipTransferRequest {
    /** The id of the user to whom the schema has to be transferred to. */
    transferUserId?: string | undefined;

    constructor(data?: ISchemaOwnershipTransferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transferUserId = data["transferUserId"];
        }
    }

    static fromJS(data: any): SchemaOwnershipTransferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaOwnershipTransferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferUserId"] = this.transferUserId;
        return data; 
    }
}

export interface ISchemaOwnershipTransferRequest {
    /** The id of the user to whom the schema has to be transferred to. */
    transferUserId?: string | undefined;
}

/** Result of a schema create operation */
export class SchemaCreateResult implements ISchemaCreateResult {
    /** The details of the created schema. */
    schema?: SchemaDetail | undefined;

    constructor(data?: ISchemaCreateResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.schema = data.schema && !(<any>data.schema).toJSON ? new SchemaDetail(data.schema) : <SchemaDetail>this.schema; 
        }
    }

    init(data?: any) {
        if (data) {
            this.schema = data["schema"] ? SchemaDetail.fromJS(data["schema"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SchemaCreateResult {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaCreateResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result of a schema create operation */
export interface ISchemaCreateResult {
    /** The details of the created schema. */
    schema?: ISchemaDetail | undefined;
}

/** Request to create a schema */
export class SchemaCreateRequest implements ISchemaCreateRequest {
    /** The schema ID. It can be a slug, but must be unique throughout the whole customer setup. */
    id!: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types?: SchemaType[] | undefined;
    /** Language specific schema names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: TranslatedStringDictionary | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns!: DisplayPattern[];
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: SortInfo[] | undefined;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll!: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;

    constructor(data?: ISchemaCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
            if (data.displayPatterns) {
                this.displayPatterns = [];
                for (let i = 0; i < data.displayPatterns.length; i++) {
                    let item = data.displayPatterns[i];
                    this.displayPatterns[i] = item && !(<any>item).toJSON ? new DisplayPattern(item) : <DisplayPattern>item;
                }
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
        if (!data) {
            this.displayPatterns = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.parentSchemaId = data["parentSchemaId"];
            if (Array.isArray(data["types"])) {
                this.types = [] as any;
                for (let item of data["types"])
                    this.types!.push(item);
            }
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            if (Array.isArray(data["displayPatterns"])) {
                this.displayPatterns = [] as any;
                for (let item of data["displayPatterns"])
                    this.displayPatterns!.push(DisplayPattern.fromJS(item));
            }
            if (Array.isArray(data["fields"])) {
                this.fields = [] as any;
                for (let item of data["fields"])
                    this.fields!.push(FieldBase.fromJS(item));
            }
            if (Array.isArray(data["fieldsOverwrite"])) {
                this.fieldsOverwrite = [] as any;
                for (let item of data["fieldsOverwrite"])
                    this.fieldsOverwrite!.push(FieldOverwriteBase.fromJS(item));
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.viewForAll = data["viewForAll"];
            if (Array.isArray(data["schemaPermissionSetIds"])) {
                this.schemaPermissionSetIds = [] as any;
                for (let item of data["schemaPermissionSetIds"])
                    this.schemaPermissionSetIds!.push(item);
            }
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (Array.isArray(data["referencedInContentSchemaIds"])) {
                this.referencedInContentSchemaIds = [] as any;
                for (let item of data["referencedInContentSchemaIds"])
                    this.referencedInContentSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentSchemaId"] = this.parentSchemaId;
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        if (Array.isArray(this.displayPatterns)) {
            data["displayPatterns"] = [];
            for (let item of this.displayPatterns)
                data["displayPatterns"].push(item.toJSON());
        }
        if (Array.isArray(this.fields)) {
            data["fields"] = [];
            for (let item of this.fields)
                data["fields"].push(item.toJSON());
        }
        if (Array.isArray(this.fieldsOverwrite)) {
            data["fieldsOverwrite"] = [];
            for (let item of this.fieldsOverwrite)
                data["fieldsOverwrite"].push(item.toJSON());
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["viewForAll"] = this.viewForAll;
        if (Array.isArray(this.schemaPermissionSetIds)) {
            data["schemaPermissionSetIds"] = [];
            for (let item of this.schemaPermissionSetIds)
                data["schemaPermissionSetIds"].push(item);
        }
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (Array.isArray(this.referencedInContentSchemaIds)) {
            data["referencedInContentSchemaIds"] = [];
            for (let item of this.referencedInContentSchemaIds)
                data["referencedInContentSchemaIds"].push(item);
        }
        return data; 
    }
}

/** Request to create a schema */
export interface ISchemaCreateRequest {
    /** The schema ID. It can be a slug, but must be unique throughout the whole customer setup. */
    id: string;
    /** The parent schema ID. */
    parentSchemaId?: string | undefined;
    /** List of schema types. Currently only one schema type can be assigned to this list, and it cannot be modified once the schema is created. */
    types?: SchemaType[] | undefined;
    /** Language specific schema names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: ITranslatedStringDictionary | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns: IDisplayPattern[];
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: ISortInfo[] | undefined;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;
}

/** Request to create multiple schemas */
export class SchemaCreateManyRequest implements ISchemaCreateManyRequest {
    /** The schemas to create. Cyclic dependencies between schemas are supported, if they
are all in the same request. */
    schemas!: SchemaCreateRequest[];

    constructor(data?: ISchemaCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.schemas) {
                this.schemas = [];
                for (let i = 0; i < data.schemas.length; i++) {
                    let item = data.schemas[i];
                    this.schemas[i] = item && !(<any>item).toJSON ? new SchemaCreateRequest(item) : <SchemaCreateRequest>item;
                }
            }
        }
        if (!data) {
            this.schemas = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["schemas"])) {
                this.schemas = [] as any;
                for (let item of data["schemas"])
                    this.schemas!.push(SchemaCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to create multiple schemas */
export interface ISchemaCreateManyRequest {
    /** The schemas to create. Cyclic dependencies between schemas are supported, if they
are all in the same request. */
    schemas: ISchemaCreateRequest[];
}

/** Result of a schema update operation */
export class SchemaUpdateResult implements ISchemaUpdateResult {
    /** The details of the updated schema. */
    schema?: SchemaDetail | undefined;

    constructor(data?: ISchemaUpdateResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.schema = data.schema && !(<any>data.schema).toJSON ? new SchemaDetail(data.schema) : <SchemaDetail>this.schema; 
        }
    }

    init(data?: any) {
        if (data) {
            this.schema = data["schema"] ? SchemaDetail.fromJS(data["schema"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SchemaUpdateResult {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaUpdateResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        return data; 
    }
}

/** Result of a schema update operation */
export interface ISchemaUpdateResult {
    /** The details of the updated schema. */
    schema?: ISchemaDetail | undefined;
}

/** Request to update an existing schema */
export class SchemaUpdateRequest implements ISchemaUpdateRequest {
    /** Language specific schema names. */
    names?: TranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: TranslatedStringDictionary | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns?: DisplayPattern[] | undefined;
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: SortInfo[] | undefined;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll!: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;

    constructor(data?: ISchemaUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
            if (data.displayPatterns) {
                this.displayPatterns = [];
                for (let i = 0; i < data.displayPatterns.length; i++) {
                    let item = data.displayPatterns[i];
                    this.displayPatterns[i] = item && !(<any>item).toJSON ? new DisplayPattern(item) : <DisplayPattern>item;
                }
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            if (Array.isArray(data["displayPatterns"])) {
                this.displayPatterns = [] as any;
                for (let item of data["displayPatterns"])
                    this.displayPatterns!.push(DisplayPattern.fromJS(item));
            }
            if (Array.isArray(data["fields"])) {
                this.fields = [] as any;
                for (let item of data["fields"])
                    this.fields!.push(FieldBase.fromJS(item));
            }
            if (Array.isArray(data["fieldsOverwrite"])) {
                this.fieldsOverwrite = [] as any;
                for (let item of data["fieldsOverwrite"])
                    this.fieldsOverwrite!.push(FieldOverwriteBase.fromJS(item));
            }
            if (Array.isArray(data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of data["aggregations"])
                    this.aggregations!.push(AggregatorBase.fromJS(item));
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.viewForAll = data["viewForAll"];
            if (Array.isArray(data["schemaPermissionSetIds"])) {
                this.schemaPermissionSetIds = [] as any;
                for (let item of data["schemaPermissionSetIds"])
                    this.schemaPermissionSetIds!.push(item);
            }
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (Array.isArray(data["referencedInContentSchemaIds"])) {
                this.referencedInContentSchemaIds = [] as any;
                for (let item of data["referencedInContentSchemaIds"])
                    this.referencedInContentSchemaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SchemaUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        if (Array.isArray(this.displayPatterns)) {
            data["displayPatterns"] = [];
            for (let item of this.displayPatterns)
                data["displayPatterns"].push(item.toJSON());
        }
        if (Array.isArray(this.fields)) {
            data["fields"] = [];
            for (let item of this.fields)
                data["fields"].push(item.toJSON());
        }
        if (Array.isArray(this.fieldsOverwrite)) {
            data["fieldsOverwrite"] = [];
            for (let item of this.fieldsOverwrite)
                data["fieldsOverwrite"].push(item.toJSON());
        }
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item.toJSON());
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["viewForAll"] = this.viewForAll;
        if (Array.isArray(this.schemaPermissionSetIds)) {
            data["schemaPermissionSetIds"] = [];
            for (let item of this.schemaPermissionSetIds)
                data["schemaPermissionSetIds"].push(item);
        }
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (Array.isArray(this.referencedInContentSchemaIds)) {
            data["referencedInContentSchemaIds"] = [];
            for (let item of this.referencedInContentSchemaIds)
                data["referencedInContentSchemaIds"].push(item);
        }
        return data; 
    }
}

/** Request to update an existing schema */
export interface ISchemaUpdateRequest {
    /** Language specific schema names. */
    names?: ITranslatedStringDictionary | undefined;
    /** Language specific schema descriptions. */
    descriptions?: ITranslatedStringDictionary | undefined;
    /** Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items. */
    displayPatterns?: IDisplayPattern[] | undefined;
    /** The schema fields. */
    fields?: FieldBase[] | undefined;
    /** A list of schema fields overwrite information. It is used to overwrite the field configuration coming from the parent schema.
Only a subset of properties of a FieldSingleTagbox and FieldMultiTagbox can be be overwritten. All other properties and fields cannot. */
    fieldsOverwrite?: FieldOverwriteBase[] | undefined;
    /** An optional list of aggregations to show grouped list item documents. When aggregations are defined for a List,
the UI uses such information to show the available filters and grouped results. */
    aggregations?: AggregatorBase[] | undefined;
    /** Sorts content documents and/or list items. In order for the sorting to work properly, the Sortable property of the related field
must be set to true. Multiple sorting is supported: they are applied in the specified order. */
    sort?: ISortInfo[] | undefined;
    /** Defines a schema as viewable by everyone. Everyone with ManageSchema user permission is able to see the schema. */
    viewForAll: boolean;
    /** An optional list of schema permission set IDs which control schema permissions. */
    schemaPermissionSetIds?: string[] | undefined;
    /** An optional list of schemas' IDs with type layer. For a Content schema it stores the layers that can be assigned to a content. */
    layerSchemaIds?: string[] | undefined;
    /** If the schema if of type Layer, the list contains the schemas with type Content
that reference the layer. */
    referencedInContentSchemaIds?: string[] | undefined;
}

/** Request to update multiple schemas */
export class SchemaUpdateManyRequest implements ISchemaUpdateManyRequest {
    /** The schemas to update. */
    schemas!: SchemaUpdateItem[];

    constructor(data?: ISchemaUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.schemas = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["schemas"])) {
                this.schemas = [] as any;
                for (let item of data["schemas"])
                    this.schemas!.push(SchemaUpdateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemas)) {
            data["schemas"] = [];
            for (let item of this.schemas)
                data["schemas"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update multiple schemas */
export interface ISchemaUpdateManyRequest {
    /** The schemas to update. */
    schemas: SchemaUpdateItem[];
}

/** Item to update a schema */
export class SchemaUpdateItem extends SchemaUpdateRequest implements ISchemaUpdateItem {
    /** Id of the schema to update */
    id!: string;

    constructor(data?: ISchemaUpdateItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SchemaUpdateItem {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaUpdateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

/** Item to update a schema */
export interface ISchemaUpdateItem extends ISchemaUpdateRequest {
    /** Id of the schema to update */
    id: string;
}

/** Result of a schema delete operation */
export class SchemaDeleteResult implements ISchemaDeleteResult {

    constructor(data?: ISchemaDeleteResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): SchemaDeleteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaDeleteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

/** Result of a schema delete operation */
export interface ISchemaDeleteResult {
}

export class SchemaOwnershipTransferManyRequest implements ISchemaOwnershipTransferManyRequest {
    /** The schema ids. */
    schemaIds?: string[] | undefined;
    /** The id of user to whom the schemas have to be transferred to. */
    transferUserId?: string | undefined;

    constructor(data?: ISchemaOwnershipTransferManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["schemaIds"])) {
                this.schemaIds = [] as any;
                for (let item of data["schemaIds"])
                    this.schemaIds!.push(item);
            }
            this.transferUserId = data["transferUserId"];
        }
    }

    static fromJS(data: any): SchemaOwnershipTransferManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaOwnershipTransferManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schemaIds)) {
            data["schemaIds"] = [];
            for (let item of this.schemaIds)
                data["schemaIds"].push(item);
        }
        data["transferUserId"] = this.transferUserId;
        return data; 
    }
}

export interface ISchemaOwnershipTransferManyRequest {
    /** The schema ids. */
    schemaIds?: string[] | undefined;
    /** The id of user to whom the schemas have to be transferred to. */
    transferUserId?: string | undefined;
}

export abstract class PermissionSetDetailOfMetadataRight implements IPermissionSetDetailOfMetadataRight {
    id!: string;
    names!: TranslatedStringDictionary;
    userRolesRights?: PermissionUserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: PermissionUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive!: boolean;
    ownerTokenId!: string;
    audit?: UserAuditDetail | undefined;

    constructor(data?: IPermissionSetDetailOfMetadataRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new PermissionUserRoleRightsOfMetadataRight(item) : <PermissionUserRoleRightsOfMetadataRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new PermissionUserRoleRightsOfPermissionSetRight(item) : <PermissionUserRoleRightsOfPermissionSetRight>item;
                }
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(PermissionUserRoleRightsOfMetadataRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(PermissionUserRoleRightsOfPermissionSetRight.fromJS(item));
            }
            this.exclusive = data["exclusive"];
            this.ownerTokenId = data["ownerTokenId"];
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PermissionSetDetailOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetDetailOfMetadataRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        data["exclusive"] = this.exclusive;
        data["ownerTokenId"] = this.ownerTokenId;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPermissionSetDetailOfMetadataRight {
    id: string;
    names: ITranslatedStringDictionary;
    userRolesRights?: IPermissionUserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: IPermissionUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive: boolean;
    ownerTokenId: string;
    audit?: IUserAuditDetail | undefined;
}

/** Detail of a schema permission set */
export class SchemaPermissionSetDetail extends PermissionSetDetailOfMetadataRight implements ISchemaPermissionSetDetail {

    constructor(data?: ISchemaPermissionSetDetail) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaPermissionSetDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Detail of a schema permission set */
export interface ISchemaPermissionSetDetail extends IPermissionSetDetailOfMetadataRight {
}

export class PermissionUserRoleRightsOfMetadataRight implements IPermissionUserRoleRightsOfMetadataRight {
    userRoleId?: string | undefined;
    names?: TranslatedStringDictionary | undefined;
    rights?: MetadataRight[] | undefined;

    constructor(data?: IPermissionUserRoleRightsOfMetadataRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): PermissionUserRoleRightsOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionUserRoleRightsOfMetadataRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IPermissionUserRoleRightsOfMetadataRight {
    userRoleId?: string | undefined;
    names?: ITranslatedStringDictionary | undefined;
    rights?: MetadataRight[] | undefined;
}

export abstract class PermissionSetCreateRequestOfMetadataRight implements IPermissionSetCreateRequestOfMetadataRight {
    names!: TranslatedStringDictionary;
    userRolesRights?: UserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: UserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive!: boolean;
    requestId?: string | undefined;

    constructor(data?: IPermissionSetCreateRequestOfMetadataRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfMetadataRight(item) : <UserRoleRightsOfMetadataRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfPermissionSetRight(item) : <UserRoleRightsOfPermissionSetRight>item;
                }
            }
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(UserRoleRightsOfMetadataRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(UserRoleRightsOfPermissionSetRight.fromJS(item));
            }
            this.exclusive = data["exclusive"];
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): PermissionSetCreateRequestOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetCreateRequestOfMetadataRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        data["exclusive"] = this.exclusive;
        data["requestId"] = this.requestId;
        return data; 
    }
}

export interface IPermissionSetCreateRequestOfMetadataRight {
    names: ITranslatedStringDictionary;
    userRolesRights?: IUserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: IUserRoleRightsOfPermissionSetRight[] | undefined;
    exclusive: boolean;
    requestId?: string | undefined;
}

export class SchemaPermissionSetCreateRequest extends PermissionSetCreateRequestOfMetadataRight implements ISchemaPermissionSetCreateRequest {

    constructor(data?: ISchemaPermissionSetCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaPermissionSetCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISchemaPermissionSetCreateRequest extends IPermissionSetCreateRequestOfMetadataRight {
}

export class UserRoleRightsOfMetadataRight implements IUserRoleRightsOfMetadataRight {
    userRoleId?: string | undefined;
    rights?: MetadataRight[] | undefined;

    constructor(data?: IUserRoleRightsOfMetadataRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userRoleId = data["userRoleId"];
            if (Array.isArray(data["rights"])) {
                this.rights = [] as any;
                for (let item of data["rights"])
                    this.rights!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRoleRightsOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleRightsOfMetadataRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleId"] = this.userRoleId;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item);
        }
        return data; 
    }
}

export interface IUserRoleRightsOfMetadataRight {
    userRoleId?: string | undefined;
    rights?: MetadataRight[] | undefined;
}

export abstract class PermissionSetUpdateRequestOfMetadataRight implements IPermissionSetUpdateRequestOfMetadataRight {
    names!: TranslatedStringDictionary;
    userRolesRights?: UserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: UserRoleRightsOfPermissionSetRight[] | undefined;

    constructor(data?: IPermissionSetUpdateRequestOfMetadataRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            if (data.userRolesRights) {
                this.userRolesRights = [];
                for (let i = 0; i < data.userRolesRights.length; i++) {
                    let item = data.userRolesRights[i];
                    this.userRolesRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfMetadataRight(item) : <UserRoleRightsOfMetadataRight>item;
                }
            }
            if (data.userRolesPermissionSetRights) {
                this.userRolesPermissionSetRights = [];
                for (let i = 0; i < data.userRolesPermissionSetRights.length; i++) {
                    let item = data.userRolesPermissionSetRights[i];
                    this.userRolesPermissionSetRights[i] = item && !(<any>item).toJSON ? new UserRoleRightsOfPermissionSetRight(item) : <UserRoleRightsOfPermissionSetRight>item;
                }
            }
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRolesRights"])) {
                this.userRolesRights = [] as any;
                for (let item of data["userRolesRights"])
                    this.userRolesRights!.push(UserRoleRightsOfMetadataRight.fromJS(item));
            }
            if (Array.isArray(data["userRolesPermissionSetRights"])) {
                this.userRolesPermissionSetRights = [] as any;
                for (let item of data["userRolesPermissionSetRights"])
                    this.userRolesPermissionSetRights!.push(UserRoleRightsOfPermissionSetRight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionSetUpdateRequestOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetUpdateRequestOfMetadataRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRolesRights)) {
            data["userRolesRights"] = [];
            for (let item of this.userRolesRights)
                data["userRolesRights"].push(item.toJSON());
        }
        if (Array.isArray(this.userRolesPermissionSetRights)) {
            data["userRolesPermissionSetRights"] = [];
            for (let item of this.userRolesPermissionSetRights)
                data["userRolesPermissionSetRights"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPermissionSetUpdateRequestOfMetadataRight {
    names: ITranslatedStringDictionary;
    userRolesRights?: IUserRoleRightsOfMetadataRight[] | undefined;
    userRolesPermissionSetRights?: IUserRoleRightsOfPermissionSetRight[] | undefined;
}

/** Request to update a schema permission set */
export class SchemaPermissionSetUpdateRequest extends PermissionSetUpdateRequestOfMetadataRight implements ISchemaPermissionSetUpdateRequest {

    constructor(data?: ISchemaPermissionSetUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaPermissionSetUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Request to update a schema permission set */
export interface ISchemaPermissionSetUpdateRequest extends IPermissionSetUpdateRequestOfMetadataRight {
}

export class SchemaPermissionSetCreateManyRequest implements ISchemaPermissionSetCreateManyRequest {
    items?: SchemaPermissionSetCreateRequest[] | undefined;

    constructor(data?: ISchemaPermissionSetCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SchemaPermissionSetCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaPermissionSetCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISchemaPermissionSetCreateManyRequest {
    items?: SchemaPermissionSetCreateRequest[] | undefined;
}

/** Request to update multiple schema permissions sets */
export class SchemaPermissionSetUpdateManyRequest implements ISchemaPermissionSetUpdateManyRequest {
    /** Schema permission sets update requests. */
    items?: SchemaPermissionSetUpdateRequestItem[] | undefined;

    constructor(data?: ISchemaPermissionSetUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SchemaPermissionSetUpdateRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchemaPermissionSetUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to update multiple schema permissions sets */
export interface ISchemaPermissionSetUpdateManyRequest {
    /** Schema permission sets update requests. */
    items?: SchemaPermissionSetUpdateRequestItem[] | undefined;
}

export abstract class PermissionSetUpdateRequestItemOfMetadataRight extends PermissionSetUpdateRequestOfMetadataRight implements IPermissionSetUpdateRequestItemOfMetadataRight {
    id!: string;

    constructor(data?: IPermissionSetUpdateRequestItemOfMetadataRight) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PermissionSetUpdateRequestItemOfMetadataRight {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PermissionSetUpdateRequestItemOfMetadataRight' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IPermissionSetUpdateRequestItemOfMetadataRight extends IPermissionSetUpdateRequestOfMetadataRight {
    id: string;
}

/** Request to update a schema permission set */
export class SchemaPermissionSetUpdateRequestItem extends PermissionSetUpdateRequestItemOfMetadataRight implements ISchemaPermissionSetUpdateRequestItem {

    constructor(data?: ISchemaPermissionSetUpdateRequestItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): SchemaPermissionSetUpdateRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaPermissionSetUpdateRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Request to update a schema permission set */
export interface ISchemaPermissionSetUpdateRequestItem extends IPermissionSetUpdateRequestItemOfMetadataRight {
}

/** Represents a transfer. */
export class Transfer implements ITransfer {
    /** ID of transfer. */
    id!: string;
    /** Name of transfer. */
    name!: string;
    /** State of transfer. */
    state!: TransferState;
    /** Type of transfer. */
    transferType!: TransferType;
    /** Associated business process ID. */
    businessProcessId?: string | undefined;
    /** Number of files in transfer. */
    fileTransferCount!: number;
    /** ID of collection created from transfer. */
    collectionId?: string | undefined;

    constructor(data?: ITransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.state = data["state"];
            this.transferType = data["transferType"];
            this.businessProcessId = data["businessProcessId"];
            this.fileTransferCount = data["fileTransferCount"];
            this.collectionId = data["collectionId"];
        }
    }

    static fromJS(data: any): Transfer {
        data = typeof data === 'object' ? data : {};
        let result = new Transfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["state"] = this.state;
        data["transferType"] = this.transferType;
        data["businessProcessId"] = this.businessProcessId;
        data["fileTransferCount"] = this.fileTransferCount;
        data["collectionId"] = this.collectionId;
        return data; 
    }
}

/** Represents a transfer. */
export interface ITransfer {
    /** ID of transfer. */
    id: string;
    /** Name of transfer. */
    name: string;
    /** State of transfer. */
    state: TransferState;
    /** Type of transfer. */
    transferType: TransferType;
    /** Associated business process ID. */
    businessProcessId?: string | undefined;
    /** Number of files in transfer. */
    fileTransferCount: number;
    /** ID of collection created from transfer. */
    collectionId?: string | undefined;
}

/** Request to import schemas and list items */
export class SchemaImportRequest implements ISchemaImportRequest {
    /** ID of the file transfer identifying the file previously uploaded. */
    fileTransferId!: string;
    /** Allow creating list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies!: boolean;
    /** Import the list items belonging to the schema. */
    importListItems!: boolean;

    constructor(data?: ISchemaImportRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileTransferId = data["fileTransferId"];
            this.allowMissingDependencies = data["allowMissingDependencies"];
            this.importListItems = data["importListItems"];
        }
    }

    static fromJS(data: any): SchemaImportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SchemaImportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileTransferId"] = this.fileTransferId;
        data["allowMissingDependencies"] = this.allowMissingDependencies;
        data["importListItems"] = this.importListItems;
        return data; 
    }
}

/** Request to import schemas and list items */
export interface ISchemaImportRequest {
    /** ID of the file transfer identifying the file previously uploaded. */
    fileTransferId: string;
    /** Allow creating list items that refer to list items or contents that don't exist in the system. */
    allowMissingDependencies: boolean;
    /** Import the list items belonging to the schema. */
    importListItems: boolean;
}

/** Share detail */
export class ShareDetail implements IShareDetail {
    /** Share ID. */
    id!: string;
    /** Name of share. */
    name!: string;
    /** Description of share entered by user. */
    description?: string | undefined;
    /** Creator of share. */
    creator!: ShareUser;
    /** Audit information. */
    audit!: UserAudit;
    /** Detailed information about contents in the share. */
    contentSelections!: ShareContentDetail[];
    /** List of shared layers. */
    layerSchemaIds?: string[] | undefined;
    /** Detail of share. */
    data?: ShareDataBase | undefined;
    /** Date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Info if share is already expired. */
    expired!: boolean;
    /** Defined access for contents in share. */
    outputAccess!: OutputAccess;
    /** Type of share. */
    shareType!: ShareType;

    constructor(data?: IShareDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.creator = data.creator && !(<any>data.creator).toJSON ? new ShareUser(data.creator) : <ShareUser>this.creator; 
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
            if (data.contentSelections) {
                this.contentSelections = [];
                for (let i = 0; i < data.contentSelections.length; i++) {
                    let item = data.contentSelections[i];
                    this.contentSelections[i] = item && !(<any>item).toJSON ? new ShareContentDetail(item) : <ShareContentDetail>item;
                }
            }
        }
        if (!data) {
            this.creator = new ShareUser();
            this.audit = new UserAudit();
            this.contentSelections = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.creator = data["creator"] ? ShareUser.fromJS(data["creator"]) : new ShareUser();
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : new UserAudit();
            if (Array.isArray(data["contentSelections"])) {
                this.contentSelections = [] as any;
                for (let item of data["contentSelections"])
                    this.contentSelections!.push(ShareContentDetail.fromJS(item));
            }
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.data = data["data"] ? ShareDataBase.fromJS(data["data"]) : <any>undefined;
            this.expirationDate = data["expirationDate"] ? new Date(data["expirationDate"].toString()) : <any>undefined;
            this.expired = data["expired"];
            this.outputAccess = data["outputAccess"];
            this.shareType = data["shareType"];
        }
    }

    static fromJS(data: any): ShareDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ShareDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        if (Array.isArray(this.contentSelections)) {
            data["contentSelections"] = [];
            for (let item of this.contentSelections)
                data["contentSelections"].push(item.toJSON());
        }
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["expired"] = this.expired;
        data["outputAccess"] = this.outputAccess;
        data["shareType"] = this.shareType;
        return data; 
    }
}

/** Share detail */
export interface IShareDetail {
    /** Share ID. */
    id: string;
    /** Name of share. */
    name: string;
    /** Description of share entered by user. */
    description?: string | undefined;
    /** Creator of share. */
    creator: IShareUser;
    /** Audit information. */
    audit: IUserAudit;
    /** Detailed information about contents in the share. */
    contentSelections: IShareContentDetail[];
    /** List of shared layers. */
    layerSchemaIds?: string[] | undefined;
    /** Detail of share. */
    data?: ShareDataBase | undefined;
    /** Date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Info if share is already expired. */
    expired: boolean;
    /** Defined access for contents in share. */
    outputAccess: OutputAccess;
    /** Type of share. */
    shareType: ShareType;
}

/** Reduced set of user information used for shares */
export class ShareUser implements IShareUser {
    /** Name of user */
    displayName!: string;
    /** MD5 hash of email address. Can be used to display gravatar image */
    emailHash!: string;

    constructor(data?: IShareUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.emailHash = data["emailHash"];
        }
    }

    static fromJS(data: any): ShareUser {
        data = typeof data === 'object' ? data : {};
        let result = new ShareUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["emailHash"] = this.emailHash;
        return data; 
    }
}

/** Reduced set of user information used for shares */
export interface IShareUser {
    /** Name of user */
    displayName: string;
    /** MD5 hash of email address. Can be used to display gravatar image */
    emailHash: string;
}

/** Detail of shared content */
export class ShareContentDetail implements IShareContentDetail {
    /** The id of the schema with schema type content. */
    contentSchemaId!: string;
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data. It's an object of dynamic metadata whose structure is defined in the Content schema specified
by the ContentSchemaId property. */
    content!: any;
    /** The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** Content ID. */
    id!: string;
    /** List of shared outputs for this content. */
    outputs!: ShareOutputBase[];
    /** The type of content */
    contentType!: ContentType;
    /** Contains language specific display values, rendered according to the content schema's display pattern configuration. */
    displayValues!: DisplayValueDictionary;
    /** Contains an URL that can be used to retrieve the icon corresponding to the file type. */
    iconUrl?: string | undefined;

    constructor(data?: IShareContentDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.displayValues = data.displayValues && !(<any>data.displayValues).toJSON ? new DisplayValueDictionary(data.displayValues) : <DisplayValueDictionary>this.displayValues; 
        }
        if (!data) {
            this.outputs = [];
            this.displayValues = new DisplayValueDictionary();
        }
    }

    init(data?: any) {
        if (data) {
            this.contentSchemaId = data["contentSchemaId"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.content = data["content"];
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            this.id = data["id"];
            if (Array.isArray(data["outputs"])) {
                this.outputs = [] as any;
                for (let item of data["outputs"])
                    this.outputs!.push(ShareOutputBase.fromJS(item));
            }
            this.contentType = data["contentType"];
            this.displayValues = data["displayValues"] ? DisplayValueDictionary.fromJS(data["displayValues"]) : new DisplayValueDictionary();
            this.iconUrl = data["iconUrl"];
        }
    }

    static fromJS(data: any): ShareContentDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ShareContentDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentSchemaId"] = this.contentSchemaId;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["content"] = this.content;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        data["id"] = this.id;
        if (Array.isArray(this.outputs)) {
            data["outputs"] = [];
            for (let item of this.outputs)
                data["outputs"].push(item.toJSON());
        }
        data["contentType"] = this.contentType;
        data["displayValues"] = this.displayValues ? this.displayValues.toJSON() : <any>undefined;
        data["iconUrl"] = this.iconUrl;
        return data; 
    }
}

/** Detail of shared content */
export interface IShareContentDetail {
    /** The id of the schema with schema type content. */
    contentSchemaId: string;
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The content data. It's an object of dynamic metadata whose structure is defined in the Content schema specified
by the ContentSchemaId property. */
    content: any;
    /** The metadata belonging to the layers of the content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** Content ID. */
    id: string;
    /** List of shared outputs for this content. */
    outputs: ShareOutputBase[];
    /** The type of content */
    contentType: ContentType;
    /** Contains language specific display values, rendered according to the content schema's display pattern configuration. */
    displayValues: IDisplayValueDictionary;
    /** Contains an URL that can be used to retrieve the icon corresponding to the file type. */
    iconUrl?: string | undefined;
}

/** Base of shared output */
export abstract class ShareOutputBase implements IShareOutputBase {
    /** Content ID. */
    contentId!: string;
    /** Output format ID. */
    outputFormatId!: string;
    /** Url to directly view output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token */
    viewUrl?: string | undefined;
    /** Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token */
    downloadUrl?: string | undefined;
    /** Output details. */
    detail?: OutputDataBase | undefined;
    /** Whether this Output belongs to a dynamic OutputFormat */
    dynamicRendering!: boolean;

    protected _discriminator: string;

    constructor(data?: IShareOutputBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ShareOutputBase";
    }

    init(data?: any) {
        if (data) {
            this.contentId = data["contentId"];
            this.outputFormatId = data["outputFormatId"];
            this.viewUrl = data["viewUrl"];
            this.downloadUrl = data["downloadUrl"];
            this.detail = data["detail"] ? OutputDataBase.fromJS(data["detail"]) : <any>undefined;
            this.dynamicRendering = data["dynamicRendering"];
        }
    }

    static fromJS(data: any): ShareOutputBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ShareOutputBasic") {
            let result = new ShareOutputBasic();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareOutputEmbed") {
            let result = new ShareOutputEmbed();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ShareOutputBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["contentId"] = this.contentId;
        data["outputFormatId"] = this.outputFormatId;
        data["viewUrl"] = this.viewUrl;
        data["downloadUrl"] = this.downloadUrl;
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        data["dynamicRendering"] = this.dynamicRendering;
        return data; 
    }
}

/** Base of shared output */
export interface IShareOutputBase {
    /** Content ID. */
    contentId: string;
    /** Output format ID. */
    outputFormatId: string;
    /** Url to directly view output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token */
    viewUrl?: string | undefined;
    /** Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token */
    downloadUrl?: string | undefined;
    /** Output details. */
    detail?: OutputDataBase | undefined;
    /** Whether this Output belongs to a dynamic OutputFormat */
    dynamicRendering: boolean;
}

/** Shared output for basic share */
export class ShareOutputBasic extends ShareOutputBase implements IShareOutputBasic {

    constructor(data?: IShareOutputBasic) {
        super(data);
        this._discriminator = "ShareOutputBasic";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ShareOutputBasic {
        data = typeof data === 'object' ? data : {};
        let result = new ShareOutputBasic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Shared output for basic share */
export interface IShareOutputBasic extends IShareOutputBase {
}

/** Shared output for embed share */
export class ShareOutputEmbed extends ShareOutputBase implements IShareOutputEmbed {
    /** Share token for the shared output. */
    token?: string | undefined;

    constructor(data?: IShareOutputEmbed) {
        super(data);
        this._discriminator = "ShareOutputEmbed";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): ShareOutputEmbed {
        data = typeof data === 'object' ? data : {};
        let result = new ShareOutputEmbed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        super.toJSON(data);
        return data; 
    }
}

/** Shared output for embed share */
export interface IShareOutputEmbed extends IShareOutputBase {
    /** Share token for the shared output. */
    token?: string | undefined;
}

/** Base of share data */
export abstract class ShareDataBase implements IShareDataBase {
    /** The URL to access the share. */
    url!: string;

    protected _discriminator: string;

    constructor(data?: IShareDataBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "ShareDataBase";
    }

    init(data?: any) {
        if (data) {
            this.url = data["url"];
        }
    }

    static fromJS(data: any): ShareDataBase {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ShareDataEmbed") {
            let result = new ShareDataEmbed();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareDataBasic") {
            let result = new ShareDataBasic();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ShareDataBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["url"] = this.url;
        return data; 
    }
}

/** Base of share data */
export interface IShareDataBase {
    /** The URL to access the share. */
    url: string;
}

/** Embed share data */
export class ShareDataEmbed extends ShareDataBase implements IShareDataEmbed {
    /** Token for the embed share. */
    token!: string;

    constructor(data?: IShareDataEmbed) {
        super(data);
        this._discriminator = "ShareDataEmbed";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"];
        }
    }

    static fromJS(data: any): ShareDataEmbed {
        data = typeof data === 'object' ? data : {};
        let result = new ShareDataEmbed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        super.toJSON(data);
        return data; 
    }
}

/** Embed share data */
export interface IShareDataEmbed extends IShareDataBase {
    /** Token for the embed share. */
    token: string;
}

/** Basic share data */
export class ShareDataBasic extends ShareDataBase implements IShareDataBasic {
    /** List of recipients added using email address */
    mailRecipients!: MailRecipient[];
    /** List of recipients that exist in Picturepark. */
    internalRecipients!: InternalRecipient[];
    /** Language of share. */
    languageCode?: string | undefined;

    constructor(data?: IShareDataBasic) {
        super(data);
        if (data) {
            if (data.mailRecipients) {
                this.mailRecipients = [];
                for (let i = 0; i < data.mailRecipients.length; i++) {
                    let item = data.mailRecipients[i];
                    this.mailRecipients[i] = item && !(<any>item).toJSON ? new MailRecipient(item) : <MailRecipient>item;
                }
            }
            if (data.internalRecipients) {
                this.internalRecipients = [];
                for (let i = 0; i < data.internalRecipients.length; i++) {
                    let item = data.internalRecipients[i];
                    this.internalRecipients[i] = item && !(<any>item).toJSON ? new InternalRecipient(item) : <InternalRecipient>item;
                }
            }
        }
        if (!data) {
            this.mailRecipients = [];
            this.internalRecipients = [];
        }
        this._discriminator = "ShareDataBasic";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["mailRecipients"])) {
                this.mailRecipients = [] as any;
                for (let item of data["mailRecipients"])
                    this.mailRecipients!.push(MailRecipient.fromJS(item));
            }
            if (Array.isArray(data["internalRecipients"])) {
                this.internalRecipients = [] as any;
                for (let item of data["internalRecipients"])
                    this.internalRecipients!.push(InternalRecipient.fromJS(item));
            }
            this.languageCode = data["languageCode"];
        }
    }

    static fromJS(data: any): ShareDataBasic {
        data = typeof data === 'object' ? data : {};
        let result = new ShareDataBasic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mailRecipients)) {
            data["mailRecipients"] = [];
            for (let item of this.mailRecipients)
                data["mailRecipients"].push(item.toJSON());
        }
        if (Array.isArray(this.internalRecipients)) {
            data["internalRecipients"] = [];
            for (let item of this.internalRecipients)
                data["internalRecipients"].push(item.toJSON());
        }
        data["languageCode"] = this.languageCode;
        super.toJSON(data);
        return data; 
    }
}

/** Basic share data */
export interface IShareDataBasic extends IShareDataBase {
    /** List of recipients added using email address */
    mailRecipients: IMailRecipient[];
    /** List of recipients that exist in Picturepark. */
    internalRecipients: IInternalRecipient[];
    /** Language of share. */
    languageCode?: string | undefined;
}

/** Share mail recipient */
export class MailRecipient implements IMailRecipient {
    /** User information including email. */
    userEmail!: UserEmail;
    /** Recipient specific token. */
    token?: string | undefined;
    /** URL to access the share for this recipient. */
    url?: string | undefined;

    constructor(data?: IMailRecipient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.userEmail = data.userEmail && !(<any>data.userEmail).toJSON ? new UserEmail(data.userEmail) : <UserEmail>this.userEmail; 
        }
        if (!data) {
            this.userEmail = new UserEmail();
        }
    }

    init(data?: any) {
        if (data) {
            this.userEmail = data["userEmail"] ? UserEmail.fromJS(data["userEmail"]) : new UserEmail();
            this.token = data["token"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): MailRecipient {
        data = typeof data === 'object' ? data : {};
        let result = new MailRecipient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userEmail"] = this.userEmail ? this.userEmail.toJSON() : <any>undefined;
        data["token"] = this.token;
        data["url"] = this.url;
        return data; 
    }
}

/** Share mail recipient */
export interface IMailRecipient {
    /** User information including email. */
    userEmail: IUserEmail;
    /** Recipient specific token. */
    token?: string | undefined;
    /** URL to access the share for this recipient. */
    url?: string | undefined;
}

export class UserEmail implements IUserEmail {
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Email address */
    emailAddress!: string;

    constructor(data?: IUserEmail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): UserEmail {
        data = typeof data === 'object' ? data : {};
        let result = new UserEmail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface IUserEmail {
    /** First name. */
    firstName?: string | undefined;
    /** Last name. */
    lastName?: string | undefined;
    /** Email address */
    emailAddress: string;
}

/** Internal share recipient */
export class InternalRecipient implements IInternalRecipient {
    /** User information of recipient. */
    recipient!: User;
    /** Recipient specific token. */
    token?: string | undefined;
    /** URL to access the share for this recipient. */
    url?: string | undefined;

    constructor(data?: IInternalRecipient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.recipient = data.recipient && !(<any>data.recipient).toJSON ? new User(data.recipient) : <User>this.recipient; 
        }
        if (!data) {
            this.recipient = new User();
        }
    }

    init(data?: any) {
        if (data) {
            this.recipient = data["recipient"] ? User.fromJS(data["recipient"]) : new User();
            this.token = data["token"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): InternalRecipient {
        data = typeof data === 'object' ? data : {};
        let result = new InternalRecipient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipient"] = this.recipient ? this.recipient.toJSON() : <any>undefined;
        data["token"] = this.token;
        data["url"] = this.url;
        return data; 
    }
}

/** Internal share recipient */
export interface IInternalRecipient {
    /** User information of recipient. */
    recipient: IUser;
    /** Recipient specific token. */
    token?: string | undefined;
    /** URL to access the share for this recipient. */
    url?: string | undefined;
}

export enum OutputAccess {
    Full = "Full",
    Preview = "Preview",
    None = "None",
}

export class BaseResultOfShare implements IBaseResultOfShare {
    totalResults!: number;
    results!: Share[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfShare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new Share(item) : <Share>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(Share.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfShare {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfShare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfShare {
    totalResults: number;
    results: IShare[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfShare extends BaseResultOfShare implements ISearchBehaviorBaseResultOfShare {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfShare) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfShare {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfShare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfShare extends IBaseResultOfShare {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

export class SearchBehaviorWithAggregationBaseResultOfShare extends SearchBehaviorBaseResultOfShare implements ISearchBehaviorWithAggregationBaseResultOfShare {
    aggregationResults?: AggregationResult[] | undefined;

    constructor(data?: ISearchBehaviorWithAggregationBaseResultOfShare) {
        super(data);
        if (data) {
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchBehaviorWithAggregationBaseResultOfShare {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorWithAggregationBaseResultOfShare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorWithAggregationBaseResultOfShare extends ISearchBehaviorBaseResultOfShare {
    aggregationResults?: IAggregationResult[] | undefined;
}

/** Result for share search operation */
export class ShareSearchResult extends SearchBehaviorWithAggregationBaseResultOfShare implements IShareSearchResult {

    constructor(data?: IShareSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ShareSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ShareSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result for share search operation */
export interface IShareSearchResult extends ISearchBehaviorWithAggregationBaseResultOfShare {
}

/** Share */
export class Share implements IShare {
    /** Share ID. */
    id!: string;
    /** Name of share. */
    name?: string | undefined;
    /** List of shared content IDs. */
    contentIds!: string[];
    /** Audit information. */
    audit!: UserAudit;
    /** Date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Type of share. */
    shareType!: ShareType;
    /** Share is readonly if the current user is not the creator but only the recipient. */
    isReadOnly!: boolean;

    constructor(data?: IShare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
        if (!data) {
            this.contentIds = [];
            this.audit = new UserAudit();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            if (Array.isArray(data["contentIds"])) {
                this.contentIds = [] as any;
                for (let item of data["contentIds"])
                    this.contentIds!.push(item);
            }
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : new UserAudit();
            this.expirationDate = data["expirationDate"] ? new Date(data["expirationDate"].toString()) : <any>undefined;
            this.shareType = data["shareType"];
            this.isReadOnly = data["isReadOnly"];
        }
    }

    static fromJS(data: any): Share {
        data = typeof data === 'object' ? data : {};
        let result = new Share();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.contentIds)) {
            data["contentIds"] = [];
            for (let item of this.contentIds)
                data["contentIds"].push(item);
        }
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["shareType"] = this.shareType;
        data["isReadOnly"] = this.isReadOnly;
        return data; 
    }
}

/** Share */
export interface IShare {
    /** Share ID. */
    id: string;
    /** Name of share. */
    name?: string | undefined;
    /** List of shared content IDs. */
    contentIds: string[];
    /** Audit information. */
    audit: IUserAudit;
    /** Date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Type of share. */
    shareType: ShareType;
    /** Share is readonly if the current user is not the creator but only the recipient. */
    isReadOnly: boolean;
}

/** Request to aggregate shares based on the specified aggregators */
export abstract class ShareSearchAndAggregationBaseRequest implements IShareSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;

    constructor(data?: IShareSearchAndAggregationBaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            if (Array.isArray(data["aggregationFilters"])) {
                this.aggregationFilters = [] as any;
                for (let item of data["aggregationFilters"])
                    this.aggregationFilters!.push(AggregationFilter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShareSearchAndAggregationBaseRequest {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ShareSearchAndAggregationBaseRequest' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        if (Array.isArray(this.aggregationFilters)) {
            data["aggregationFilters"] = [];
            for (let item of this.aggregationFilters)
                data["aggregationFilters"].push(item.toJSON());
        }
        return data; 
    }
}

/** Request to aggregate shares based on the specified aggregators */
export interface IShareSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
}

/** Request to search shares */
export class ShareSearchRequest extends ShareSearchAndAggregationBaseRequest implements IShareSearchRequest {
    /** Limits the document count of the result set. */
    limit!: number;
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: SortInfo[] | undefined;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance. */
    debugMode!: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;

    constructor(data?: IShareSearchRequest) {
        super(data);
        if (data) {
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.limit = data["limit"];
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.pageToken = data["pageToken"];
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShareSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["pageToken"] = this.pageToken;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to search shares */
export interface IShareSearchRequest extends IShareSearchAndAggregationBaseRequest {
    /** Limits the document count of the result set. */
    limit: number;
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: ISortInfo[] | undefined;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance. */
    debugMode: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;
}

/** Request to aggregate shares based on the specified aggregators */
export class ShareAggregationRequest extends ShareSearchAndAggregationBaseRequest implements IShareAggregationRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators!: AggregatorBase[];

    constructor(data?: IShareAggregationRequest) {
        super(data);
        if (!data) {
            this.aggregators = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShareAggregationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareAggregationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Request to aggregate shares based on the specified aggregators */
export interface IShareAggregationRequest extends IShareSearchAndAggregationBaseRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators: AggregatorBase[];
}

/** Result of share creation */
export class CreateShareResult implements ICreateShareResult {
    /** Share ID. */
    shareId?: string | undefined;

    constructor(data?: ICreateShareResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shareId = data["shareId"];
        }
    }

    static fromJS(data: any): CreateShareResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreateShareResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareId"] = this.shareId;
        return data; 
    }
}

/** Result of share creation */
export interface ICreateShareResult {
    /** Share ID. */
    shareId?: string | undefined;
}

/** Base create request for share */
export abstract class ShareBaseCreateRequest implements IShareBaseCreateRequest {
    /** Name of share. */
    name!: string;
    /** Optional description of share. */
    description?: string | undefined;
    /** Optional date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** List of contents including outputs to share. */
    contents!: ShareContent[];
    /** List of content layers to share. */
    layerSchemaIds?: string[] | undefined;
    /** Access for content outputs in share. */
    outputAccess!: OutputAccess;

    protected _discriminator: string;

    constructor(data?: IShareBaseCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.contents) {
                this.contents = [];
                for (let i = 0; i < data.contents.length; i++) {
                    let item = data.contents[i];
                    this.contents[i] = item && !(<any>item).toJSON ? new ShareContent(item) : <ShareContent>item;
                }
            }
        }
        if (!data) {
            this.contents = [];
        }
        this._discriminator = "ShareBaseCreateRequest";
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.expirationDate = data["expirationDate"] ? new Date(data["expirationDate"].toString()) : <any>undefined;
            if (Array.isArray(data["contents"])) {
                this.contents = [] as any;
                for (let item of data["contents"])
                    this.contents!.push(ShareContent.fromJS(item));
            }
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.outputAccess = data["outputAccess"];
        }
    }

    static fromJS(data: any): ShareBaseCreateRequest {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ShareBasicCreateRequest") {
            let result = new ShareBasicCreateRequest();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareEmbedCreateRequest") {
            let result = new ShareEmbedCreateRequest();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ShareBaseCreateRequest' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["name"] = this.name;
        data["description"] = this.description;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        if (Array.isArray(this.contents)) {
            data["contents"] = [];
            for (let item of this.contents)
                data["contents"].push(item.toJSON());
        }
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["outputAccess"] = this.outputAccess;
        return data; 
    }
}

/** Base create request for share */
export interface IShareBaseCreateRequest {
    /** Name of share. */
    name: string;
    /** Optional description of share. */
    description?: string | undefined;
    /** Optional date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** List of contents including outputs to share. */
    contents: IShareContent[];
    /** List of content layers to share. */
    layerSchemaIds?: string[] | undefined;
    /** Access for content outputs in share. */
    outputAccess: OutputAccess;
}

export class ShareContent implements IShareContent {
    /** Content ID to share. */
    contentId!: string;
    /** List of output formats for this content to share. If not specified outer OutputAccess is used. */
    outputFormatIds?: string[] | undefined;

    constructor(data?: IShareContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentId = data["contentId"];
            if (Array.isArray(data["outputFormatIds"])) {
                this.outputFormatIds = [] as any;
                for (let item of data["outputFormatIds"])
                    this.outputFormatIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ShareContent {
        data = typeof data === 'object' ? data : {};
        let result = new ShareContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentId"] = this.contentId;
        if (Array.isArray(this.outputFormatIds)) {
            data["outputFormatIds"] = [];
            for (let item of this.outputFormatIds)
                data["outputFormatIds"].push(item);
        }
        return data; 
    }
}

export interface IShareContent {
    /** Content ID to share. */
    contentId: string;
    /** List of output formats for this content to share. If not specified outer OutputAccess is used. */
    outputFormatIds?: string[] | undefined;
}

export class ShareBasicCreateRequest extends ShareBaseCreateRequest implements IShareBasicCreateRequest {
    /** List of external mail recipients which are no Picturepark users. */
    recipientEmails?: UserEmail[] | undefined;
    /** System language used for share (mail and detail page). en or de. */
    languageCode!: string;
    /** Set to true to disable the creation of notifications and emails to recipients. */
    suppressNotifications!: boolean;

    constructor(data?: IShareBasicCreateRequest) {
        super(data);
        if (data) {
            if (data.recipientEmails) {
                this.recipientEmails = [];
                for (let i = 0; i < data.recipientEmails.length; i++) {
                    let item = data.recipientEmails[i];
                    this.recipientEmails[i] = item && !(<any>item).toJSON ? new UserEmail(item) : <UserEmail>item;
                }
            }
        }
        this._discriminator = "ShareBasicCreateRequest";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["recipientEmails"])) {
                this.recipientEmails = [] as any;
                for (let item of data["recipientEmails"])
                    this.recipientEmails!.push(UserEmail.fromJS(item));
            }
            this.languageCode = data["languageCode"];
            this.suppressNotifications = data["suppressNotifications"];
        }
    }

    static fromJS(data: any): ShareBasicCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareBasicCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.recipientEmails)) {
            data["recipientEmails"] = [];
            for (let item of this.recipientEmails)
                data["recipientEmails"].push(item.toJSON());
        }
        data["languageCode"] = this.languageCode;
        data["suppressNotifications"] = this.suppressNotifications;
        super.toJSON(data);
        return data; 
    }
}

export interface IShareBasicCreateRequest extends IShareBaseCreateRequest {
    /** List of external mail recipients which are no Picturepark users. */
    recipientEmails?: IUserEmail[] | undefined;
    /** System language used for share (mail and detail page). en or de. */
    languageCode: string;
    /** Set to true to disable the creation of notifications and emails to recipients. */
    suppressNotifications: boolean;
}

/** Create request for embed share */
export class ShareEmbedCreateRequest extends ShareBaseCreateRequest implements IShareEmbedCreateRequest {

    constructor(data?: IShareEmbedCreateRequest) {
        super(data);
        this._discriminator = "ShareEmbedCreateRequest";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ShareEmbedCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareEmbedCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Create request for embed share */
export interface IShareEmbedCreateRequest extends IShareBaseCreateRequest {
}

/** Base of update request for share */
export abstract class ShareBaseUpdateRequest implements IShareBaseUpdateRequest {
    /** Name of share. */
    name!: string;
    /** Optional date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Optional description of share. */
    description?: string | undefined;
    /** List of contents including outputs. Existing items needs to be sent again, otherwise they will be removed. */
    contents!: ShareContent[];
    /** List of content layers to share. */
    layerSchemaIds?: string[] | undefined;
    /** Access for content outputs in share. */
    outputAccess!: OutputAccess;

    protected _discriminator: string;

    constructor(data?: IShareBaseUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.contents) {
                this.contents = [];
                for (let i = 0; i < data.contents.length; i++) {
                    let item = data.contents[i];
                    this.contents[i] = item && !(<any>item).toJSON ? new ShareContent(item) : <ShareContent>item;
                }
            }
        }
        if (!data) {
            this.contents = [];
        }
        this._discriminator = "ShareBaseUpdateRequest";
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.expirationDate = data["expirationDate"] ? new Date(data["expirationDate"].toString()) : <any>undefined;
            this.description = data["description"];
            if (Array.isArray(data["contents"])) {
                this.contents = [] as any;
                for (let item of data["contents"])
                    this.contents!.push(ShareContent.fromJS(item));
            }
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            this.outputAccess = data["outputAccess"];
        }
    }

    static fromJS(data: any): ShareBaseUpdateRequest {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "ShareBasicUpdateRequest") {
            let result = new ShareBasicUpdateRequest();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ShareEmbedUpdateRequest") {
            let result = new ShareEmbedUpdateRequest();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'ShareBaseUpdateRequest' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["name"] = this.name;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.contents)) {
            data["contents"] = [];
            for (let item of this.contents)
                data["contents"].push(item.toJSON());
        }
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        data["outputAccess"] = this.outputAccess;
        return data; 
    }
}

/** Base of update request for share */
export interface IShareBaseUpdateRequest {
    /** Name of share. */
    name: string;
    /** Optional date when share expires and cannot be accessed anymore. */
    expirationDate?: Date | undefined;
    /** Optional description of share. */
    description?: string | undefined;
    /** List of contents including outputs. Existing items needs to be sent again, otherwise they will be removed. */
    contents: IShareContent[];
    /** List of content layers to share. */
    layerSchemaIds?: string[] | undefined;
    /** Access for content outputs in share. */
    outputAccess: OutputAccess;
}

/** Update request for basic share */
export class ShareBasicUpdateRequest extends ShareBaseUpdateRequest implements IShareBasicUpdateRequest {

    constructor(data?: IShareBasicUpdateRequest) {
        super(data);
        this._discriminator = "ShareBasicUpdateRequest";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ShareBasicUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareBasicUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Update request for basic share */
export interface IShareBasicUpdateRequest extends IShareBaseUpdateRequest {
}

/** Update request for embed share */
export class ShareEmbedUpdateRequest extends ShareBaseUpdateRequest implements IShareEmbedUpdateRequest {

    constructor(data?: IShareEmbedUpdateRequest) {
        super(data);
        this._discriminator = "ShareEmbedUpdateRequest";
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): ShareEmbedUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareEmbedUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Update request for embed share */
export interface IShareEmbedUpdateRequest extends IShareBaseUpdateRequest {
}

export class ShareDeleteManyRequest implements IShareDeleteManyRequest {
    /** IDs of shares to delete. */
    ids!: string[];

    constructor(data?: IShareDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ids = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["ids"])) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): ShareDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShareDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IShareDeleteManyRequest {
    /** IDs of shares to delete. */
    ids: string[];
}

/** Represents a transfer and includes detailed information. */
export class TransferDetail extends Transfer implements ITransferDetail {
    /** Audit information. */
    audit!: UserAudit;
    /** Number of items processed. */
    itemProgress!: number;
    /** Total number of items. */
    itemCount!: number;
    /** Number of items currently being uploaded. */
    fileUploadInProgressCount!: number;
    /** Number of items currently being processed in data extraction. */
    dataExtractionInProgressCount!: number;
    /** Number of items failed. */
    itemsFailed!: number;
    /** Number of items cancelled. */
    itemsCancelled!: number;
    /** Time stamp of last progress update from data extraction. */
    lastDataExtractionProgressTimeStamp?: Date | undefined;
    /** Time stamp of last progress update from upload. */
    lastFileUploadProgressTimeStamp?: Date | undefined;

    constructor(data?: ITransferDetail) {
        super(data);
        if (data) {
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
        }
        if (!data) {
            this.audit = new UserAudit();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : new UserAudit();
            this.itemProgress = data["itemProgress"];
            this.itemCount = data["itemCount"];
            this.fileUploadInProgressCount = data["fileUploadInProgressCount"];
            this.dataExtractionInProgressCount = data["dataExtractionInProgressCount"];
            this.itemsFailed = data["itemsFailed"];
            this.itemsCancelled = data["itemsCancelled"];
            this.lastDataExtractionProgressTimeStamp = data["lastDataExtractionProgressTimeStamp"] ? new Date(data["lastDataExtractionProgressTimeStamp"].toString()) : <any>undefined;
            this.lastFileUploadProgressTimeStamp = data["lastFileUploadProgressTimeStamp"] ? new Date(data["lastFileUploadProgressTimeStamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TransferDetail {
        data = typeof data === 'object' ? data : {};
        let result = new TransferDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["itemProgress"] = this.itemProgress;
        data["itemCount"] = this.itemCount;
        data["fileUploadInProgressCount"] = this.fileUploadInProgressCount;
        data["dataExtractionInProgressCount"] = this.dataExtractionInProgressCount;
        data["itemsFailed"] = this.itemsFailed;
        data["itemsCancelled"] = this.itemsCancelled;
        data["lastDataExtractionProgressTimeStamp"] = this.lastDataExtractionProgressTimeStamp ? this.lastDataExtractionProgressTimeStamp.toISOString() : <any>undefined;
        data["lastFileUploadProgressTimeStamp"] = this.lastFileUploadProgressTimeStamp ? this.lastFileUploadProgressTimeStamp.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Represents a transfer and includes detailed information. */
export interface ITransferDetail extends ITransfer {
    /** Audit information. */
    audit: IUserAudit;
    /** Number of items processed. */
    itemProgress: number;
    /** Total number of items. */
    itemCount: number;
    /** Number of items currently being uploaded. */
    fileUploadInProgressCount: number;
    /** Number of items currently being processed in data extraction. */
    dataExtractionInProgressCount: number;
    /** Number of items failed. */
    itemsFailed: number;
    /** Number of items cancelled. */
    itemsCancelled: number;
    /** Time stamp of last progress update from data extraction. */
    lastDataExtractionProgressTimeStamp?: Date | undefined;
    /** Time stamp of last progress update from upload. */
    lastFileUploadProgressTimeStamp?: Date | undefined;
}

export class BaseResultOfTransfer implements IBaseResultOfTransfer {
    totalResults!: number;
    results!: Transfer[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new Transfer(item) : <Transfer>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(Transfer.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfTransfer {
    totalResults: number;
    results: ITransfer[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfTransfer extends BaseResultOfTransfer implements ISearchBehaviorBaseResultOfTransfer {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfTransfer) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfTransfer extends IBaseResultOfTransfer {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Result from a search for transfers. */
export class TransferSearchResult extends SearchBehaviorBaseResultOfTransfer implements ITransferSearchResult {

    constructor(data?: ITransferSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): TransferSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new TransferSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result from a search for transfers. */
export interface ITransferSearchResult extends ISearchBehaviorBaseResultOfTransfer {
}

/** Request to search for transfers. */
export class TransferSearchRequest implements ITransferSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the TransferSearchResult.
Warning! It severely affects performance. */
    debugMode!: boolean;

    constructor(data?: ITransferSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.debugMode = data["debugMode"];
        }
    }

    static fromJS(data: any): TransferSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TransferSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["debugMode"] = this.debugMode;
        return data; 
    }
}

/** Request to search for transfers. */
export interface ITransferSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Enable debug mode: additional debug information regarding the query execution and reason of the matched documents are returned in the TransferSearchResult.
Warning! It severely affects performance. */
    debugMode: boolean;
}

/** Creates a transfer. */
export class CreateTransferRequest implements ICreateTransferRequest {
    /** Name of transfer. */
    name!: string;
    /** Type of transfer. */
    transferType!: TransferType;
    /** Files uploaded in transfer.
The client is responsible for uploading files to backend.
Required when TransferType is FileUpload or FileUploadAutoImport. */
    files?: TransferUploadFile[] | undefined;
    /** Weblinks downloaded in transfer.
The backend will download files using HTTP, therefore public access to files is needed.
Required when TransferType is WebDownload. */
    webLinks?: TransferWebLink[] | undefined;
    /** Name of collection created after transfer. */
    collectionName?: string | undefined;
    /** A value indicating whether to create a collection after importing the transfer. */
    createCollection!: boolean;

    constructor(data?: ICreateTransferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.transferType = data["transferType"];
            if (Array.isArray(data["files"])) {
                this.files = [] as any;
                for (let item of data["files"])
                    this.files!.push(TransferUploadFile.fromJS(item));
            }
            if (Array.isArray(data["webLinks"])) {
                this.webLinks = [] as any;
                for (let item of data["webLinks"])
                    this.webLinks!.push(TransferWebLink.fromJS(item));
            }
            this.collectionName = data["collectionName"];
            this.createCollection = data["createCollection"];
        }
    }

    static fromJS(data: any): CreateTransferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTransferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["transferType"] = this.transferType;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        if (Array.isArray(this.webLinks)) {
            data["webLinks"] = [];
            for (let item of this.webLinks)
                data["webLinks"].push(item.toJSON());
        }
        data["collectionName"] = this.collectionName;
        data["createCollection"] = this.createCollection;
        return data; 
    }
}

/** Creates a transfer. */
export interface ICreateTransferRequest {
    /** Name of transfer. */
    name: string;
    /** Type of transfer. */
    transferType: TransferType;
    /** Files uploaded in transfer.
The client is responsible for uploading files to backend.
Required when TransferType is FileUpload or FileUploadAutoImport. */
    files?: TransferUploadFile[] | undefined;
    /** Weblinks downloaded in transfer.
The backend will download files using HTTP, therefore public access to files is needed.
Required when TransferType is WebDownload. */
    webLinks?: TransferWebLink[] | undefined;
    /** Name of collection created after transfer. */
    collectionName?: string | undefined;
    /** A value indicating whether to create a collection after importing the transfer. */
    createCollection: boolean;
}

/** Represents the base class for transfer items. */
export abstract class TransferFile implements ITransferFile {
    /** Replaced in favor of RequestId. Client generated identifier of the item. */
    identifier?: string | undefined;
    /** Client generated identifier of the item. */
    requestId?: string | undefined;

    constructor(data?: ITransferFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.identifier = data["identifier"];
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): TransferFile {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'TransferFile' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        data["requestId"] = this.requestId;
        return data; 
    }
}

/** Represents the base class for transfer items. */
export interface ITransferFile {
    /** Replaced in favor of RequestId. Client generated identifier of the item. */
    identifier?: string | undefined;
    /** Client generated identifier of the item. */
    requestId?: string | undefined;
}

/** Represents a file being uploaded in a transfer. */
export class TransferUploadFile extends TransferFile implements ITransferUploadFile {
    /** Target filename of file. */
    fileName!: string;

    constructor(data?: ITransferUploadFile) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fileName = data["fileName"];
        }
    }

    static fromJS(data: any): TransferUploadFile {
        data = typeof data === 'object' ? data : {};
        let result = new TransferUploadFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        super.toJSON(data);
        return data; 
    }
}

/** Represents a file being uploaded in a transfer. */
export interface ITransferUploadFile extends ITransferFile {
    /** Target filename of file. */
    fileName: string;
}

/** Represents an item being downloaded by URL in a transfer. */
export class TransferWebLink extends TransferFile implements ITransferWebLink {
    /** URL of the item. */
    url!: string;
    /** Optional target filename of the file. */
    fileName?: string | undefined;

    constructor(data?: ITransferWebLink) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.url = data["url"];
            this.fileName = data["fileName"];
        }
    }

    static fromJS(data: any): TransferWebLink {
        data = typeof data === 'object' ? data : {};
        let result = new TransferWebLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["fileName"] = this.fileName;
        super.toJSON(data);
        return data; 
    }
}

/** Represents an item being downloaded by URL in a transfer. */
export interface ITransferWebLink extends ITransferFile {
    /** URL of the item. */
    url: string;
    /** Optional target filename of the file. */
    fileName?: string | undefined;
}

/** Representation of a file transfer. */
export class FileTransfer implements IFileTransfer {
    /** ID of file transfer. */
    id!: string;
    /** Name of file transfer. */
    name!: string;
    /** Replaced in favor of RequestId. Client provided identifier. */
    identifier?: string | undefined;
    /** Client provided identifier. */
    requestId!: string;
    /** ID of transfer. */
    transferId!: string;
    /** State of file transfer. */
    state!: FileTransferState;
    /** ID of Content created for file. */
    contentId?: string | undefined;

    constructor(data?: IFileTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.identifier = data["identifier"];
            this.requestId = data["requestId"];
            this.transferId = data["transferId"];
            this.state = data["state"];
            this.contentId = data["contentId"];
        }
    }

    static fromJS(data: any): FileTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["identifier"] = this.identifier;
        data["requestId"] = this.requestId;
        data["transferId"] = this.transferId;
        data["state"] = this.state;
        data["contentId"] = this.contentId;
        return data; 
    }
}

/** Representation of a file transfer. */
export interface IFileTransfer {
    /** ID of file transfer. */
    id: string;
    /** Name of file transfer. */
    name: string;
    /** Replaced in favor of RequestId. Client provided identifier. */
    identifier?: string | undefined;
    /** Client provided identifier. */
    requestId: string;
    /** ID of transfer. */
    transferId: string;
    /** State of file transfer. */
    state: FileTransferState;
    /** ID of Content created for file. */
    contentId?: string | undefined;
}

/** Detailed representation of file transfer. */
export class FileTransferDetail extends FileTransfer implements IFileTransferDetail {
    /** Audit information. */
    audit!: UserAudit;
    /** Metadata extracted for file. */
    fileMetadata?: FileMetadata | undefined;
    /** Outputs rendered during data extraction phase. */
    outputItems?: FileTransferOutput[] | undefined;

    constructor(data?: IFileTransferDetail) {
        super(data);
        if (data) {
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAudit(data.audit) : <UserAudit>this.audit; 
            if (data.outputItems) {
                this.outputItems = [];
                for (let i = 0; i < data.outputItems.length; i++) {
                    let item = data.outputItems[i];
                    this.outputItems[i] = item && !(<any>item).toJSON ? new FileTransferOutput(item) : <FileTransferOutput>item;
                }
            }
        }
        if (!data) {
            this.audit = new UserAudit();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.audit = data["audit"] ? UserAudit.fromJS(data["audit"]) : new UserAudit();
            this.fileMetadata = data["fileMetadata"] ? FileMetadata.fromJS(data["fileMetadata"]) : <any>undefined;
            if (Array.isArray(data["outputItems"])) {
                this.outputItems = [] as any;
                for (let item of data["outputItems"])
                    this.outputItems!.push(FileTransferOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FileTransferDetail {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["fileMetadata"] = this.fileMetadata ? this.fileMetadata.toJSON() : <any>undefined;
        if (Array.isArray(this.outputItems)) {
            data["outputItems"] = [];
            for (let item of this.outputItems)
                data["outputItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Detailed representation of file transfer. */
export interface IFileTransferDetail extends IFileTransfer {
    /** Audit information. */
    audit: IUserAudit;
    /** Metadata extracted for file. */
    fileMetadata?: FileMetadata | undefined;
    /** Outputs rendered during data extraction phase. */
    outputItems?: IFileTransferOutput[] | undefined;
}

export class FileMetadata implements IFileMetadata {
    names?: TranslatedStringDictionary | undefined;
    descriptions?: TranslatedStringDictionary | undefined;
    fileExtension?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    fileSizeInBytes?: number | undefined;
    sha1Hash?: string | undefined;
    xmpMetadata?: any | undefined;
    exifMetadata?: any | undefined;
    language?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IFileMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
            this.descriptions = data.descriptions && !(<any>data.descriptions).toJSON ? new TranslatedStringDictionary(data.descriptions) : <TranslatedStringDictionary>this.descriptions; 
        }
        this._discriminator = "FileMetadata";
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : <any>undefined;
            this.descriptions = data["descriptions"] ? TranslatedStringDictionary.fromJS(data["descriptions"]) : <any>undefined;
            this.fileExtension = data["fileExtension"];
            this.fileName = data["fileName"];
            this.filePath = data["filePath"];
            this.fileSizeInBytes = data["fileSizeInBytes"];
            this.sha1Hash = data["sha1Hash"];
            this.xmpMetadata = data["xmpMetadata"];
            this.exifMetadata = data["exifMetadata"];
            this.language = data["language"];
        }
    }

    static fromJS(data: any): FileMetadata {
        data = typeof data === 'object' ? data : {};
        if (data["kind"] === "AudioMetadata") {
            let result = new AudioMetadata();
            result.init(data);
            return result;
        }
        if (data["kind"] === "DocumentMetadata") {
            let result = new DocumentMetadata();
            result.init(data);
            return result;
        }
        if (data["kind"] === "ImageMetadata") {
            let result = new ImageMetadata();
            result.init(data);
            return result;
        }
        if (data["kind"] === "VideoMetadata") {
            let result = new VideoMetadata();
            result.init(data);
            return result;
        }
        let result = new FileMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this._discriminator; 
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        data["descriptions"] = this.descriptions ? this.descriptions.toJSON() : <any>undefined;
        data["fileExtension"] = this.fileExtension;
        data["fileName"] = this.fileName;
        data["filePath"] = this.filePath;
        data["fileSizeInBytes"] = this.fileSizeInBytes;
        data["sha1Hash"] = this.sha1Hash;
        data["xmpMetadata"] = this.xmpMetadata;
        data["exifMetadata"] = this.exifMetadata;
        data["language"] = this.language;
        return data; 
    }
}

export interface IFileMetadata {
    names?: ITranslatedStringDictionary | undefined;
    descriptions?: ITranslatedStringDictionary | undefined;
    fileExtension?: string | undefined;
    fileName?: string | undefined;
    filePath?: string | undefined;
    fileSizeInBytes?: number | undefined;
    sha1Hash?: string | undefined;
    xmpMetadata?: any | undefined;
    exifMetadata?: any | undefined;
    language?: string | undefined;
}

export class AudioMetadata extends FileMetadata implements IAudioMetadata {
    audioStreams?: AudioStream[] | undefined;

    constructor(data?: IAudioMetadata) {
        super(data);
        if (data) {
            if (data.audioStreams) {
                this.audioStreams = [];
                for (let i = 0; i < data.audioStreams.length; i++) {
                    let item = data.audioStreams[i];
                    this.audioStreams[i] = item && !(<any>item).toJSON ? new AudioStream(item) : <AudioStream>item;
                }
            }
        }
        this._discriminator = "AudioMetadata";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["audioStreams"])) {
                this.audioStreams = [] as any;
                for (let item of data["audioStreams"])
                    this.audioStreams!.push(AudioStream.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AudioMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new AudioMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.audioStreams)) {
            data["audioStreams"] = [];
            for (let item of this.audioStreams)
                data["audioStreams"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAudioMetadata extends IFileMetadata {
    audioStreams?: IAudioStream[] | undefined;
}

export class AudioStream implements IAudioStream {
    bitRate?: string | undefined;
    bitRateMode?: string | undefined;
    channels?: string | undefined;
    channelPositions?: string | undefined;
    codec?: string | undefined;
    durationInSeconds?: number | undefined;
    format?: string | undefined;
    language?: string | undefined;
    resolution?: number | undefined;
    samplingRate?: number | undefined;
    streamSize?: number | undefined;

    constructor(data?: IAudioStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bitRate = data["bitRate"];
            this.bitRateMode = data["bitRateMode"];
            this.channels = data["channels"];
            this.channelPositions = data["channelPositions"];
            this.codec = data["codec"];
            this.durationInSeconds = data["durationInSeconds"];
            this.format = data["format"];
            this.language = data["language"];
            this.resolution = data["resolution"];
            this.samplingRate = data["samplingRate"];
            this.streamSize = data["streamSize"];
        }
    }

    static fromJS(data: any): AudioStream {
        data = typeof data === 'object' ? data : {};
        let result = new AudioStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bitRate"] = this.bitRate;
        data["bitRateMode"] = this.bitRateMode;
        data["channels"] = this.channels;
        data["channelPositions"] = this.channelPositions;
        data["codec"] = this.codec;
        data["durationInSeconds"] = this.durationInSeconds;
        data["format"] = this.format;
        data["language"] = this.language;
        data["resolution"] = this.resolution;
        data["samplingRate"] = this.samplingRate;
        data["streamSize"] = this.streamSize;
        return data; 
    }
}

export interface IAudioStream {
    bitRate?: string | undefined;
    bitRateMode?: string | undefined;
    channels?: string | undefined;
    channelPositions?: string | undefined;
    codec?: string | undefined;
    durationInSeconds?: number | undefined;
    format?: string | undefined;
    language?: string | undefined;
    resolution?: number | undefined;
    samplingRate?: number | undefined;
    streamSize?: number | undefined;
}

export class DocumentMetadata extends FileMetadata implements IDocumentMetadata {
    applicationName?: string | undefined;
    applicationVersion?: string | undefined;
    author?: string | undefined;
    creator?: string | undefined;
    publisher?: string | undefined;
    company?: string | undefined;
    documentTitle?: string | undefined;
    characterCount!: number;
    characterCountWithSpaces!: number;
    lineCount!: number;
    pageCount!: number;
    slideCount!: number;
    paragraphCount!: number;
    revisionNumber!: number;
    titles?: string[] | undefined;
    imageTitles?: string[] | undefined;
    epsInfo?: EpsMetadata | undefined;

    constructor(data?: IDocumentMetadata) {
        super(data);
        if (data) {
            this.epsInfo = data.epsInfo && !(<any>data.epsInfo).toJSON ? new EpsMetadata(data.epsInfo) : <EpsMetadata>this.epsInfo; 
        }
        this._discriminator = "DocumentMetadata";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.applicationName = data["applicationName"];
            this.applicationVersion = data["applicationVersion"];
            this.author = data["author"];
            this.creator = data["creator"];
            this.publisher = data["publisher"];
            this.company = data["company"];
            this.documentTitle = data["documentTitle"];
            this.characterCount = data["characterCount"];
            this.characterCountWithSpaces = data["characterCountWithSpaces"];
            this.lineCount = data["lineCount"];
            this.pageCount = data["pageCount"];
            this.slideCount = data["slideCount"];
            this.paragraphCount = data["paragraphCount"];
            this.revisionNumber = data["revisionNumber"];
            if (Array.isArray(data["titles"])) {
                this.titles = [] as any;
                for (let item of data["titles"])
                    this.titles!.push(item);
            }
            if (Array.isArray(data["imageTitles"])) {
                this.imageTitles = [] as any;
                for (let item of data["imageTitles"])
                    this.imageTitles!.push(item);
            }
            this.epsInfo = data["epsInfo"] ? EpsMetadata.fromJS(data["epsInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationName"] = this.applicationName;
        data["applicationVersion"] = this.applicationVersion;
        data["author"] = this.author;
        data["creator"] = this.creator;
        data["publisher"] = this.publisher;
        data["company"] = this.company;
        data["documentTitle"] = this.documentTitle;
        data["characterCount"] = this.characterCount;
        data["characterCountWithSpaces"] = this.characterCountWithSpaces;
        data["lineCount"] = this.lineCount;
        data["pageCount"] = this.pageCount;
        data["slideCount"] = this.slideCount;
        data["paragraphCount"] = this.paragraphCount;
        data["revisionNumber"] = this.revisionNumber;
        if (Array.isArray(this.titles)) {
            data["titles"] = [];
            for (let item of this.titles)
                data["titles"].push(item);
        }
        if (Array.isArray(this.imageTitles)) {
            data["imageTitles"] = [];
            for (let item of this.imageTitles)
                data["imageTitles"].push(item);
        }
        data["epsInfo"] = this.epsInfo ? this.epsInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentMetadata extends IFileMetadata {
    applicationName?: string | undefined;
    applicationVersion?: string | undefined;
    author?: string | undefined;
    creator?: string | undefined;
    publisher?: string | undefined;
    company?: string | undefined;
    documentTitle?: string | undefined;
    characterCount: number;
    characterCountWithSpaces: number;
    lineCount: number;
    pageCount: number;
    slideCount: number;
    paragraphCount: number;
    revisionNumber: number;
    titles?: string[] | undefined;
    imageTitles?: string[] | undefined;
    epsInfo?: IEpsMetadata | undefined;
}

export class EpsMetadata implements IEpsMetadata {
    isRasterized!: boolean;
    widthInPoints!: number;
    heightInPoints!: number;

    constructor(data?: IEpsMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isRasterized = data["isRasterized"];
            this.widthInPoints = data["widthInPoints"];
            this.heightInPoints = data["heightInPoints"];
        }
    }

    static fromJS(data: any): EpsMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new EpsMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isRasterized"] = this.isRasterized;
        data["widthInPoints"] = this.widthInPoints;
        data["heightInPoints"] = this.heightInPoints;
        return data; 
    }
}

export interface IEpsMetadata {
    isRasterized: boolean;
    widthInPoints: number;
    heightInPoints: number;
}

export class ImageMetadata extends FileMetadata implements IImageMetadata {
    width!: number;
    height!: number;
    widthInInch!: number;
    heightInInch!: number;
    widthInCm!: number;
    heightInCm!: number;
    colorSpace?: string | undefined;
    colorProfile?: string | undefined;
    bitsPerPixel!: number;
    bitsPerChannel!: number;
    channels?: string | undefined;
    pixelFormat?: string | undefined;
    hasAlpha!: boolean;
    isIndexed!: boolean;
    isExtended!: boolean;
    horizontalResolution!: number;
    verticalResolution!: number;
    totalFrames!: number;
    totalUnspecifiedTiffExtraChannels!: number;
    hasExifData!: boolean;
    hasIptcData!: boolean;
    hasAdobeResourceData!: boolean;
    hasXmpData!: boolean;
    uncompressedSizeInBytes!: number;

    constructor(data?: IImageMetadata) {
        super(data);
        this._discriminator = "ImageMetadata";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.width = data["width"];
            this.height = data["height"];
            this.widthInInch = data["widthInInch"];
            this.heightInInch = data["heightInInch"];
            this.widthInCm = data["widthInCm"];
            this.heightInCm = data["heightInCm"];
            this.colorSpace = data["colorSpace"];
            this.colorProfile = data["colorProfile"];
            this.bitsPerPixel = data["bitsPerPixel"];
            this.bitsPerChannel = data["bitsPerChannel"];
            this.channels = data["channels"];
            this.pixelFormat = data["pixelFormat"];
            this.hasAlpha = data["hasAlpha"];
            this.isIndexed = data["isIndexed"];
            this.isExtended = data["isExtended"];
            this.horizontalResolution = data["horizontalResolution"];
            this.verticalResolution = data["verticalResolution"];
            this.totalFrames = data["totalFrames"];
            this.totalUnspecifiedTiffExtraChannels = data["totalUnspecifiedTiffExtraChannels"];
            this.hasExifData = data["hasExifData"];
            this.hasIptcData = data["hasIptcData"];
            this.hasAdobeResourceData = data["hasAdobeResourceData"];
            this.hasXmpData = data["hasXmpData"];
            this.uncompressedSizeInBytes = data["uncompressedSizeInBytes"];
        }
    }

    static fromJS(data: any): ImageMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new ImageMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["widthInInch"] = this.widthInInch;
        data["heightInInch"] = this.heightInInch;
        data["widthInCm"] = this.widthInCm;
        data["heightInCm"] = this.heightInCm;
        data["colorSpace"] = this.colorSpace;
        data["colorProfile"] = this.colorProfile;
        data["bitsPerPixel"] = this.bitsPerPixel;
        data["bitsPerChannel"] = this.bitsPerChannel;
        data["channels"] = this.channels;
        data["pixelFormat"] = this.pixelFormat;
        data["hasAlpha"] = this.hasAlpha;
        data["isIndexed"] = this.isIndexed;
        data["isExtended"] = this.isExtended;
        data["horizontalResolution"] = this.horizontalResolution;
        data["verticalResolution"] = this.verticalResolution;
        data["totalFrames"] = this.totalFrames;
        data["totalUnspecifiedTiffExtraChannels"] = this.totalUnspecifiedTiffExtraChannels;
        data["hasExifData"] = this.hasExifData;
        data["hasIptcData"] = this.hasIptcData;
        data["hasAdobeResourceData"] = this.hasAdobeResourceData;
        data["hasXmpData"] = this.hasXmpData;
        data["uncompressedSizeInBytes"] = this.uncompressedSizeInBytes;
        super.toJSON(data);
        return data; 
    }
}

export interface IImageMetadata extends IFileMetadata {
    width: number;
    height: number;
    widthInInch: number;
    heightInInch: number;
    widthInCm: number;
    heightInCm: number;
    colorSpace?: string | undefined;
    colorProfile?: string | undefined;
    bitsPerPixel: number;
    bitsPerChannel: number;
    channels?: string | undefined;
    pixelFormat?: string | undefined;
    hasAlpha: boolean;
    isIndexed: boolean;
    isExtended: boolean;
    horizontalResolution: number;
    verticalResolution: number;
    totalFrames: number;
    totalUnspecifiedTiffExtraChannels: number;
    hasExifData: boolean;
    hasIptcData: boolean;
    hasAdobeResourceData: boolean;
    hasXmpData: boolean;
    uncompressedSizeInBytes: number;
}

export class VideoMetadata extends FileMetadata implements IVideoMetadata {
    width!: number;
    height!: number;
    durationInSeconds!: number;
    format?: string | undefined;
    codec?: string | undefined;
    overallBitrate?: number | undefined;
    videoStreams?: VideoStream[] | undefined;
    audioStreams?: AudioStream[] | undefined;

    constructor(data?: IVideoMetadata) {
        super(data);
        if (data) {
            if (data.videoStreams) {
                this.videoStreams = [];
                for (let i = 0; i < data.videoStreams.length; i++) {
                    let item = data.videoStreams[i];
                    this.videoStreams[i] = item && !(<any>item).toJSON ? new VideoStream(item) : <VideoStream>item;
                }
            }
            if (data.audioStreams) {
                this.audioStreams = [];
                for (let i = 0; i < data.audioStreams.length; i++) {
                    let item = data.audioStreams[i];
                    this.audioStreams[i] = item && !(<any>item).toJSON ? new AudioStream(item) : <AudioStream>item;
                }
            }
        }
        this._discriminator = "VideoMetadata";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.width = data["width"];
            this.height = data["height"];
            this.durationInSeconds = data["durationInSeconds"];
            this.format = data["format"];
            this.codec = data["codec"];
            this.overallBitrate = data["overallBitrate"];
            if (Array.isArray(data["videoStreams"])) {
                this.videoStreams = [] as any;
                for (let item of data["videoStreams"])
                    this.videoStreams!.push(VideoStream.fromJS(item));
            }
            if (Array.isArray(data["audioStreams"])) {
                this.audioStreams = [] as any;
                for (let item of data["audioStreams"])
                    this.audioStreams!.push(AudioStream.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VideoMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new VideoMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["durationInSeconds"] = this.durationInSeconds;
        data["format"] = this.format;
        data["codec"] = this.codec;
        data["overallBitrate"] = this.overallBitrate;
        if (Array.isArray(this.videoStreams)) {
            data["videoStreams"] = [];
            for (let item of this.videoStreams)
                data["videoStreams"].push(item.toJSON());
        }
        if (Array.isArray(this.audioStreams)) {
            data["audioStreams"] = [];
            for (let item of this.audioStreams)
                data["audioStreams"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IVideoMetadata extends IFileMetadata {
    width: number;
    height: number;
    durationInSeconds: number;
    format?: string | undefined;
    codec?: string | undefined;
    overallBitrate?: number | undefined;
    videoStreams?: IVideoStream[] | undefined;
    audioStreams?: IAudioStream[] | undefined;
}

export class VideoStream implements IVideoStream {
    bitRate?: string | undefined;
    codec?: string | undefined;
    displayAspectRatio?: string | undefined;
    durationInSeconds!: number;
    format?: string | undefined;
    frameCount?: number | undefined;
    frameRate?: number | undefined;
    height?: number | undefined;
    language?: string | undefined;
    pixelAspectRatio?: number | undefined;
    resolution?: number | undefined;
    streamSize?: number | undefined;
    width?: number | undefined;
    rotation?: number | undefined;

    constructor(data?: IVideoStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bitRate = data["bitRate"];
            this.codec = data["codec"];
            this.displayAspectRatio = data["displayAspectRatio"];
            this.durationInSeconds = data["durationInSeconds"];
            this.format = data["format"];
            this.frameCount = data["frameCount"];
            this.frameRate = data["frameRate"];
            this.height = data["height"];
            this.language = data["language"];
            this.pixelAspectRatio = data["pixelAspectRatio"];
            this.resolution = data["resolution"];
            this.streamSize = data["streamSize"];
            this.width = data["width"];
            this.rotation = data["rotation"];
        }
    }

    static fromJS(data: any): VideoStream {
        data = typeof data === 'object' ? data : {};
        let result = new VideoStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bitRate"] = this.bitRate;
        data["codec"] = this.codec;
        data["displayAspectRatio"] = this.displayAspectRatio;
        data["durationInSeconds"] = this.durationInSeconds;
        data["format"] = this.format;
        data["frameCount"] = this.frameCount;
        data["frameRate"] = this.frameRate;
        data["height"] = this.height;
        data["language"] = this.language;
        data["pixelAspectRatio"] = this.pixelAspectRatio;
        data["resolution"] = this.resolution;
        data["streamSize"] = this.streamSize;
        data["width"] = this.width;
        data["rotation"] = this.rotation;
        return data; 
    }
}

export interface IVideoStream {
    bitRate?: string | undefined;
    codec?: string | undefined;
    displayAspectRatio?: string | undefined;
    durationInSeconds: number;
    format?: string | undefined;
    frameCount?: number | undefined;
    frameRate?: number | undefined;
    height?: number | undefined;
    language?: string | undefined;
    pixelAspectRatio?: number | undefined;
    resolution?: number | undefined;
    streamSize?: number | undefined;
    width?: number | undefined;
    rotation?: number | undefined;
}

export class FileTransferOutput implements IFileTransferOutput {
    id?: string | undefined;
    filePath?: string | undefined;
    outputSource!: OutputSource;

    constructor(data?: IFileTransferOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.filePath = data["filePath"];
            this.outputSource = data["outputSource"];
        }
    }

    static fromJS(data: any): FileTransferOutput {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["filePath"] = this.filePath;
        data["outputSource"] = this.outputSource;
        return data; 
    }
}

export interface IFileTransferOutput {
    id?: string | undefined;
    filePath?: string | undefined;
    outputSource: OutputSource;
}

export enum OutputSource {
    Rendered = "Rendered",
    Embedded = "Embedded",
}

export enum FileTransferState {
    Draft = "Draft",
    UploadInProgress = "UploadInProgress",
    UploadCompleted = "UploadCompleted",
    DataExtractionInProgress = "DataExtractionInProgress",
    DataExtractionDone = "DataExtractionDone",
    ImportInProgress = "ImportInProgress",
    ImportCompleted = "ImportCompleted",
    UploadCancelled = "UploadCancelled",
    ImportCancelled = "ImportCancelled",
    UploadFailed = "UploadFailed",
    ImportFailed = "ImportFailed",
    DeleteInProgress = "DeleteInProgress",
    Deleted = "Deleted",
    CleanupInProgress = "CleanupInProgress",
    CleanupCompleted = "CleanupCompleted",
}

export class BaseResultOfFileTransfer implements IBaseResultOfFileTransfer {
    totalResults!: number;
    results!: FileTransfer[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfFileTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new FileTransfer(item) : <FileTransfer>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(FileTransfer.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfFileTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfFileTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfFileTransfer {
    totalResults: number;
    results: IFileTransfer[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfFileTransfer extends BaseResultOfFileTransfer implements ISearchBehaviorBaseResultOfFileTransfer {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfFileTransfer) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfFileTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfFileTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfFileTransfer extends IBaseResultOfFileTransfer {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Result from a search for file transfers. */
export class FileTransferSearchResult extends SearchBehaviorBaseResultOfFileTransfer implements IFileTransferSearchResult {

    constructor(data?: IFileTransferSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): FileTransferSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Result from a search for file transfers. */
export interface IFileTransferSearchResult extends ISearchBehaviorBaseResultOfFileTransfer {
}

/** Request to search for file transfers. */
export class FileTransferSearchRequest implements IFileTransferSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;

    constructor(data?: IFileTransferSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FileTransferSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to search for file transfers. */
export interface IFileTransferSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
}

/** Blacklist containing file name patterns skipped when uploading. */
export class Blacklist implements IBlacklist {
    /** Blacklist entries. */
    items!: BlacklistItem[];

    constructor(data?: IBlacklist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new BlacklistItem(item) : <BlacklistItem>item;
                }
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(BlacklistItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Blacklist {
        data = typeof data === 'object' ? data : {};
        let result = new Blacklist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Blacklist containing file name patterns skipped when uploading. */
export interface IBlacklist {
    /** Blacklist entries. */
    items: IBlacklistItem[];
}

/** Entry in the Blacklist. */
export class BlacklistItem implements IBlacklistItem {
    /** Friendly name of item. */
    name!: string;
    /** Pattern a file name must match to be excluded from the transfer. */
    match!: string;

    constructor(data?: IBlacklistItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.match = data["match"];
        }
    }

    static fromJS(data: any): BlacklistItem {
        data = typeof data === 'object' ? data : {};
        let result = new BlacklistItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["match"] = this.match;
        return data; 
    }
}

/** Entry in the Blacklist. */
export interface IBlacklistItem {
    /** Friendly name of item. */
    name: string;
    /** Pattern a file name must match to be excluded from the transfer. */
    match: string;
}

/** Deletes files from transfer. */
export class FileTransferDeleteRequest implements IFileTransferDeleteRequest {
    /** ID of transfer. */
    transferId!: string;
    /** List of IDs of file transfers to delete. */
    fileTransferIds!: string[];

    constructor(data?: IFileTransferDeleteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fileTransferIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.transferId = data["transferId"];
            if (Array.isArray(data["fileTransferIds"])) {
                this.fileTransferIds = [] as any;
                for (let item of data["fileTransferIds"])
                    this.fileTransferIds!.push(item);
            }
        }
    }

    static fromJS(data: any): FileTransferDeleteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferDeleteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferId"] = this.transferId;
        if (Array.isArray(this.fileTransferIds)) {
            data["fileTransferIds"] = [];
            for (let item of this.fileTransferIds)
                data["fileTransferIds"].push(item);
        }
        return data; 
    }
}

/** Deletes files from transfer. */
export interface IFileTransferDeleteRequest {
    /** ID of transfer. */
    transferId: string;
    /** List of IDs of file transfers to delete. */
    fileTransferIds: string[];
}

export class ImportTransferRequest implements IImportTransferRequest {
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional id list of content permission sets. Controls content accessibility outside of content ownership. */
    contentPermissionSetIds?: string[] | undefined;

    constructor(data?: IImportTransferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            if (Array.isArray(data["contentPermissionSetIds"])) {
                this.contentPermissionSetIds = [] as any;
                for (let item of data["contentPermissionSetIds"])
                    this.contentPermissionSetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ImportTransferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ImportTransferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        if (Array.isArray(this.contentPermissionSetIds)) {
            data["contentPermissionSetIds"] = [];
            for (let item of this.contentPermissionSetIds)
                data["contentPermissionSetIds"].push(item);
        }
        return data; 
    }
}

export interface IImportTransferRequest {
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional id list of content permission sets. Controls content accessibility outside of content ownership. */
    contentPermissionSetIds?: string[] | undefined;
}

export class ImportTransferPartialRequest implements IImportTransferPartialRequest {
    items?: FileTransferCreateItem[] | undefined;

    constructor(data?: IImportTransferPartialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new FileTransferCreateItem(item) : <FileTransferCreateItem>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(FileTransferCreateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ImportTransferPartialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ImportTransferPartialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IImportTransferPartialRequest {
    items?: IFileTransferCreateItem[] | undefined;
}

export class FileTransferCreateItem implements IFileTransferCreateItem {
    fileId!: string;
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional id list of content permission sets. Controls content accessibility outside of content ownership. */
    contentPermissionSetIds?: string[] | undefined;

    constructor(data?: IFileTransferCreateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileId = data["fileId"];
            if (Array.isArray(data["layerSchemaIds"])) {
                this.layerSchemaIds = [] as any;
                for (let item of data["layerSchemaIds"])
                    this.layerSchemaIds!.push(item);
            }
            if (data["metadata"]) {
                this.metadata = {} as any;
                for (let key in data["metadata"]) {
                    if (data["metadata"].hasOwnProperty(key))
                        this.metadata![key] = data["metadata"][key];
                }
            }
            if (Array.isArray(data["contentPermissionSetIds"])) {
                this.contentPermissionSetIds = [] as any;
                for (let item of data["contentPermissionSetIds"])
                    this.contentPermissionSetIds!.push(item);
            }
        }
    }

    static fromJS(data: any): FileTransferCreateItem {
        data = typeof data === 'object' ? data : {};
        let result = new FileTransferCreateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        if (Array.isArray(this.layerSchemaIds)) {
            data["layerSchemaIds"] = [];
            for (let item of this.layerSchemaIds)
                data["layerSchemaIds"].push(item);
        }
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        if (Array.isArray(this.contentPermissionSetIds)) {
            data["contentPermissionSetIds"] = [];
            for (let item of this.contentPermissionSetIds)
                data["contentPermissionSetIds"].push(item);
        }
        return data; 
    }
}

export interface IFileTransferCreateItem {
    fileId: string;
    /** An optional id list of schemas with type layer. */
    layerSchemaIds?: string[] | undefined;
    /** The metadata to be assigned to the imported content. It's a dictionary of dynamic metadata whose structure is defined in the Layer schemas identified
by the LayerSchemaIds property. */
    metadata?: { [key: string] : any; } | undefined;
    /** An optional id list of content permission sets. Controls content accessibility outside of content ownership. */
    contentPermissionSetIds?: string[] | undefined;
}

/** Represents the updateable fields of the user. */
export class UserUpdateRequest extends User implements IUserUpdateRequest {
    /** User roles the user should be assigned to. Overwrites the original user roles. */
    userRoles?: UserRole[] | undefined;
    /** Comment saved for the user. */
    comment?: string | undefined;
    /** Preferred language, e.g. for correspondence. */
    languageCode?: string | undefined;
    /** User's address. */
    address?: UserAddress | undefined;

    constructor(data?: IUserUpdateRequest) {
        super(data);
        if (data) {
            this.address = data.address && !(<any>data.address).toJSON ? new UserAddress(data.address) : <UserAddress>this.address; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of data["userRoles"])
                    this.userRoles!.push(UserRole.fromJS(item));
            }
            this.comment = data["comment"];
            this.languageCode = data["languageCode"];
            this.address = data["address"] ? UserAddress.fromJS(data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        data["comment"] = this.comment;
        data["languageCode"] = this.languageCode;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Represents the updateable fields of the user. */
export interface IUserUpdateRequest extends IUser {
    /** User roles the user should be assigned to. Overwrites the original user roles. */
    userRoles?: UserRole[] | undefined;
    /** Comment saved for the user. */
    comment?: string | undefined;
    /** Preferred language, e.g. for correspondence. */
    languageCode?: string | undefined;
    /** User's address. */
    address?: IUserAddress | undefined;
}

/** Detail information about a user. */
export class UserDetail extends UserUpdateRequest implements IUserDetail {
    /** Owner tokens referencing the user. */
    ownerTokens?: OwnerToken[] | undefined;
    /** Authorization state the user is currently in. */
    authorizationState!: AuthorizationState;
    /** Locked users are unable to log in and use the system. */
    isLocked!: boolean;
    /** Life cycle state the user is currently in. */
    lifeCycle!: LifeCycle;
    /** The support user is a user created for Picturepark support personnel. */
    isSupportUser!: boolean;
    /** Read-only users can't be removed from the system, e.g. service user. */
    isReadOnly!: boolean;
    /** Audit information. */
    audit?: UserAuditDetail | undefined;

    constructor(data?: IUserDetail) {
        super(data);
        if (data) {
            if (data.ownerTokens) {
                this.ownerTokens = [];
                for (let i = 0; i < data.ownerTokens.length; i++) {
                    let item = data.ownerTokens[i];
                    this.ownerTokens[i] = item && !(<any>item).toJSON ? new OwnerToken(item) : <OwnerToken>item;
                }
            }
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["ownerTokens"])) {
                this.ownerTokens = [] as any;
                for (let item of data["ownerTokens"])
                    this.ownerTokens!.push(OwnerToken.fromJS(item));
            }
            this.authorizationState = data["authorizationState"];
            this.isLocked = data["isLocked"];
            this.lifeCycle = data["lifeCycle"];
            this.isSupportUser = data["isSupportUser"];
            this.isReadOnly = data["isReadOnly"];
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDetail {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ownerTokens)) {
            data["ownerTokens"] = [];
            for (let item of this.ownerTokens)
                data["ownerTokens"].push(item.toJSON());
        }
        data["authorizationState"] = this.authorizationState;
        data["isLocked"] = this.isLocked;
        data["lifeCycle"] = this.lifeCycle;
        data["isSupportUser"] = this.isSupportUser;
        data["isReadOnly"] = this.isReadOnly;
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Detail information about a user. */
export interface IUserDetail extends IUserUpdateRequest {
    /** Owner tokens referencing the user. */
    ownerTokens?: IOwnerToken[] | undefined;
    /** Authorization state the user is currently in. */
    authorizationState: AuthorizationState;
    /** Locked users are unable to log in and use the system. */
    isLocked: boolean;
    /** Life cycle state the user is currently in. */
    lifeCycle: LifeCycle;
    /** The support user is a user created for Picturepark support personnel. */
    isSupportUser: boolean;
    /** Read-only users can't be removed from the system, e.g. service user. */
    isReadOnly: boolean;
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
}

export class OwnerToken implements IOwnerToken {
    /** The ownertoken id. */
    id?: string | undefined;
    /** The id of the user to whom this ownertoken currently belongs to. */
    userId?: string | undefined;

    constructor(data?: IOwnerToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): OwnerToken {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IOwnerToken {
    /** The ownertoken id. */
    id?: string | undefined;
    /** The id of the user to whom this ownertoken currently belongs to. */
    userId?: string | undefined;
}

/** Represents a user role, which associates users with user rights. */
export class UserRoleEditable implements IUserRoleEditable {
    /** Language specific user role names. */
    names!: TranslatedStringDictionary;
    /** All user rights for this user role. */
    userRights!: UserRight[];

    constructor(data?: IUserRoleEditable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.names = data.names && !(<any>data.names).toJSON ? new TranslatedStringDictionary(data.names) : <TranslatedStringDictionary>this.names; 
        }
        if (!data) {
            this.names = new TranslatedStringDictionary();
            this.userRights = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.names = data["names"] ? TranslatedStringDictionary.fromJS(data["names"]) : new TranslatedStringDictionary();
            if (Array.isArray(data["userRights"])) {
                this.userRights = [] as any;
                for (let item of data["userRights"])
                    this.userRights!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRoleEditable {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleEditable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["names"] = this.names ? this.names.toJSON() : <any>undefined;
        if (Array.isArray(this.userRights)) {
            data["userRights"] = [];
            for (let item of this.userRights)
                data["userRights"].push(item);
        }
        return data; 
    }
}

/** Represents a user role, which associates users with user rights. */
export interface IUserRoleEditable {
    /** Language specific user role names. */
    names: ITranslatedStringDictionary;
    /** All user rights for this user role. */
    userRights: UserRight[];
}

/** Represents a user role, which associates users with user rights. */
export class UserRole extends UserRoleEditable implements IUserRole {
    /** User role ID. */
    id!: string;

    constructor(data?: IUserRole) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

/** Represents a user role, which associates users with user rights. */
export interface IUserRole extends IUserRoleEditable {
    /** User role ID. */
    id: string;
}

/** Holds information needed for user creation. */
export class UserCreateRequest implements IUserCreateRequest {
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress!: string;
    /** Preferred language, e.g. for correspondence. */
    languageCode?: string | undefined;
    /** IDs of user roles the user is assigned to. */
    userRoleIds?: string[] | undefined;
    /** User address. */
    address?: UserAddress | undefined;

    constructor(data?: IUserCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.address = data.address && !(<any>data.address).toJSON ? new UserAddress(data.address) : <UserAddress>this.address; 
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.emailAddress = data["emailAddress"];
            this.languageCode = data["languageCode"];
            if (Array.isArray(data["userRoleIds"])) {
                this.userRoleIds = [] as any;
                for (let item of data["userRoleIds"])
                    this.userRoleIds!.push(item);
            }
            this.address = data["address"] ? UserAddress.fromJS(data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["languageCode"] = this.languageCode;
        if (Array.isArray(this.userRoleIds)) {
            data["userRoleIds"] = [];
            for (let item of this.userRoleIds)
                data["userRoleIds"].push(item);
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

/** Holds information needed for user creation. */
export interface IUserCreateRequest {
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress: string;
    /** Preferred language, e.g. for correspondence. */
    languageCode?: string | undefined;
    /** IDs of user roles the user is assigned to. */
    userRoleIds?: string[] | undefined;
    /** User address. */
    address?: IUserAddress | undefined;
}

export class BaseResultOfUserWithRoles implements IBaseResultOfUserWithRoles {
    totalResults!: number;
    results!: UserWithRoles[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfUserWithRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.results) {
                this.results = [];
                for (let i = 0; i < data.results.length; i++) {
                    let item = data.results[i];
                    this.results[i] = item && !(<any>item).toJSON ? new UserWithRoles(item) : <UserWithRoles>item;
                }
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(UserWithRoles.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfUserWithRoles {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfUserWithRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfUserWithRoles {
    totalResults: number;
    results: IUserWithRoles[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfUserWithRoles extends BaseResultOfUserWithRoles implements ISearchBehaviorBaseResultOfUserWithRoles {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfUserWithRoles) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfUserWithRoles {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfUserWithRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfUserWithRoles extends IBaseResultOfUserWithRoles {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

export class SearchBehaviorWithAggregationBaseResultOfUserWithRoles extends SearchBehaviorBaseResultOfUserWithRoles implements ISearchBehaviorWithAggregationBaseResultOfUserWithRoles {
    aggregationResults?: AggregationResult[] | undefined;

    constructor(data?: ISearchBehaviorWithAggregationBaseResultOfUserWithRoles) {
        super(data);
        if (data) {
            if (data.aggregationResults) {
                this.aggregationResults = [];
                for (let i = 0; i < data.aggregationResults.length; i++) {
                    let item = data.aggregationResults[i];
                    this.aggregationResults[i] = item && !(<any>item).toJSON ? new AggregationResult(item) : <AggregationResult>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregationResults"])) {
                this.aggregationResults = [] as any;
                for (let item of data["aggregationResults"])
                    this.aggregationResults!.push(AggregationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchBehaviorWithAggregationBaseResultOfUserWithRoles {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorWithAggregationBaseResultOfUserWithRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregationResults)) {
            data["aggregationResults"] = [];
            for (let item of this.aggregationResults)
                data["aggregationResults"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorWithAggregationBaseResultOfUserWithRoles extends ISearchBehaviorBaseResultOfUserWithRoles {
    aggregationResults?: IAggregationResult[] | undefined;
}

/** Holds results of the user search. */
export class UserSearchResult extends SearchBehaviorWithAggregationBaseResultOfUserWithRoles implements IUserSearchResult {

    constructor(data?: IUserSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UserSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Holds results of the user search. */
export interface IUserSearchResult extends ISearchBehaviorWithAggregationBaseResultOfUserWithRoles {
}

/** User information retrieved via search */
export class UserWithRoles implements IUserWithRoles {
    /** IDs of user roles user is assigned to */
    userRoleIds?: string[] | undefined;
    /** User's Picturepark ID. */
    id!: string;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress!: string;
    /** Authorization state the user is currently in. */
    authorizationState!: AuthorizationState;
    /** Life cycle state the user is currently in. */
    lifeCycle!: LifeCycle;
    /** The support user is a user created for Picturepark support personnel. */
    isSupportUser!: boolean;
    /** Read-only users can't be removed from the system, e.g. service user. */
    isReadOnly!: boolean;

    constructor(data?: IUserWithRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["userRoleIds"])) {
                this.userRoleIds = [] as any;
                for (let item of data["userRoleIds"])
                    this.userRoleIds!.push(item);
            }
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.emailAddress = data["emailAddress"];
            this.authorizationState = data["authorizationState"];
            this.lifeCycle = data["lifeCycle"];
            this.isSupportUser = data["isSupportUser"];
            this.isReadOnly = data["isReadOnly"];
        }
    }

    static fromJS(data: any): UserWithRoles {
        data = typeof data === 'object' ? data : {};
        let result = new UserWithRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userRoleIds)) {
            data["userRoleIds"] = [];
            for (let item of this.userRoleIds)
                data["userRoleIds"].push(item);
        }
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["authorizationState"] = this.authorizationState;
        data["lifeCycle"] = this.lifeCycle;
        data["isSupportUser"] = this.isSupportUser;
        data["isReadOnly"] = this.isReadOnly;
        return data; 
    }
}

/** User information retrieved via search */
export interface IUserWithRoles {
    /** IDs of user roles user is assigned to */
    userRoleIds?: string[] | undefined;
    /** User's Picturepark ID. */
    id: string;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** Email address of the user (doubles as username). */
    emailAddress: string;
    /** Authorization state the user is currently in. */
    authorizationState: AuthorizationState;
    /** Life cycle state the user is currently in. */
    lifeCycle: LifeCycle;
    /** The support user is a user created for Picturepark support personnel. */
    isSupportUser: boolean;
    /** Read-only users can't be removed from the system, e.g. service user. */
    isReadOnly: boolean;
}

/** Represents an aggregation request over users. */
export abstract class UserSearchAndAggregationBaseRequest implements IUserSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Return only users in certain life cycle state(s). */
    lifeCycleFilter!: LifeCycleFilter;
    /** Return only users with certain user rights. */
    userRightsFilter?: UserRight[] | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    includeServiceUser!: boolean;

    constructor(data?: IUserSearchAndAggregationBaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.lifeCycleFilter = data["lifeCycleFilter"];
            if (Array.isArray(data["userRightsFilter"])) {
                this.userRightsFilter = [] as any;
                for (let item of data["userRightsFilter"])
                    this.userRightsFilter!.push(item);
            }
            if (Array.isArray(data["aggregationFilters"])) {
                this.aggregationFilters = [] as any;
                for (let item of data["aggregationFilters"])
                    this.aggregationFilters!.push(AggregationFilter.fromJS(item));
            }
            this.includeServiceUser = data["includeServiceUser"];
        }
    }

    static fromJS(data: any): UserSearchAndAggregationBaseRequest {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'UserSearchAndAggregationBaseRequest' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["lifeCycleFilter"] = this.lifeCycleFilter;
        if (Array.isArray(this.userRightsFilter)) {
            data["userRightsFilter"] = [];
            for (let item of this.userRightsFilter)
                data["userRightsFilter"].push(item);
        }
        if (Array.isArray(this.aggregationFilters)) {
            data["aggregationFilters"] = [];
            for (let item of this.aggregationFilters)
                data["aggregationFilters"].push(item.toJSON());
        }
        data["includeServiceUser"] = this.includeServiceUser;
        return data; 
    }
}

/** Represents an aggregation request over users. */
export interface IUserSearchAndAggregationBaseRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** An optional search filter. Limits the document result set. */
    filter?: FilterBase | undefined;
    /** Return only users in certain life cycle state(s). */
    lifeCycleFilter: LifeCycleFilter;
    /** Return only users with certain user rights. */
    userRightsFilter?: UserRight[] | undefined;
    /** Special filters used to filter down the aggregations' values on specific conditions. The behavior is different when
filtering an aggregation that matches the same AggregationName or another aggregation.
In the first case, the filter is put in "or" with (eventual) other existing filters. In the second case it is put in "and". */
    aggregationFilters?: AggregationFilter[] | undefined;
    includeServiceUser: boolean;
}

/** Represents user search request. */
export class UserSearchRequest extends UserSearchAndAggregationBaseRequest implements IUserSearchRequest {
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: SortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance. */
    debugMode!: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;

    constructor(data?: IUserSearchRequest) {
        super(data);
        if (data) {
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Represents user search request. */
export interface IUserSearchRequest extends IUserSearchAndAggregationBaseRequest {
    /** Fields and respective directions requested to sort the search results. Sorting on a not indexed field will throw an exception. */
    sort?: ISortInfo[] | undefined;
    /** Limits the document count of the result set. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! Severely affects performance. */
    debugMode: boolean;
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators?: AggregatorBase[] | undefined;
}

/** Represents an aggregation request over users. */
export class UserAggregationRequest extends UserSearchAndAggregationBaseRequest implements IUserAggregationRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators!: AggregatorBase[];

    constructor(data?: IUserAggregationRequest) {
        super(data);
        if (!data) {
            this.aggregators = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["aggregators"])) {
                this.aggregators = [] as any;
                for (let item of data["aggregators"])
                    this.aggregators!.push(AggregatorBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAggregationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserAggregationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aggregators)) {
            data["aggregators"] = [];
            for (let item of this.aggregators)
                data["aggregators"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

/** Represents an aggregation request over users. */
export interface IUserAggregationRequest extends IUserSearchAndAggregationBaseRequest {
    /** List of aggregators that defines how the items should be aggregated. */
    aggregators: AggregatorBase[];
}

export class UserLockRequest implements IUserLockRequest {
    /** Indicates the requested lock state of the user.
If _true_ was specified, the user will be _locked_. _False_ will unlock the previously _locked_ user. */
    lock!: boolean;

    constructor(data?: IUserLockRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lock = data["lock"];
        }
    }

    static fromJS(data: any): UserLockRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserLockRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lock"] = this.lock;
        return data; 
    }
}

export interface IUserLockRequest {
    /** Indicates the requested lock state of the user.
If _true_ was specified, the user will be _locked_. _False_ will unlock the previously _locked_ user. */
    lock: boolean;
}

/** Holds additional information for user review. */
export class UserReviewRequest implements IUserReviewRequest {
    /** Indicates the requested review state of the user.
If _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state. */
    reviewed!: boolean;

    constructor(data?: IUserReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reviewed = data["reviewed"];
        }
    }

    static fromJS(data: any): UserReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reviewed"] = this.reviewed;
        return data; 
    }
}

/** Holds additional information for user review. */
export interface IUserReviewRequest {
    /** Indicates the requested review state of the user.
If _true_ is specified, user will be transitioned into _reviewed_ state. _False_ will put the user back into _to be reviewed_ state. */
    reviewed: boolean;
}

/** Details of the user deletion. */
export class UserDeleteRequest implements IUserDeleteRequest {
    /** User ID of user who will take over the ownership of the content currently owned by the deleted user. */
    ownerTokenTransferUserId?: string | undefined;

    constructor(data?: IUserDeleteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ownerTokenTransferUserId = data["ownerTokenTransferUserId"];
        }
    }

    static fromJS(data: any): UserDeleteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserDeleteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerTokenTransferUserId"] = this.ownerTokenTransferUserId;
        return data; 
    }
}

/** Details of the user deletion. */
export interface IUserDeleteRequest {
    /** User ID of user who will take over the ownership of the content currently owned by the deleted user. */
    ownerTokenTransferUserId?: string | undefined;
}

/** Represents a user role, which associates users with user rights. */
export class UserRoleDetail extends UserRole implements IUserRoleDetail {
    /** Audit information. */
    audit?: UserAuditDetail | undefined;

    constructor(data?: IUserRoleDetail) {
        super(data);
        if (data) {
            this.audit = data.audit && !(<any>data.audit).toJSON ? new UserAuditDetail(data.audit) : <UserAuditDetail>this.audit; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.audit = data["audit"] ? UserAuditDetail.fromJS(data["audit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserRoleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

/** Represents a user role, which associates users with user rights. */
export interface IUserRoleDetail extends IUserRole {
    /** Audit information. */
    audit?: IUserAuditDetail | undefined;
}

export class BaseResultOfUserRole implements IBaseResultOfUserRole {
    totalResults!: number;
    results!: UserRole[];
    elapsedMilliseconds!: number;
    pageToken?: string | undefined;

    constructor(data?: IBaseResultOfUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.totalResults = data["totalResults"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(UserRole.fromJS(item));
            }
            this.elapsedMilliseconds = data["elapsedMilliseconds"];
            this.pageToken = data["pageToken"];
        }
    }

    static fromJS(data: any): BaseResultOfUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResultOfUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["elapsedMilliseconds"] = this.elapsedMilliseconds;
        data["pageToken"] = this.pageToken;
        return data; 
    }
}

export interface IBaseResultOfUserRole {
    totalResults: number;
    results: UserRole[];
    elapsedMilliseconds: number;
    pageToken?: string | undefined;
}

export class SearchBehaviorBaseResultOfUserRole extends BaseResultOfUserRole implements ISearchBehaviorBaseResultOfUserRole {
    searchString?: string | undefined;
    isSearchStringRewritten!: boolean;
    queryDebugInformation?: QueryDebugInformation | undefined;

    constructor(data?: ISearchBehaviorBaseResultOfUserRole) {
        super(data);
        if (data) {
            this.queryDebugInformation = data.queryDebugInformation && !(<any>data.queryDebugInformation).toJSON ? new QueryDebugInformation(data.queryDebugInformation) : <QueryDebugInformation>this.queryDebugInformation; 
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.searchString = data["searchString"];
            this.isSearchStringRewritten = data["isSearchStringRewritten"];
            this.queryDebugInformation = data["queryDebugInformation"] ? QueryDebugInformation.fromJS(data["queryDebugInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBehaviorBaseResultOfUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBehaviorBaseResultOfUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        data["isSearchStringRewritten"] = this.isSearchStringRewritten;
        data["queryDebugInformation"] = this.queryDebugInformation ? this.queryDebugInformation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchBehaviorBaseResultOfUserRole extends IBaseResultOfUserRole {
    searchString?: string | undefined;
    isSearchStringRewritten: boolean;
    queryDebugInformation?: IQueryDebugInformation | undefined;
}

/** Holds results of the user role search. */
export class UserRoleSearchResult extends SearchBehaviorBaseResultOfUserRole implements IUserRoleSearchResult {

    constructor(data?: IUserRoleSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): UserRoleSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** Holds results of the user role search. */
export interface IUserRoleSearchResult extends ISearchBehaviorBaseResultOfUserRole {
}

export class UserRoleSearchRequest implements IUserRoleSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Fields and respective directions requested to sort the search results. */
    sort?: SortInfo[] | undefined;
    /** Limits the document count of the result set. Defaults to 30. */
    limit!: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Filter applied to user roles. */
    filter?: FilterBase | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance. */
    debugMode!: boolean;
    /** Which languages to search against when using the search string. */
    searchLanguages?: string[] | undefined;
    /** Defines if the user roles with system user role Administrator is returned. */
    includeAdministratorSystemUserRole!: boolean;

    constructor(data?: IUserRoleSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.sort) {
                this.sort = [];
                for (let i = 0; i < data.sort.length; i++) {
                    let item = data.sort[i];
                    this.sort[i] = item && !(<any>item).toJSON ? new SortInfo(item) : <SortInfo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchString = data["searchString"];
            if (Array.isArray(data["searchBehaviors"])) {
                this.searchBehaviors = [] as any;
                for (let item of data["searchBehaviors"])
                    this.searchBehaviors!.push(item);
            }
            if (Array.isArray(data["sort"])) {
                this.sort = [] as any;
                for (let item of data["sort"])
                    this.sort!.push(SortInfo.fromJS(item));
            }
            this.limit = data["limit"];
            this.pageToken = data["pageToken"];
            this.filter = data["filter"] ? FilterBase.fromJS(data["filter"]) : <any>undefined;
            this.debugMode = data["debugMode"];
            if (Array.isArray(data["searchLanguages"])) {
                this.searchLanguages = [] as any;
                for (let item of data["searchLanguages"])
                    this.searchLanguages!.push(item);
            }
            this.includeAdministratorSystemUserRole = data["includeAdministratorSystemUserRole"];
        }
    }

    static fromJS(data: any): UserRoleSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchString"] = this.searchString;
        if (Array.isArray(this.searchBehaviors)) {
            data["searchBehaviors"] = [];
            for (let item of this.searchBehaviors)
                data["searchBehaviors"].push(item);
        }
        if (Array.isArray(this.sort)) {
            data["sort"] = [];
            for (let item of this.sort)
                data["sort"].push(item.toJSON());
        }
        data["limit"] = this.limit;
        data["pageToken"] = this.pageToken;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["debugMode"] = this.debugMode;
        if (Array.isArray(this.searchLanguages)) {
            data["searchLanguages"] = [];
            for (let item of this.searchLanguages)
                data["searchLanguages"].push(item);
        }
        data["includeAdministratorSystemUserRole"] = this.includeAdministratorSystemUserRole;
        return data; 
    }
}

export interface IUserRoleSearchRequest {
    /** Limits the search by using a query string filter. The Lucene query string syntax is supported. */
    searchString?: string | undefined;
    /** An optional list of search behaviors. All the passed behaviors will be applied. */
    searchBehaviors?: SearchBehavior[] | undefined;
    /** Fields and respective directions requested to sort the search results. */
    sort?: ISortInfo[] | undefined;
    /** Limits the document count of the result set. Defaults to 30. */
    limit: number;
    /** The token used to retrieve the next page of results. It must be null on first request and only filled with the returned pageToken to request next page of results. */
    pageToken?: string | undefined;
    /** Filter applied to user roles. */
    filter?: FilterBase | undefined;
    /** Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance. */
    debugMode: boolean;
    /** Which languages to search against when using the search string. */
    searchLanguages?: string[] | undefined;
    /** Defines if the user roles with system user role Administrator is returned. */
    includeAdministratorSystemUserRole: boolean;
}

/** Holds information needed for user role creation. */
export class UserRoleCreateRequest extends UserRoleEditable implements IUserRoleCreateRequest {
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;

    constructor(data?: IUserRoleCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.requestId = data["requestId"];
        }
    }

    static fromJS(data: any): UserRoleCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        super.toJSON(data);
        return data; 
    }
}

/** Holds information needed for user role creation. */
export interface IUserRoleCreateRequest extends IUserRoleEditable {
    /** Optional client reference for this request.
Will be returned back in response to make easier for clients to match request items with the respective results.
It is not persisted anywhere and it is ignored in single operations. */
    requestId?: string | undefined;
}

/** Holds information needed to create multiple user roles. */
export class UserRoleCreateManyRequest implements IUserRoleCreateManyRequest {
    /** Multiple user creation requests. */
    items!: UserRoleCreateRequest[];

    constructor(data?: IUserRoleCreateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserRoleCreateRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRoleCreateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleCreateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Holds information needed to create multiple user roles. */
export interface IUserRoleCreateManyRequest {
    /** Multiple user creation requests. */
    items: UserRoleCreateRequest[];
}

/** Holds information about which user roles and how are requested to be updated. */
export class UserRoleUpdateManyRequest implements IUserRoleUpdateManyRequest {
    /** New value for user roles with specified IDs. */
    items!: UserRole[];

    constructor(data?: IUserRoleUpdateManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRoleUpdateManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleUpdateManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Holds information about which user roles and how are requested to be updated. */
export interface IUserRoleUpdateManyRequest {
    /** New value for user roles with specified IDs. */
    items: UserRole[];
}

/** Holds information about which user roles are requested to be deleted. */
export class UserRoleDeleteManyRequest implements IUserRoleDeleteManyRequest {
    /** IDs of the user roles to delete. */
    ids!: string[];

    constructor(data?: IUserRoleDeleteManyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ids = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["ids"])) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): UserRoleDeleteManyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleDeleteManyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

/** Holds information about which user roles are requested to be deleted. */
export interface IUserRoleDeleteManyRequest {
    /** IDs of the user roles to delete. */
    ids: string[];
}

export class DataDictionary implements IDataDictionary {

    [key: string]: any; 

    constructor(data?: IDataDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data: any): DataDictionary {
        data = typeof data === 'object' ? data : {};
        let result = new DataDictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data; 
    }
}

export interface IDataDictionary {

    [key: string]: any; 
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}