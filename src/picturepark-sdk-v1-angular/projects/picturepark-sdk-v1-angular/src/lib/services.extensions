import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core'; // ignore
import { Observable } from 'rxjs/Observable'; // ignore
import { PICTUREPARK_API_URL, ThumbnailSize, FileResponse } from './services'; // ignore

import { PictureparkServiceBase } from './base.service';
import * as generated from './services';

class TranslatedStringDictionary extends generated.TranslatedStringDictionary {
    translate(locale: string) {
        const language = locale.split('-')[0];
        return this[language] ? this[language] : this[Object.keys(this)[0]];
    }
}

class FilterBase extends generated.FilterBase {
    getDisplayName(locale: string): string | null {
        return null;
    }
}

class DateRangeFilter extends generated.DateRangeFilter {
    getDisplayName(locale: string) {
        return this.range && this.range.names ? this.range.names.translate(locale) : 'n/a';
    }
}

class AggregationResultItem extends generated.AggregationResultItem {    
    getDisplayName(locale: string) {
        let displayName;

        // remove guid and show only owner name. example: name: "534e5b3763f242629eca53e764d713bf/cp support"
        if (this.filter && this.filter.aggregationName === 'ownerTokenId') {
          displayName = this.name.split("/").pop() || null;
        } else {
          displayName = this.filter && this.filter.filter ? this.filter.filter.getDisplayName(locale) : null;
        }
        
        return displayName ? displayName : this.name;
    }
}

export abstract class AuthService {
    private _pictureparkApiUrl: string;

    constructor(pictureparkApiUrl: string) {
        this._pictureparkApiUrl = pictureparkApiUrl;
    }

    get apiServer() {
        return this._pictureparkApiUrl;
    }

    abstract get isAuthenticated(): boolean;
    abstract transformHttpRequestOptions(options: any): Promise<any>;
}
