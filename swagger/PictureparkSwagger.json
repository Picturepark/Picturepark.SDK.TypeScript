{
  "x-generator": "NSwag v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v9.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "Picturepark API V1",
    "description": "# Getting started\r\nWelcome to the reference for the Picturepark REST API.\r\n\r\n## Client registration\r\nTo use the Picturepark API, you need first to create a new API Client.\r\n\r\nGo to https://{{customerHost}}/Settings/APIClients and create a new API Client based on your desired authentication flow.\r\n\r\n\r\n## Authentication\r\nThe authentication process is based on [OpenID Connect](http://openid.net/connect/).\r\n\r\nThe following OAuth 2.0 flows are supported:\r\n- **Implicit** (Interactive user authentication for SPA Applications)\r\n- **Hybrid** (Interactive user authentication with server based validation)\r\n- **Client credentials** (Server to server, create access tokens that do not expire)\r\n\r\n### Examples\r\nExample authentication implementations can be found here:\r\n- Angular: https://github.com/Picturepark/Picturepark.SDK.TypeScript/tree/master/src/picturepark-sdk-v1-angular-app\r\n- HTML5 Fetch: (TBD)\r\n- .NET: (TBD)\r\n\r\n### Access token lifetime\r\nFor **Implicit** and **Hybrid** flow, the access tokens are short-lived (30mins). You need to refresh your access token after it's expired.\r\nYou can silently refresh the token using a hidden Iframe in the browser: [Angular example](https://damienbod.com/2017/06/02/implementing-a-silent-token-renew-in-angular-for-the-openid-connect-implicit-flow/)\r\n\r\nFor the **Client credentials** flow, you can create an access token that never expires.\r\nGo to https://{{customerHost}}/Settings/APIClients\r\n\r\n**Attention: Adding long lived access tokens to a web application (adding token to Javascripts source code) will expose that token to anyone. Use with care and a very limited set of scopes.**\r\n\r\n### Urls\r\n\r\n- Live: -\r\n- Preview: https://identity.preview-picturepark.com\r\n- Stage: https://identity.stage-picturepark.com\r\n\r\n## SDKs\r\nTo simplify building applications, SDKs for the following languages/frameworks are provided and released as open source under MIT license:\r\n\r\n- .NET\r\n  - [https://github.com/Picturepark/Picturepark.SDK.DotNet](https://github.com/Picturepark/Picturepark.SDK.DotNet)\r\n  - Supports .NET 4.5+ / .NET Standard 1.3+\r\n- JavaScript / TypeScript\r\n  - [https://github.com/Picturepark/Picturepark.SDK.TypeScript](https://github.com/Picturepark/Picturepark.SDK.TypeScript)\r\n  - Supports [Angular](https://angular.io/) 4.3+ / [HTML 5 Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\r\n\r\nClients for other languages can be created using [Autorest](https://github.com/Azure/autorest) using the following OpenAPI provided here:\r\n- [Picturepark.SDK.Playground](https://github.com/Picturepark/Picturepark.SDK.Playground)\r\n\r\n\r\n# Concepts\r\n\r\n## HTTP Requests\r\nTo perform API calls, you can specify the following HTTP headers:\r\n\r\n| HTTP Header               | Value                | Required |\r\n| ------------------------- | -------------------- | -------- |\r\n| Accept                    | application/json     | Yes      |\r\n| Authorization             | Bearer {accessToken} | Yes (except for publicAccess/* endpoints) |\r\n| Picturepark-CustomerAlias | Customer identifier  | Yes      |\r\n| Picturepark-Language      | en / de              | No       |\r\n\r\n## Error responses\r\nErrors in Picturepark API are returned using HTTP status codes, as well as a JSON error response object.\r\n\r\nHTTP status 4xx\r\n- Client errors (e.g. wrong data provided by client)\r\n\r\nHTTP status 5xx\r\n- Server errors (something went wrong on the server)\r\n\r\n## Request limits / quota\r\nTo protect the Picturepark API you are limited in the number of API requests per interval.\r\n\r\nIf that limit is exceeded you will get an exception with HTTP status code 429 (Too many requests).\r\n\r\nIf you need more calls per interval, Pictuepark sales (sales@picturepark.com)\r\n\r\n## Permissions / Scopes\r\n\r\nIn order to be able to perform requests, you need the permissions.\r\n\r\n### User permissions\r\nThe authenticated user needs the permission in Picturepark to perform the request.\r\n\r\n### Scopes\r\n\r\nAdditionally, your application needs to define which scopes are required.\r\n\r\nFor all the scopes requested by your application, the users need to confirm these in the consent screen.\r\n\r\n[List of scopes](#section/Authentication)\r\n\r\n\r\n# Search\r\n\r\nMost entities have a search endpoint to search and filter.\r\n\r\nFor list items and contents, the search and filters depend on the available schemas and search configurations.\r\n\r\n\r\n## Simple search\r\n\r\n([Elastic search query string reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html))\r\n\r\nWith the simple search a multi field query is executed.\r\n\r\nallow_leading_wildcard is disabled.\r\n\r\nThe applicable query string syntax can be found [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html).\r\n\r\nThe query is executed against all indexed schema fields with a boolean flag *SimpleSearch* set to `true`.\r\n\r\nRunning the query against multiple fields enables to put the searched fields under thight control and also to expand each query term to an OR clause (field1=\"value\" or field2=\"value\").\r\n\r\n\r\n## Filtering\r\n\r\nAvailable filters:\r\n\r\n- AndFilter\r\n- OrFilter\r\n- NotFilter\r\n- DateRangeFilter\r\n- NumericRangeFilter\r\n- ExistsFilter\r\n- PrefixFilter\r\n- TermFilter\r\n- TermsFilter\r\n- GeoBoundingBoxFilter\r\n- GeoDistanceFilter\r\n- NestedFilter (Obsolete)\r\n- ChildFilter\r\n- ParentFilter",
    "contact": {
      "name": "Picturepark sales",
      "url": "http://www.picturepark.com",
      "email": "sales@picturepark.com"
    },
    "version": "1.0",
    "x-logo": {
      "url": "/docs/rest/picturepark-logo.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/contents/{contentId}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get detail - single",
        "description": "Gets a content document by id.",
        "operationId": "Content_Get",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Content not found",
            "schema": {
              "$ref": "#/definitions/ContentNotFoundException"
            },
            "x-nullable": false
          },
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/many": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get detail - many",
        "description": "Gets multiple content documents by ids.",
        "operationId": "Content_GetMany",
        "parameters": [
          {
            "type": "array",
            "name": "ids",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of contentIds",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of ContentDetail",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentDetail"
              }
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create - many",
        "description": "Create multiple file-less content items. To import files, see [Transfer](#section/Transfer)\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_CreateMany",
        "parameters": [
          {
            "name": "contentCreateManyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentCreateManyRequest"
            },
            "x-nullable": true,
            "description": "The content create many request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Search",
        "description": "Searches contents as specified in the search request.",
        "operationId": "Content_Search",
        "parameters": [
          {
            "name": "contentSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentSearchRequest"
            },
            "x-nullable": true,
            "description": "The content search request."
          }
        ],
        "responses": {
          "200": {
            "description": "ContentSearchResult",
            "schema": {
              "$ref": "#/definitions/ContentSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/{channelId}/search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Search by channel",
        "description": "Searches contents as specified in the search request and limits the search results to the specified channel.",
        "operationId": "Content_SearchByChannel",
        "parameters": [
          {
            "type": "string",
            "name": "channelId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The channel id."
          },
          {
            "name": "contentSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentSearchRequest"
            },
            "x-nullable": true,
            "description": "The content search request."
          }
        ],
        "responses": {
          "200": {
            "description": "ContentSearchResult",
            "schema": {
              "$ref": "#/definitions/ContentSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/aggregate": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate",
        "description": "Aggregates content fields as specified in the aggregation request.",
        "operationId": "Content_Aggregate",
        "parameters": [
          {
            "name": "contentAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentAggregationRequest"
            },
            "x-nullable": true,
            "description": "The aggregation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/{channelId}/aggregate": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate by channel",
        "description": "Aggregates content fields as specified in the aggregation request and limits the aggregation results to the specified channel.",
        "operationId": "Content_AggregateByChannel",
        "parameters": [
          {
            "type": "string",
            "name": "channelId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The channel id"
          },
          {
            "name": "contentAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentAggregationRequest"
            },
            "x-nullable": true,
            "description": "The content aggregation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/downloadLinks": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create download link",
        "description": "Creates a download link for one or more contents.",
        "operationId": "Content_CreateDownloadLink",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentDownloadLinkCreateRequest"
            },
            "x-nullable": true,
            "description": "The content download link request"
          }
        ],
        "responses": {
          "200": {
            "description": "ContentBatchDonloadItem",
            "schema": {
              "$ref": "#/definitions/DownloadLink"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/downloads/{contentId}/{outputFormatId}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Download output",
        "description": "Download single content in a specific outputformat. To resize images on download specify target width &amp; height. To download only a portion of the file, specify the range parameter.",
        "operationId": "Content_Download",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id"
          },
          {
            "type": "string",
            "name": "outputFormatId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The output format id"
          },
          {
            "type": "integer",
            "name": "width",
            "in": "query",
            "x-nullable": true,
            "description": "Optional width in pixels to resize image",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "height",
            "in": "query",
            "x-nullable": true,
            "description": "Optional height in pixels to resize image",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "range",
            "in": "header",
            "x-nullable": true,
            "description": "The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)"
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponseMessage",
            "schema": {
              "type": "file"
            },
            "x-nullable": false
          },
          "206": {
            "description": "HttpResponseMessage",
            "schema": {
              "type": "file"
            },
            "x-nullable": true
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents/thumbnails/{contentId}/{size}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Download thumbnail",
        "description": "Provides a lightweight endpoint to get content thumbnails.",
        "operationId": "Content_DownloadThumbnail",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The Content id"
          },
          {
            "type": "string",
            "name": "size",
            "in": "path",
            "required": true,
            "x-schema": {
              "$ref": "#/definitions/ThumbnailSize"
            },
            "x-nullable": false,
            "description": "Thumbnail size. Either small, medium or large",
            "enum": [
              "Small",
              "Medium",
              "Large"
            ]
          },
          {
            "type": "integer",
            "name": "width",
            "in": "query",
            "x-nullable": true,
            "description": "Optional width in pixels to resize image",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "height",
            "in": "query",
            "x-nullable": true,
            "description": "Optional height in pixels to resize image",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponseMessage",
            "schema": {
              "type": "file"
            },
            "x-nullable": false
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_read"
            ]
          }
        ]
      }
    },
    "/v1/contents": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create - single",
        "description": "Create a single file-less content item. To import files, see [Transfer](#section/Transfer)",
        "operationId": "Content_Create",
        "parameters": [
          {
            "name": "contentCreateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentCreateRequest"
            },
            "x-nullable": true,
            "description": "The content create request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow creating list items that refer to list items or contents that don't exist in the system.",
            "default": false
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/deactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Deactivate - single",
        "description": "Deactivates a single content. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.",
        "operationId": "Content_Deactivate",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "the id of the content to deactivate"
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/many/deactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Deactivate - many",
        "description": "Deactivates multiple contents. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the content and all files will be deleted.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_DeactivateMany",
        "parameters": [
          {
            "name": "deactivateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentDeactivateRequest"
            },
            "x-nullable": true,
            "description": "The deactivate request"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/reactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Reactivate - single",
        "description": "Reactivate a previously deactivated content.",
        "operationId": "Content_Reactivate",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow reactivating contents that refer to list items or contents that don't exist in the system.",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/many/reactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Reactivate - many",
        "description": "Reactivate previously deactivated contents.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_ReactivateMany",
        "parameters": [
          {
            "name": "reactivateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentReactivateRequest"
            },
            "x-nullable": true,
            "description": "The content reactivate request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/file": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update file - single",
        "description": "Update binary file of existing content. The file must already be uploaded before calling this endpoint. See [Transfer](#section/Transfer)\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdateFile",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the content to replace"
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentFileUpdateRequest"
            },
            "x-nullable": true,
            "description": "Update request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/metadata": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update metadata - single",
        "description": "Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.",
        "operationId": "Content_UpdateMetadata",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentMetadataUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow storing references to missing list items",
            "default": false
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update permissions - single",
        "description": "Updates the content permission sets of a single content. To get a list of available content permission sets, see [Permissions](operation/Permission_SearchContentPermissions)",
        "operationId": "Content_UpdatePermissions",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentPermissionsUpdateRequest"
            },
            "x-nullable": true,
            "description": "The content permission update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/many/metadata": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update metadata - many",
        "description": "Updates metadata layers of a specified content. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadata](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdateMetadataMany",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentMetadataUpdateManyRequest"
            },
            "x-nullable": true,
            "description": "The metadata update requests."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "404": {
            "description": "Not all provided contents could be found",
            "schema": {
              "$ref": "#/definitions/ContentsNotFoundException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/many/permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update permissions - many",
        "description": "Updates the content permission sets of specified contents. To get a list of available content permission sets, see [Permissions](#operation/Permission_SearchContentPermissions)\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_UpdatePermissionsMany",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentPermissionsUpdateRequest"
              }
            },
            "x-nullable": true,
            "description": "The permissions update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/{contentId}/ownership/transfer": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Transfer ownership - single",
        "description": "Transfer ownership of a content to another user. The user must have the ManageContent UserRight.",
        "operationId": "Content_TransferOwnership",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentOwnershipTransferRequest"
            },
            "x-nullable": true,
            "description": "The content ownership transfer request update request."
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/many/ownership/transfer": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Transfer ownership - many",
        "description": "Transfer ownership of multiple contents to another user. The user must have the ManageContent UserRight.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_TransferOwnershipMany",
        "parameters": [
          {
            "name": "contentsOwnershipTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentsOwnershipTransferRequest"
            },
            "x-nullable": true,
            "description": "The content ownership transfer request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/batches/fields/ids": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Batch update fields - by ids",
        "description": "Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. See [ShouldUpdateMetadataMany](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs) tests.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_BatchUpdateFieldsByIds",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentFieldsUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/contents/batches/fields/filter": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Batch update fields - by filter",
        "description": "Updates metadata layers of specified contents. For file-less contents, the content itself can be updated aswell. A filter must be provided to limit the update to specific contents.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Content_BatchUpdateFieldsByFilter",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentFieldsFilterUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "content_write"
            ]
          }
        ]
      }
    },
    "/v1/businessProcesses/search": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Search",
        "description": "Search for business processes",
        "operationId": "BusinessProcess_Search",
        "parameters": [
          {
            "name": "businessProcessSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BusinessProcessSearchRequest"
            },
            "x-nullable": true,
            "description": "The business process request"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessSearchResult",
            "schema": {
              "$ref": "#/definitions/BusinessProcessSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "// Get the last 20 business processes\r\nvar request = new BusinessProcessSearchRequest\r\n{\r\n\tStart = 0,\r\n\tLimit = 20,\r\n\tSort = new List<SortInfo>\r\n\t{\r\n\t\tnew SortInfo\r\n\t\t{\r\n\t\t\tField = \"audit.creationDate\",\r\n\t\t\tDirection = SortDirection.Desc\r\n\t\t}\r\n\t}\r\n};\r\nvar results = await _client.BusinessProcesses.SearchAsync(request);\r\nAssert.NotNull(results);\r\n\t\t"
          }
        ]
      }
    },
    "/v1/businessProcesses/{processId}/wait": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Wait",
        "description": "Wait for given process state or lifeCycle. LifeCycles are the same over all business processes. States depend on specific states of the business process.",
        "operationId": "BusinessProcess_Wait",
        "parameters": [
          {
            "type": "string",
            "name": "processId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The process id"
          },
          {
            "type": "array",
            "name": "states",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "The states to wait for",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "array",
            "name": "lifeCycleIds",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Business process lifeCycle to wait for",
            "items": {
              "$ref": "#/definitions/BusinessProcessLifeCycle"
            }
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "The timeout to wait for completion.",
            "format": "time-span"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessWaitResult",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/businessProcesses/{processId}/waitCompletion": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Wait for completion",
        "description": "Wait for given process to complete with lifeCycle \"Succeeded\", \"Cancelled\" or \"Failed\".",
        "operationId": "BusinessProcess_WaitForCompletion",
        "parameters": [
          {
            "type": "string",
            "name": "processId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The process id"
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "The timeout to wait for completion.",
            "format": "time-span"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessWaitResult",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/businessProcesses/{processId}/details": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "summary": "Get details",
        "description": "Get details of a given business process.",
        "operationId": "BusinessProcess_GetDetails",
        "parameters": [
          {
            "type": "string",
            "name": "processId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The process id"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessDetails",
            "schema": {
              "$ref": "#/definitions/BusinessProcessDetails"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "businessprocess_read"
            ]
          }
        ]
      }
    },
    "/v1/history/search": {
      "post": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Search",
        "description": "Search the document history.",
        "operationId": "DocumentHistory_Search",
        "parameters": [
          {
            "name": "documentHistorySearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentHistorySearchRequest"
            },
            "x-nullable": true,
            "description": "The document history search request"
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentHistorySearchResult",
            "schema": {
              "$ref": "#/definitions/DocumentHistorySearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{id}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get latest",
        "description": "Gets the latest version of a document.",
        "operationId": "DocumentHistory_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the document (e.g. ContentId)"
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentHistory",
            "schema": {
              "$ref": "#/definitions/DocumentHistory"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{id}/{version}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get latest by version",
        "description": "Gets the latest version of a document by specifiying a specific document version.",
        "operationId": "DocumentHistory_GetVersion",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the document (e.g. ContentId)"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The version"
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentHistory",
            "schema": {
              "$ref": "#/definitions/DocumentHistory"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{id}/difference/{oldVersion}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get latest difference",
        "description": "Gets the difference on a document by comparing the provided version against the latest versions",
        "operationId": "DocumentHistory_GetDifferenceLatest",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the document (e.g. ContentId)"
          },
          {
            "type": "integer",
            "name": "oldVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The old version",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentHistoryDifference",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryDifference"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/history/{id}/difference/{oldVersion}/{newVersion}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "summary": "Get difference",
        "description": "Gets the difference on a document by comparing two document versions",
        "operationId": "DocumentHistory_GetDifference",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the document (e.g. ContentId)"
          },
          {
            "type": "integer",
            "name": "oldVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The old version",
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "newVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The new version",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentHistoryDifference",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryDifference"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "documenthistory_read"
            ]
          }
        ]
      }
    },
    "/v1/jsonSchemas/{schemaId}": {
      "get": {
        "tags": [
          "JsonSchema"
        ],
        "summary": "Get Json Schema",
        "description": "Get the json schema schematics for the provided schema.",
        "operationId": "JsonSchema_Get",
        "parameters": [
          {
            "type": "string",
            "name": "schemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "Schema Id"
          }
        ],
        "responses": {
          "200": {
            "description": "JsonSchemaViewItem",
            "schema": {},
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "jsonschema_read"
            ]
          }
        ]
      }
    },
    "/v1/listItems/{listItemId}": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get - single",
        "operationId": "ListItem_Get",
        "parameters": [
          {
            "type": "string",
            "name": "listItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": false
          },
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListItemNotFoundException"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update - single",
        "description": "Updates a single list item",
        "operationId": "ListItem_Update",
        "parameters": [
          {
            "type": "string",
            "name": "listItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemUpdateRequest"
            },
            "x-nullable": true,
            "description": "The list item update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow creating list items that refer to list items or contents that don't exist in the system.",
            "default": false
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListItemDetail",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/search": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Search",
        "description": "Searches list items as specified in the search request.",
        "operationId": "ListItem_Search",
        "parameters": [
          {
            "name": "listItemSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemSearchRequest"
            },
            "x-nullable": true,
            "description": "The list item search request."
          }
        ],
        "responses": {
          "200": {
            "description": "List item result set.",
            "schema": {
              "$ref": "#/definitions/ListItemSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/listItems/aggregate": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Aggregate",
        "description": "Aggregates list items as specified in the aggregation request.",
        "operationId": "ListItem_Aggregate",
        "parameters": [
          {
            "name": "listItemAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemAggregationRequest"
            },
            "x-nullable": true,
            "description": "The list item aggregation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_read"
            ]
          }
        ]
      }
    },
    "/v1/listItems": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create - single",
        "description": "Create a single list item.",
        "operationId": "ListItem_Create",
        "parameters": [
          {
            "name": "listItemCreateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemCreateRequest"
            },
            "x-nullable": true,
            "description": "List item create request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow creating list items that refer to list items or contents that don't exist in the system.",
            "default": false
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListItemDetail",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/many": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create - many",
        "description": "Create multiple list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_CreateMany",
        "parameters": [
          {
            "name": "listItemCreateManyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemCreateManyRequest"
            },
            "x-nullable": true,
            "description": "List item create many request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update - many",
        "description": "Updates multiple list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_UpdateMany",
        "parameters": [
          {
            "name": "listItemUpdateManyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemUpdateManyRequest"
            },
            "x-nullable": true,
            "description": "List item update many request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/{listItemId}/deactivate": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Deactivate - single",
        "description": "Deactivates a single listitem. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.",
        "operationId": "ListItem_Deactivate",
        "parameters": [
          {
            "type": "string",
            "name": "listItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "the id of the list item to deactivate"
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/many/deactivate": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Deactivate - many",
        "description": "Deactivates multiple list items. The lifecycle is changed to Inactive. After a customer instance specified time (default 30 days), the list item and all files will be deleted.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_DeactivateMany",
        "parameters": [
          {
            "name": "deactivateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemDeactivateRequest"
            },
            "x-nullable": true,
            "description": "The list items deactivate request"
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/{listItemId}/reactivate": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Reactivate - single",
        "description": "Reactivate a previously deactivated list item.",
        "operationId": "ListItem_Reactivate",
        "parameters": [
          {
            "type": "string",
            "name": "listItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "type": "string",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time to wait for the business process completed state.",
            "format": "time-span"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "List of display pattern types. Resolves display values of referenced list items where the display pattern matches.",
            "items": {
              "$ref": "#/definitions/DisplayPatternType"
            }
          },
          {
            "type": "boolean",
            "name": "allowMissingDependencies",
            "in": "query",
            "x-nullable": false,
            "description": "Allow reactivating list items that refer to list items or contents that don't exist in the system.",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "ListItemDetail",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "The specified wait timeout exceeded",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/many/reactivate": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Reactivate - many",
        "description": "Reactivate previously deactivated list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_ReactivateMany",
        "parameters": [
          {
            "name": "reactivateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemReactivateRequest"
            },
            "x-nullable": true,
            "description": "The list items reactivate request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/batches/fields/ids": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Batch update fields - by ids",
        "description": "Update fields of multiple list items. A list of listItemIds must be provided to limit the update to specific list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_BatchUpdateFieldsByIds",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemFieldsUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/listItems/batches/fields/filter": {
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Batch update fields - by filter",
        "description": "Update fields of multiple list items. A filter must be provided to limit the update to specific list items.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "ListItem_BatchUpdateFieldsByFilter",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemFieldsFilterUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "listitem_write"
            ]
          }
        ]
      }
    },
    "/v1/liveStream/search": {
      "post": {
        "tags": [
          "LiveStream"
        ],
        "summary": "Search LiveStream",
        "operationId": "LiveStream_Search",
        "parameters": [
          {
            "name": "liveStreamSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveStreamSearchRequest"
            },
            "x-nullable": true,
            "description": "The livestream search request"
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectSearchResult",
            "schema": {
              "$ref": "#/definitions/ObjectSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/schemas/{schemaId}": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get - single",
        "description": "Gets the schema detail information by the schema id.",
        "operationId": "Schema_Get",
        "parameters": [
          {
            "type": "string",
            "name": "schemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          }
        ],
        "responses": {
          "200": {
            "description": "SchemaDetail",
            "schema": {
              "$ref": "#/definitions/SchemaDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Update - single",
        "description": "Updates an existing schema.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_Update",
        "parameters": [
          {
            "type": "string",
            "name": "schemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          },
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaUpdateRequest"
            },
            "x-nullable": true,
            "description": "The schema update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "404": {
            "description": "Schema with this id could not be found",
            "schema": {
              "$ref": "#/definitions/SchemaNotFoundException"
            },
            "x-nullable": false
          },
          "400": {
            "description": "Argument must not be null\nor\nThe validation exception of schema creation\nor\nSchema cannot have cyclic dependencies",
            "schema": {
              "$ref": "#/definitions/PictureparkBusinessException"
            },
            "x-nullable": false,
            "x-expectedSchemas": [
              {
                "description": "Argument must not be null",
                "schema": {
                  "$ref": "#/definitions/PictureparkArgumentNullException"
                }
              },
              {
                "description": "The validation exception of schema creation",
                "schema": {
                  "$ref": "#/definitions/SchemaValidationException"
                }
              },
              {
                "description": "Schema cannot have cyclic dependencies",
                "schema": {
                  "$ref": "#/definitions/SchemaCyclicDependencyException"
                }
              }
            ]
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Schema"
        ],
        "summary": "Delete - single",
        "description": "Delete a single schemas. \nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "schemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "404": {
            "description": "Schema with this id could not be found",
            "schema": {
              "$ref": "#/definitions/SchemaNotFoundException"
            },
            "x-nullable": false
          },
          "400": {
            "description": "Argument must not be null\nor\nSchema is used in other entites and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/PictureparkBusinessException"
            },
            "x-nullable": false,
            "x-expectedSchemas": [
              {
                "description": "Argument must not be null",
                "schema": {
                  "$ref": "#/definitions/PictureparkArgumentNullException"
                }
              },
              {
                "description": "Schema is used in other entites and cannot be deleted",
                "schema": {
                  "$ref": "#/definitions/SchemaInUseException"
                }
              }
            ]
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/schemas": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get - many",
        "description": "Gets the schema detail informations by given schema ids.",
        "operationId": "Schema_GetMany",
        "parameters": [
          {
            "type": "array",
            "name": "ids",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma separated list of schema ids",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SchemaDetail",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchemaDetail"
              }
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Create - single",
        "description": "Create a new schema.\nThe operation is executed asynchronous and is not awaited. Call [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion) to wait for the process to finish.",
        "operationId": "Schema_Create",
        "parameters": [
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaCreateRequest"
            },
            "x-nullable": true,
            "description": "The schema create request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BusinessProcess"
            },
            "x-nullable": false
          },
          "400": {
            "description": "Schema with this name already exists\nor\nArgument must not be null\nor\nThe validation exception of schema creation\nor\nSchema cannot have cyclic dependencies",
            "schema": {
              "$ref": "#/definitions/PictureparkBusinessException"
            },
            "x-nullable": false,
            "x-expectedSchemas": [
              {
                "description": "Schema with this name already exists",
                "schema": {
                  "$ref": "#/definitions/DuplicateSchemaException"
                }
              },
              {
                "description": "Argument must not be null",
                "schema": {
                  "$ref": "#/definitions/PictureparkArgumentNullException"
                }
              },
              {
                "description": "The validation exception of schema creation",
                "schema": {
                  "$ref": "#/definitions/SchemaValidationException"
                }
              },
              {
                "description": "Schema cannot have cyclic dependencies",
                "schema": {
                  "$ref": "#/definitions/SchemaCyclicDependencyException"
                }
              }
            ]
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_write"
            ]
          }
        ]
      }
    },
    "/v1/schemas/search": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Search",
        "description": "Searches schemas as specified in the search request.",
        "operationId": "Schema_Search",
        "parameters": [
          {
            "name": "schemaSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaSearchRequest"
            },
            "x-nullable": true,
            "description": "The schema search request."
          }
        ],
        "responses": {
          "200": {
            "description": "Schema result set.",
            "schema": {
              "$ref": "#/definitions/SchemaSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/schemas/{schemaId}/exists": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Exists",
        "description": "Checks if the schema and optionally the schema's field already exists within this schema.",
        "operationId": "Schema_Exists",
        "parameters": [
          {
            "type": "string",
            "name": "schemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          },
          {
            "type": "string",
            "name": "fieldId",
            "in": "query",
            "x-nullable": true,
            "description": "The optional field id."
          }
        ],
        "responses": {
          "200": {
            "description": "ExistsResponse",
            "schema": {
              "$ref": "#/definitions/ExistsResponse"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "schema_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/contentPermissionSets/search": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Search Content Permissions",
        "description": "Searches content permission sets as specified in the search request.",
        "operationId": "Permission_SearchContentPermissionSets",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchRequest"
            },
            "x-nullable": true,
            "description": "The permission search request."
          }
        ],
        "responses": {
          "200": {
            "description": "PermissionSetSearchResult",
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/contentPermissionSets/{permissionSetId}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Content Permission - single",
        "description": "Gets the content permission set detail information by the content permission set id.",
        "operationId": "Permission_GetContentPermissionSet",
        "parameters": [
          {
            "type": "string",
            "name": "permissionSetId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content permission set id."
          }
        ],
        "responses": {
          "200": {
            "description": "ContentPermissionSetDetail",
            "schema": {
              "$ref": "#/definitions/ContentPermissionSetDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/schemaPermissionSets/search": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Search Schema PermissionSets",
        "description": "Searches schema permission sets as specified in the search request.",
        "operationId": "Permission_SearchSchemaPermissionSets",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchRequest"
            },
            "x-nullable": true,
            "description": "The permission search request."
          }
        ],
        "responses": {
          "200": {
            "description": "PermissionSetSearchResult",
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/schemaPermissionSets/{permissionSetId}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Schema PermissionSets - single",
        "description": "Gets the schema permission set detail information by the schema permission set id.",
        "operationId": "Permission_GetSchemaPermissionSet",
        "parameters": [
          {
            "type": "string",
            "name": "permissionSetId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema permission set id."
          }
        ],
        "responses": {
          "200": {
            "description": "SchemaPermissionSetDetail",
            "schema": {
              "$ref": "#/definitions/SchemaPermissionSetDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/userPermissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get User rights",
        "description": "Get all UserRights the current user has",
        "operationId": "Permission_GetUserRights",
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of user permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRight"
              }
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/permission/userPermissions/{userRight}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Has UserRight",
        "description": "Validates if the User has a given UserRight",
        "operationId": "Permission_HasUserRight",
        "parameters": [
          {
            "type": "string",
            "name": "userRight",
            "in": "path",
            "required": true,
            "x-schema": {
              "$ref": "#/definitions/UserRight"
            },
            "x-nullable": false,
            "description": "The UserRight to validate",
            "enum": [
              "ManageContent",
              "ManageSharings",
              "ManageDrives",
              "ManageTransfer",
              "ManageChannels",
              "ManageSchemas",
              "ManageUsers",
              "ManageUserRoles",
              "ManagePermissions",
              "ManageSearchIndexes",
              "ManageRecipients",
              "ManageCollections",
              "ManageListItems",
              "ManageServiceProviders",
              "ManageEmbeds",
              "ManageTemplates"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean - user has permission",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "permission_read"
            ]
          }
        ]
      }
    },
    "/v1/publicAccess/version": {
      "get": {
        "tags": [
          "PublicAccess"
        ],
        "summary": "Get Version",
        "operationId": "PublicAccess_GetVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "VersionInfo",
            "schema": {
              "$ref": "#/definitions/VersionInfo"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/publicAccess/shares/{token}": {
      "get": {
        "tags": [
          "PublicAccess"
        ],
        "summary": "Get Share",
        "operationId": "PublicAccess_GetShare",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The token"
          }
        ],
        "responses": {
          "200": {
            "description": "ShareBaseDetail",
            "schema": {
              "$ref": "#/definitions/ShareDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/shares/{id}": {
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Get - single",
        "description": "Get share by id (basic or embed)",
        "operationId": "Share_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "Share Id (not token, use PublicAccess to get share by token)"
          }
        ],
        "responses": {
          "200": {
            "description": "Polymorph share",
            "schema": {
              "$ref": "#/definitions/ShareDetail"
            },
            "x-nullable": false
          },
          "404": {
            "description": "Submited share could not be found",
            "schema": {
              "$ref": "#/definitions/ShareNotFoundException"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Share"
        ],
        "summary": "Update - single",
        "description": "Updates a single share.",
        "operationId": "Share_Update",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The share id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareBaseUpdateRequest"
            },
            "x-nullable": true,
            "description": "The share update request."
          }
        ],
        "responses": {
          "200": {
            "description": "Share",
            "schema": {
              "$ref": "#/definitions/ShareDetail"
            },
            "x-nullable": false
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitTimeoutException"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/shares/search": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Search",
        "description": "Search own shares",
        "operationId": "Share_Search",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareSearchRequest"
            },
            "x-nullable": true,
            "description": "Search request"
          }
        ],
        "responses": {
          "200": {
            "description": "Share search result",
            "schema": {
              "$ref": "#/definitions/ShareSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      }
    },
    "/v1/shares/aggregate": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Aggregate",
        "description": "Aggregates own shares",
        "operationId": "Share_Aggregate",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareAggregationRequest"
            },
            "x-nullable": true,
            "description": "Aggregation request"
          }
        ],
        "responses": {
          "200": {
            "description": "AggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_read"
            ]
          }
        ]
      }
    },
    "/v1/shares": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Create - single",
        "description": "Create a new share (basic or embed).",
        "operationId": "Share_Create",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareBaseCreateRequest"
            },
            "x-nullable": true,
            "description": "Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest"
          }
        ],
        "responses": {
          "404": {
            "description": "Submited content could not be found",
            "schema": {
              "$ref": "#/definitions/ContentNotFoundException"
            },
            "x-nullable": true
          },
          "403": {
            "description": "No permission to share",
            "schema": {
              "$ref": "#/definitions/PermissionException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "Create result",
            "schema": {
              "$ref": "#/definitions/CreateShareResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/shares/many": {
      "delete": {
        "tags": [
          "Share"
        ],
        "summary": "Delete - many",
        "description": "Deletes multiple shares. Returnes a bulk reponse with information about successful and failed rows.",
        "operationId": "Share_DeleteMany",
        "parameters": [
          {
            "type": "array",
            "name": "ids",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "A list of shareIds to delete.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcess",
            "schema": {
              "$ref": "#/definitions/BulkResponse"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "share_write"
            ]
          }
        ]
      }
    },
    "/v1/serviceProviders/{serviceProviderId}/configuration": {
      "get": {
        "tags": [
          "ServiceProvider"
        ],
        "summary": "Get configuration",
        "description": "Gets the customer configuration of a specific service provider instance.",
        "operationId": "ServiceProvider_GetConfiguration",
        "parameters": [
          {
            "type": "string",
            "name": "serviceProviderId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerServiceProviderConfiguration"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "serviceprovider_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ServiceProvider"
        ],
        "summary": "Update configuration",
        "description": "Updates the customer configuration of a specific service provider instance.",
        "operationId": "ServiceProvider_UpdateConfiguration",
        "parameters": [
          {
            "type": "string",
            "name": "serviceProviderId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProviderConfigurationUpdateRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerServiceProviderConfiguration"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "serviceprovider_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/{transferId}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get Transferdetail",
        "operationId": "Transfer_Get",
        "parameters": [
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The tranfer id"
          }
        ],
        "responses": {
          "200": {
            "description": "TransferDetail",
            "schema": {
              "$ref": "#/definitions/TransferDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Transfer"
        ],
        "summary": "Delete Transfer",
        "operationId": "Transfer_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The tranfer id"
          }
        ],
        "responses": {
          "204": {
            "description": "Transfer"
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Search ",
        "operationId": "Transfer_Search",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferSearchRequest"
            },
            "x-nullable": true,
            "description": "The transfer search request"
          }
        ],
        "responses": {
          "200": {
            "description": "TransferSearchResult",
            "schema": {
              "$ref": "#/definitions/TransferSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/transfers/{transferId}/cancel": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Cancels a transfer.",
        "operationId": "Transfer_CancelTransfer",
        "parameters": [
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Create Transfer",
        "operationId": "Transfer_Create",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequest"
            },
            "x-nullable": true,
            "description": "The create transfer request"
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer",
            "schema": {
              "$ref": "#/definitions/Transfer"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/files/{fileTransferId}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get File",
        "operationId": "Transfer_GetFile",
        "parameters": [
          {
            "type": "string",
            "name": "fileTransferId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The filetransfer id"
          }
        ],
        "responses": {
          "200": {
            "description": "FileTransferDetail",
            "schema": {
              "$ref": "#/definitions/FileTransferDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/transfers/files/search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Search for files",
        "operationId": "Transfer_SearchFiles",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferSearchRequest"
            },
            "x-nullable": true,
            "description": "The file transfer search request"
          }
        ],
        "responses": {
          "200": {
            "description": "FileTransferSearchResult",
            "schema": {
              "$ref": "#/definitions/FileTransferSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/transfers/files/blacklist": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get Blacklist",
        "operationId": "Transfer_GetBlacklist",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Blacklist",
            "schema": {
              "$ref": "#/definitions/Blacklist"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_read"
            ]
          }
        ]
      }
    },
    "/v1/transfers/files/delete": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Delete Files",
        "operationId": "Transfer_DeleteFiles",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferDeleteRequest"
            },
            "x-nullable": true,
            "description": "The filetransfer delete request"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/{transferId}/import": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Import transfer",
        "operationId": "Transfer_ImportTransfer",
        "parameters": [
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The tranfer id"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransfer2ContentCreateRequest"
            },
            "x-nullable": true,
            "description": "The filetransfer to content create request"
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer",
            "schema": {
              "$ref": "#/definitions/Transfer"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/{transferId}/partialImport": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Create a partial import",
        "operationId": "Transfer_PartialImport",
        "parameters": [
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The transfer id"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferPartial2ContentCreateRequest"
            },
            "x-nullable": true,
            "description": "The filetransfer partial to content create request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Transfer"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/transfers/{transferId}/files/{identifier}/upload": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Upload file",
        "operationId": "Transfer_UploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "formFile",
            "in": "formData",
            "x-nullable": true,
            "description": "Gets or sets the form file."
          },
          {
            "type": "string",
            "name": "relativePath",
            "in": "query",
            "x-nullable": true,
            "description": "Relative path of the uploading file"
          },
          {
            "type": "integer",
            "name": "chunkNumber",
            "in": "query",
            "x-nullable": false,
            "description": "Current chunk number. starts with 1",
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "currentChunkSize",
            "in": "query",
            "x-nullable": false,
            "description": "Size in bytes of the current chunk",
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "totalSize",
            "in": "query",
            "x-nullable": false,
            "description": "Total size in bytes of the uploading file",
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "totalChunks",
            "in": "query",
            "x-nullable": false,
            "description": "Total chunks of the uploading file",
            "format": "int64"
          },
          {
            "type": "string",
            "name": "transferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "identifier",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "transfer_write"
            ]
          }
        ]
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get by id",
        "operationId": "User_Get",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The user id"
          }
        ],
        "responses": {
          "200": {
            "description": "UserDetail",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/users/search": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Search for users",
        "operationId": "User_Search",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSearchRequest"
            },
            "x-nullable": true,
            "description": "The user search request"
          }
        ],
        "responses": {
          "200": {
            "description": "UserSearchResult",
            "schema": {
              "$ref": "#/definitions/UserSearchResult"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/users/owner/{tokenId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get by owner token",
        "operationId": "User_GetByOwnerToken",
        "parameters": [
          {
            "type": "string",
            "name": "tokenId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The token id"
          }
        ],
        "responses": {
          "200": {
            "description": "UserDetail",
            "schema": {
              "$ref": "#/definitions/UserDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/users/channels": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get list of channels",
        "operationId": "User_GetChannels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "user_read"
            ]
          }
        ]
      }
    },
    "/v1/outputs": {
      "post": {
        "tags": [
          "Output"
        ],
        "summary": "Get outputs by contentIds",
        "description": "Gets output documents related for given content ids",
        "operationId": "Output_GetByContentIds",
        "parameters": [
          {
            "name": "contentsByIdsRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentsByIdsRequest"
            },
            "x-nullable": true,
            "description": "Contains the list of contentIds for which the outputs are requested"
          }
        ],
        "responses": {
          "200": {
            "description": "The Result containing a list of OutputDetail's",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputDetail"
              }
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "output_read",
              "read"
            ]
          }
        ]
      }
    },
    "/v1/outputs/{outputId}": {
      "get": {
        "tags": [
          "Output"
        ],
        "summary": "Get - single",
        "description": "Gets a output document by id.",
        "operationId": "Output_Get",
        "parameters": [
          {
            "type": "string",
            "name": "outputId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The output id."
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OutputNotFoundException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "OutputDetail",
            "schema": {
              "$ref": "#/definitions/OutputDetail"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "output_read",
              "read"
            ]
          }
        ]
      }
    },
    "/v1/profile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get",
        "description": "Get profile of currently logged in user",
        "operationId": "Profile_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "UserProfile",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "profile_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update",
        "description": "Updates profile of currently logged in user",
        "operationId": "Profile_Update",
        "parameters": [
          {
            "name": "profile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "UserProfile",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            },
            "x-nullable": false
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "Bearer": [
              "profile_write"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "DisplayPatternType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Thumbnail",
        "List",
        "Detail",
        "Name"
      ],
      "enum": [
        "Thumbnail",
        "List",
        "Detail",
        "Name"
      ]
    },
    "ContentNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PictureparkBusinessException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customerId": {
          "type": "string"
        },
        "customerAlias": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkException": {
      "type": "object",
      "discriminator": "kind",
      "additionalProperties": false,
      "required": [
        "traceLevel",
        "httpStatusCode",
        "kind"
      ],
      "properties": {
        "traceLevel": {
          "$ref": "#/definitions/TraceLevel"
        },
        "traceId": {
          "type": "string"
        },
        "traceJobId": {
          "type": "string"
        },
        "httpStatusCode": {
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Exception"
        }
      ]
    },
    "TraceLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Critical",
        "Error",
        "Warning",
        "Information",
        "Verbose"
      ],
      "enum": [
        "Critical",
        "Error",
        "Warning",
        "Information",
        "Verbose"
      ]
    },
    "Exception": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "message": {
          "type": "string"
        },
        "innerException": {
          "$ref": "#/definitions/Exception"
        },
        "stackTrace": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "PictureparkApplicationException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PictureparkArgumentNullException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "argumentName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ContentsNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessDefinitionCreateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "processDefinitionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessDefinitionNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "processDefinitionId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "businessProcessId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessWaitTimeoutException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "businessProcessId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "CustomerHostNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hostName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "CustomerNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "DocumentNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "documentId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DocumentVersionNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "documentId": {
          "type": "string"
        },
        "documentVersion": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DriveRequestException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateRightException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "permissionSetId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateDocumentException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "documentId": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateAggregatorException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "aggregatorName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "FailedToLockException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "resourceId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "IndexException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "indexName": {
          "type": "string"
        },
        "debugInformation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidArgumentException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "argumentName": {
          "type": "string"
        },
        "argumentValue": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidCustomerException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkInvalidMetadataException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "metadataErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataError"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "MetadataError": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "lineNumber",
        "linePosition"
      ],
      "properties": {
        "errorType": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "linePosition": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "schemaId": {
          "type": "string"
        }
      }
    },
    "InvalidStateTransitionException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "transition": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InvalidStateException"
        }
      ]
    },
    "InvalidStateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "resourceId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidUserOrPasswordException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkMappingException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "indexName": {
          "type": "string"
        },
        "debugInformation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "MessagePerformerTaskCanceledException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "messageId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "NotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "reference": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ObjectStoreException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "rowErrorMessages": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ObjectStoreResponseException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "rowErrorMessages": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PictureparkOperationCanceledException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "OperationTimeoutException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "OutputNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string"
        },
        "outputFormatId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PermissionException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "permission": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "QueryException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "debugInformation": {
          "type": "string"
        },
        "serverError": {
          "$ref": "#/definitions/StorageServerError"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "StorageServerError": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "status"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/StorageError"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "StorageError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "index": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "rootCause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageRootCause"
          }
        },
        "causedBy": {
          "$ref": "#/definitions/StorageCausedBy"
        }
      }
    },
    "StorageRootCause": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "index": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "StorageCausedBy": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "reason": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "innerCausedBy": {
          "$ref": "#/definitions/StorageCausedBy"
        }
      }
    },
    "RenderingException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "RenderingJobItemNotSetException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ServiceProviderCreateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userId": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "virtualHost": {
          "type": "string"
        },
        "detailErrorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "ServiceProviderDeleteException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "serviceProviderId": {
          "type": "string"
        },
        "detailedErrorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "ServiceProviderNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "missingServiceProviderId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "TokenValidationException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UnknownException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "exceptionDetail": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "missingUserId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserPermanentlyRemovedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "removedUserId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserRoleAssignedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userRoleId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserRolesRightsAssignedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentPermissionSetId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ContentDetail": {
      "type": "object",
      "description": "A content detail.",
      "additionalProperties": false,
      "required": [
        "contentType",
        "trashed"
      ],
      "properties": {
        "audit": {
          "description": "Audit data with information regarding document creation and modification.",
          "allOf": [
            {
              "$ref": "#/definitions/UserAudit"
            }
          ]
        },
        "content": {
          "description": "The content data"
        },
        "contentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        },
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the content schema"
        },
        "contentType": {
          "description": "The type of content",
          "allOf": [
            {
              "$ref": "#/definitions/ContentType"
            }
          ]
        },
        "displayValues": {
          "description": "Contains language specific display values, rendered according to the content schema's\n             display pattern configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/DisplayValueDictionary"
            }
          ]
        },
        "id": {
          "type": "string",
          "description": "The content id."
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional list of layer schemas ids",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "The metadata dictionary",
          "allOf": [
            {
              "$ref": "#/definitions/DataDictionary"
            }
          ]
        },
        "outputs": {
          "type": "array",
          "description": "A list of rendering ouputs for underlying digital file.",
          "items": {
            "$ref": "#/definitions/Output"
          }
        },
        "ownerTokenId": {
          "type": "string",
          "description": "The id of a owner token. Defines the content owner."
        },
        "trashed": {
          "type": "boolean",
          "description": "The trashed flag."
        }
      }
    },
    "UserAudit": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "creationDate",
        "modificationDate"
      ],
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdByUser": {
          "type": "string"
        },
        "modifiedByUser": {
          "type": "string"
        }
      }
    },
    "ContentType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Unknown",
        "Bitmap",
        "VectorGraphic",
        "RawImage",
        "InterchangeDocument",
        "WordProcessingDocument",
        "TextDocument",
        "DesktopPublishingDocument",
        "Presentation",
        "Spreadsheet",
        "Archive",
        "Audio",
        "Video",
        "Font",
        "Multimedia",
        "Application",
        "SourceCode",
        "Database",
        "Cad",
        "Model3d",
        "ContentItem"
      ],
      "enum": [
        "Unknown",
        "Bitmap",
        "VectorGraphic",
        "RawImage",
        "InterchangeDocument",
        "WordProcessingDocument",
        "TextDocument",
        "DesktopPublishingDocument",
        "Presentation",
        "Spreadsheet",
        "Archive",
        "Audio",
        "Video",
        "Font",
        "Multimedia",
        "Application",
        "SourceCode",
        "Database",
        "Cad",
        "Model3d",
        "ContentItem"
      ]
    },
    "DisplayValueDictionary": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "DataDictionary": {
      "type": "object",
      "description": "A custom implementation of Dictionary{string, object}",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {}
        }
      ]
    },
    "Output": {
      "type": "object",
      "discriminator": "kind",
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "outputFormatId": {
          "type": "string"
        },
        "contentId": {
          "type": "string"
        },
        "detail": {
          "$ref": "#/definitions/OutputDetailBase"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "OutputDetailBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "fileExtension": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "fileSizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "sha1Hash": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "OutputDetailImage": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "width",
        "height"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailAudio": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailVideo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "durationInSeconds",
        "width",
        "height"
      ],
      "properties": {
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "sprites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sprite"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "Sprite": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "width",
        "height",
        "y",
        "x",
        "start",
        "end"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        },
        "x": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "string",
          "format": "time-span"
        },
        "end": {
          "type": "string",
          "format": "time-span"
        }
      }
    },
    "OutputDetailDocument": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "pageCount"
      ],
      "properties": {
        "pageCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailDefault": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetail": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/Output"
        }
      ]
    },
    "ContentSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "lifeCycleFilter",
        "brokenDependenciesFilter",
        "searchType",
        "debugMode"
      ],
      "properties": {
        "channelIds": {
          "type": "array",
          "description": "Limits the simple search fields to the fields available in the specified channel.",
          "items": {
            "type": "string"
          }
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "displayPatternIds": {
          "type": "array",
          "description": "Limits the display values included in the search response. Defaults to all display values.",
          "items": {
            "type": "string"
          }
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "collectionId": {
          "type": "string",
          "description": "The collection id."
        },
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied in the specified order.",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "lifeCycleFilter": {
          "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
          "allOf": [
            {
              "$ref": "#/definitions/LifeCycleFilter"
            }
          ]
        },
        "brokenDependenciesFilter": {
          "description": "Filter the returned contents that have or not have broken references",
          "allOf": [
            {
              "$ref": "#/definitions/BrokenDependenciesFilter"
            }
          ]
        },
        "rightsFilter": {
          "type": "array",
          "description": "Limits the content document result set to specific ContentRights the user has",
          "items": {
            "$ref": "#/definitions/ContentRight"
          }
        },
        "searchType": {
          "description": "Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/ContentSearchType"
            }
          ]
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        }
      }
    },
    "SearchBehaviour": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "DropInvalidCharactersOnFailure",
        "WildcardOnSingleTerm"
      ],
      "enum": [
        "DropInvalidCharactersOnFailure",
        "WildcardOnSingleTerm"
      ]
    },
    "SortInfo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "direction"
      ],
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to sort on."
        },
        "direction": {
          "description": "The sort direction (Asc/Desc).",
          "allOf": [
            {
              "$ref": "#/definitions/SortDirection"
            }
          ]
        }
      }
    },
    "SortDirection": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "Asc",
        "Desc"
      ]
    },
    "FilterBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "The FilterBase is the base class for all filters.",
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "type": "string"
        }
      }
    },
    "AndFilter": {
      "type": "object",
      "description": "The AndFilter&gt; is a compound filter and returns documents that match all of the specified filters.",
      "additionalProperties": false,
      "properties": {
        "filters": {
          "type": "array",
          "description": "Accepts all filters.",
          "items": {
            "$ref": "#/definitions/FilterBase"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "OrFilter": {
      "type": "object",
      "description": "The OrFilter is a compound filter and returns documents that match any of the specified filters.",
      "additionalProperties": false,
      "properties": {
        "filters": {
          "type": "array",
          "description": "Accepts all filters.",
          "items": {
            "$ref": "#/definitions/FilterBase"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NotFilter": {
      "type": "object",
      "description": "The NotFilter is a compound filter and returns documents that do not match the specified filter.",
      "additionalProperties": false,
      "properties": {
        "filter": {
          "description": "Limits the result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "DateRangeFilter": {
      "type": "object",
      "description": "The DateRangeFilter returns documents with fields that have date values within a certain range.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "range": {
          "description": "The date range. Supported pattern: now(+-)(int)(YMDHm).",
          "allOf": [
            {
              "$ref": "#/definitions/DateRange"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "DateRange": {
      "type": "object",
      "description": "The date range class used in aggregators and filters.",
      "additionalProperties": false,
      "properties": {
        "names": {
          "description": "Tranlsated range names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "from": {
          "type": "string",
          "description": "The from value can be a datetime string or a pattern now(+-)(int)(YMDHm)."
        },
        "to": {
          "type": "string",
          "description": "The to value can be a datetime string or a pattern now(+-)(int)(YMDHm)."
        }
      }
    },
    "TranslatedStringDictionary": {
      "type": "object",
      "description": "A custom dictionary type to distinguish language specific class properties.",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "ExistsFilter": {
      "type": "object",
      "description": "The ExistsFilter returns documents that have at least one non-null value in the original field.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "GeoBoundingBoxFilter": {
      "type": "object",
      "description": "The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "topLeft": {
          "description": "The top left longitude/latitude configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/GeoLocation"
            }
          ]
        },
        "bottomRight": {
          "description": "The bottom right longitude/latitude configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/GeoLocation"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "GeoLocation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "lat",
        "lon"
      ],
      "properties": {
        "lat": {
          "type": "number",
          "format": "double"
        },
        "lon": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GeoDistanceFilter": {
      "type": "object",
      "description": "The GeoDistanceFilter returns documents that include only hits that exists within a specific distance from a geo point.",
      "additionalProperties": false,
      "required": [
        "distance"
      ],
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "location": {
          "description": "The longitude/latitude configuration for the point of origin.",
          "allOf": [
            {
              "$ref": "#/definitions/GeoLocation"
            }
          ]
        },
        "distance": {
          "type": "number",
          "description": "The range distance in meters.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NestedFilter": {
      "type": "object",
      "description": "The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "description": "The path pointing to the nested object."
        },
        "filter": {
          "description": "Limits the result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NumericRangeFilter": {
      "type": "object",
      "description": "The NumericRangeFilter returns documents with fields that have numeric values within a certain range.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "range": {
          "description": "The numeric range with from and to properties.",
          "allOf": [
            {
              "$ref": "#/definitions/NumericRange"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NumericRange": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "names": {
          "description": "Tranlsated range names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "from": {
          "type": "number",
          "description": "The from value.",
          "format": "double"
        },
        "to": {
          "type": "number",
          "description": "The to value.",
          "format": "double"
        }
      }
    },
    "PrefixFilter": {
      "type": "object",
      "description": "The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "prefix": {
          "type": "string",
          "description": "The prefix term to filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "TermFilter": {
      "type": "object",
      "description": "The TermFilter returns documents that contain the exact term specified in the inverted index.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "term": {
          "type": "string",
          "description": "The term to filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "TermsFilter": {
      "type": "object",
      "description": "The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "terms": {
          "type": "array",
          "description": "A list of OR combined terms.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "AggregationFilter": {
      "type": "object",
      "description": "An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.",
      "additionalProperties": false,
      "properties": {
        "aggregationName": {
          "type": "string",
          "description": "The name of the aggregation this filter is connected to."
        },
        "filter": {
          "description": "The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter and GeoDistanceFilter.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "temporaryAggregatorRequestId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "ChildFilter": {
      "type": "object",
      "description": "The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.",
      "additionalProperties": false,
      "properties": {
        "childType": {
          "type": "string",
          "description": "The elastic search index type to filter as a child."
        },
        "filter": {
          "description": "The filter to apply on the child entity. It accepts all filters.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "ParentFilter": {
      "type": "object",
      "description": "The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.",
      "additionalProperties": false,
      "properties": {
        "parentType": {
          "type": "string",
          "description": "The elastic search index type to filter as a parent."
        },
        "filter": {
          "description": "The filter to apply on the child entity. It accepts all filters.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "LifeCycleFilter": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ActiveOnly",
        "All",
        "InactiveOnly",
        "ActiveInactiveOnly"
      ],
      "enum": [
        "ActiveOnly",
        "All",
        "InactiveOnly",
        "ActiveInactiveOnly"
      ]
    },
    "BrokenDependenciesFilter": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "All",
        "NotBrokenOnly",
        "BrokenOnly"
      ],
      "enum": [
        "All",
        "NotBrokenOnly",
        "BrokenOnly"
      ]
    },
    "ContentRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "View",
        "AccessOriginal",
        "Edit",
        "Update",
        "Manage",
        "Trash"
      ],
      "enum": [
        "View",
        "AccessOriginal",
        "Edit",
        "Update",
        "Manage",
        "Trash"
      ]
    },
    "ContentSearchType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Metadata",
        "FullText",
        "MetadataAndFullText"
      ],
      "enum": [
        "Metadata",
        "FullText",
        "MetadataAndFullText"
      ]
    },
    "ContentSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfContent"
        }
      ]
    },
    "SearchBehaviourBaseResultOfContent": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfContent"
        }
      ]
    },
    "BaseResultOfContent": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "Content": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content."
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with schema type layer.",
          "items": {
            "type": "string"
          }
        },
        "displayValues": {
          "type": "object",
          "description": "Contains display values of the specified language, rendered according to the content schema's display pattern configuration.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "brokenReferenceIds": {
          "type": "array",
          "description": "All the ids of the broken references (tagboxes)",
          "items": {
            "type": "string"
          }
        },
        "brokenIndirectReferenceIds": {
          "type": "array",
          "description": "All the ids of the broken indirect references (tagbox that has a property that reference a broken tagbox)",
          "items": {
            "type": "string"
          }
        },
        "brokenRelationIds": {
          "type": "array",
          "description": "All the ids of the broken relations",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueryDebugInformation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "general": {
          "type": "string"
        },
        "auditTrail": {
          "type": "string"
        },
        "request": {},
        "response": {}
      }
    },
    "ContentAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "lifeCycleFilter",
        "brokenDependenciesFilter",
        "searchType"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "aggregationFilters": {
          "type": "array",
          "description": "Special filters used to filter down on a specific aggregated value.",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "aggregators": {
          "type": "array",
          "description": "Defines the aggregation resultset.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "channelId": {
          "type": "string",
          "description": "Limits the simple search fields to the fields available in the specified channel."
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages in configured within the customer's language configuration.",
          "items": {
            "type": "string"
          }
        },
        "collectionId": {
          "type": "string",
          "description": "The collection id."
        },
        "lifeCycleFilter": {
          "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
          "allOf": [
            {
              "$ref": "#/definitions/LifeCycleFilter"
            }
          ]
        },
        "brokenDependenciesFilter": {
          "description": "Filter the content document result set to those that have or not have broken references",
          "allOf": [
            {
              "$ref": "#/definitions/BrokenDependenciesFilter"
            }
          ]
        },
        "searchType": {
          "description": "Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/ContentSearchType"
            }
          ]
        }
      }
    },
    "AggregatorBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "The AggregatorBase is the base class for all aggregators.",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The slug name of the aggregation. Must be unique per aggregation request."
        },
        "names": {
          "description": "The translated names of the aggregation.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "aggregators": {
          "type": "array",
          "description": "An optional aggregator list for nested aggregations.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "DateRangeAggregator": {
      "type": "object",
      "description": "The DateRangeAggregator is a multi-bucket range aggregation dedicated for date values. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "ranges": {
          "type": "array",
          "description": "A list of date ranges. Supported pattern: now(+-)(int)(YMDHm).",
          "items": {
            "$ref": "#/definitions/DateRange"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "FilterAggregator": {
      "type": "object",
      "description": "The FilterAggregator is a single bucket aggregation of documents that match a specified filter.",
      "additionalProperties": false,
      "properties": {
        "filter": {
          "description": "Limits the result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "GeoDistanceAggregator": {
      "type": "object",
      "description": "The GeoDistanceAggregator is a multi-bucket range aggregation that works on geo_point fields. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "location": {
          "description": "The latitude/logitude configuration for the point of origin.",
          "allOf": [
            {
              "$ref": "#/definitions/GeoLocation"
            }
          ]
        },
        "ranges": {
          "type": "array",
          "description": "A list of numeric ranges in meter.",
          "items": {
            "$ref": "#/definitions/GeoDistance"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "GeoDistance": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "distance"
      ],
      "properties": {
        "names": {
          "description": "Tranlsated range names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "distance": {
          "type": "number",
          "description": "The to value.",
          "format": "double"
        }
      }
    },
    "NestedAggregator": {
      "type": "object",
      "description": "The NestedAggregator is a special single bucket aggregation that enables aggregating nested documents.",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "description": "The path pointing to the nested object."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "NumericRangeAggregator": {
      "type": "object",
      "description": "The NumericRangeAggregator is a multi-bucket range aggregation. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "ranges": {
          "type": "array",
          "description": "A list of numeric ranges.",
          "items": {
            "$ref": "#/definitions/NumericRange"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "TermsAggregator": {
      "type": "object",
      "description": "The TermsAggregator is a multi-bucket value aggregation where buckets are dynamically built - one per unique value.",
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string",
          "description": "The elastic search index field (not analyzed) to execute the aggregation on."
        },
        "size": {
          "type": "integer",
          "description": "The size parameter can be set to define how many term buckets should be returned out of the overall terms list.",
          "format": "int32"
        },
        "includes": {
          "type": "array",
          "description": "Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
          "items": {
            "type": "string"
          }
        },
        "excludes": {
          "type": "array",
          "description": "Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "TermsRelationAggregator": {
      "type": "object",
      "description": "The TermsRelationAggregator is derived from TermsAggregator and used for aggregations on relation item ids.",
      "additionalProperties": false,
      "required": [
        "documentType"
      ],
      "properties": {
        "documentType": {
          "description": "When aggregating on relations ids the DocumentType is needed to resolve the target item translation.",
          "allOf": [
            {
              "$ref": "#/definitions/TermsRelationAggregatorDocumentType"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TermsAggregator"
        }
      ]
    },
    "TermsRelationAggregatorDocumentType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "ListItem",
        "Schema",
        "User",
        "ContentPermissionSet",
        "Owner"
      ],
      "enum": [
        "Content",
        "ListItem",
        "Schema",
        "User",
        "ContentPermissionSet",
        "Owner"
      ]
    },
    "TermsEnumAggregator": {
      "type": "object",
      "description": "The TermsRelationAggregator is derived from the TermsAggregator and used for aggregations on indexed enum values.",
      "additionalProperties": false,
      "properties": {
        "enumType": {
          "type": "string",
          "description": "When aggregating on enum fields EnumType is needed to resolve the enum translation."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TermsAggregator"
        }
      ]
    },
    "ObjectAggregationResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds",
        "isSearchStringRewritten"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        },
        "aggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        },
        "searchString": {
          "type": "string",
          "description": "The search string used to query the data"
        },
        "isSearchStringRewritten": {
          "type": "boolean",
          "description": "Flag to notify if the SearchString was modified compared to the original requested one"
        }
      }
    },
    "AggregationResult": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "sumOtherDocCount": {
          "type": "integer",
          "format": "int64"
        },
        "temporaryRequestId": {
          "type": "string"
        },
        "aggregationResultItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResultItem"
          }
        }
      }
    },
    "AggregationResultItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "count",
        "active"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "$ref": "#/definitions/AggregationFilter"
        },
        "active": {
          "type": "boolean"
        },
        "aggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        }
      }
    },
    "ContentDownloadLinkCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentDownloadRequestItem"
          }
        }
      }
    },
    "ContentDownloadRequestItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string"
        },
        "outputFormatId": {
          "type": "string"
        }
      }
    },
    "DownloadLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "downloadToken": {
          "type": "string"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "ThumbnailSize": {
      "type": "string",
      "description": "Values that represent thumbnail sizes.",
      "x-enumNames": [
        "Small",
        "Medium",
        "Large"
      ],
      "enum": [
        "Small",
        "Medium",
        "Large"
      ]
    },
    "ContentCreateRequest": {
      "type": "object",
      "description": "A request structure for creating a content document.",
      "additionalProperties": false,
      "properties": {
        "contentSchemaId": {
          "type": "string",
          "description": "The id of a schema with schema type content."
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with schema type layer.",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "description": "The content data of the content document."
        },
        "metadata": {
          "description": "The layer metadata of the content document.",
          "allOf": [
            {
              "$ref": "#/definitions/DataDictionary"
            }
          ]
        },
        "contentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. ",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentCreateManyRequest": {
      "type": "object",
      "description": "A request structure for creating multiple content documents.",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        },
        "requests": {
          "type": "array",
          "description": "Create requests",
          "items": {
            "$ref": "#/definitions/ContentCreateRequest"
          }
        }
      }
    },
    "BusinessProcess": {
      "type": "object",
      "discriminator": "kind",
      "additionalProperties": false,
      "required": [
        "supportsCancellation",
        "businessProcessScope",
        "lifeCycle",
        "startDate",
        "endDate",
        "finished",
        "kind"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "referenceId": {
          "type": "string"
        },
        "referenceDocType": {
          "type": "string"
        },
        "supportsCancellation": {
          "type": "boolean"
        },
        "businessProcessScope": {
          "$ref": "#/definitions/BusinessProcessScope"
        },
        "lifeCycle": {
          "$ref": "#/definitions/BusinessProcessLifeCycle"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "finished": {
          "type": "boolean"
        },
        "stateHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessProcessStateItem"
          }
        },
        "currentState": {
          "type": "string"
        },
        "processDefinitionName": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "BusinessProcessScope": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "System",
        "User"
      ],
      "enum": [
        "System",
        "User"
      ]
    },
    "BusinessProcessLifeCycle": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "InProgress",
        "Succeeded",
        "Cancelled",
        "CancellationInProgress",
        "Failed"
      ],
      "enum": [
        "Draft",
        "InProgress",
        "Succeeded",
        "Cancelled",
        "CancellationInProgress",
        "Failed"
      ]
    },
    "BusinessProcessStateItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "timestamp"
      ],
      "properties": {
        "state": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "exception": {
          "type": "string"
        },
        "traceId": {
          "type": "string"
        },
        "traceJobId": {
          "type": "string"
        }
      }
    },
    "BusinessProcessBulkResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "response": {
          "$ref": "#/definitions/BulkResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BusinessProcess"
        }
      ]
    },
    "BulkResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkResponseRow"
          }
        }
      }
    },
    "BulkResponseRow": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "version",
        "succeeded",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "error": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "succeeded": {
          "type": "boolean"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ContentDeactivateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "resolve",
        "forceReferenceRemoval"
      ],
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resolve": {
          "type": "boolean"
        },
        "displayPatternIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "forceReferenceRemoval": {
          "type": "boolean"
        }
      }
    },
    "ContentReactivateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "resolve",
        "allowMissingDependencies"
      ],
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resolve": {
          "type": "boolean"
        },
        "displayPatternIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowMissingDependencies": {
          "type": "boolean"
        }
      }
    },
    "ContentFileUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string"
        },
        "fileTransferId": {
          "type": "string"
        }
      }
    },
    "ContentMetadataUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "The content id."
        },
        "schemaIds": {
          "type": "array",
          "description": "An id list of schemas with schema type content or layer.",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "The dynamic data structure matching the field schematics of the schemas with schema type content or layer.",
          "allOf": [
            {
              "$ref": "#/definitions/DataDictionary"
            }
          ]
        }
      }
    },
    "ContentPermissionsUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string",
          "description": "The content id."
        },
        "contentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentMetadataUpdateManyRequest": {
      "type": "object",
      "description": "Update many contents metadata",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items"
        },
        "requests": {
          "type": "array",
          "description": "Update requests",
          "items": {
            "$ref": "#/definitions/ContentMetadataUpdateRequest"
          }
        }
      }
    },
    "ContentOwnershipTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string",
          "description": "The content id."
        },
        "transferUserId": {
          "type": "string",
          "description": "The id of the user to whom the content document has to be transfered to."
        }
      }
    },
    "ContentsOwnershipTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentIds": {
          "type": "array",
          "description": "The content ids.",
          "items": {
            "type": "string"
          }
        },
        "transferUserId": {
          "type": "string",
          "description": "The id of user to whom the content documents have to be transfered to."
        }
      }
    },
    "ContentFieldsUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentIds": {
          "type": "array",
          "description": "The ids of the content documents.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeRequestBase"
        }
      ]
    },
    "MetadataValuesChangeRequestBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies",
        "kind"
      ],
      "properties": {
        "changeCommands": {
          "type": "array",
          "description": "A container for all change commads.",
          "items": {
            "$ref": "#/definitions/MetadataValuesChangeCommandBase"
          }
        },
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "MetadataValuesChangeCommandBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "The base class for metadata value change commands.",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema to which the operation scope is addressed."
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "MetadataValuesSchemaUpdateCommand": {
      "type": "object",
      "description": "Updates schema values.",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.",
          "allOf": [
            {
              "$ref": "#/definitions/DataDictionary"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaUpsertCommand": {
      "type": "object",
      "description": "Adds or updates schema values.",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.",
          "allOf": [
            {
              "$ref": "#/definitions/DataDictionary"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaRemoveCommand": {
      "type": "object",
      "description": "Removes schema values.",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesFieldRemoveCommand": {
      "type": "object",
      "description": "Removes a field and its value from the schema values.",
      "additionalProperties": false,
      "properties": {
        "fieldPath": {
          "type": "string",
          "description": "The path of the field to be removed (within tha data structure), e.g. \"data.schemaId.fieldId\""
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaItemAddCommand": {
      "type": "object",
      "description": "Adds a list item id reference to a multi tagbox.",
      "additionalProperties": false,
      "properties": {
        "fieldPath": {
          "type": "string",
          "description": "The path of the field relative to the Content or Layer schema values defined by the schemaId property"
        },
        "fieldNamespace": {
          "type": "string",
          "description": "The field namespace"
        },
        "referenceId": {
          "type": "string",
          "description": "The id of the list item to be added."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaItemRemoveCommand": {
      "type": "object",
      "description": "Removes a list item id reference from a multi tagbox.",
      "additionalProperties": false,
      "properties": {
        "fieldPath": {
          "type": "string",
          "description": "The path of the field relative to the Content or Layer schema values defined by the schemaId property"
        },
        "fieldNamespace": {
          "type": "string",
          "description": "The field namespace"
        },
        "referenceId": {
          "type": "string",
          "description": "The id of the list item to be removed."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "ContentFieldsFilterUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentFilterRequest": {
          "$ref": "#/definitions/ContentFilterRequest"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeRequestBase"
        }
      ]
    },
    "ContentFilterRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "searchType",
        "lifeCycleFilter"
      ],
      "properties": {
        "channelIds": {
          "type": "array",
          "description": "Limits the simple search fields to the fields available in the specified in the channel.",
          "items": {
            "type": "string"
          }
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "searchType": {
          "description": "Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/ContentSearchType"
            }
          ]
        },
        "collectionId": {
          "type": "string",
          "description": "The collection id."
        },
        "filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "lifeCycleFilter": {
          "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
          "allOf": [
            {
              "$ref": "#/definitions/LifeCycleFilter"
            }
          ]
        },
        "rightsFilter": {
          "type": "array",
          "description": "Limits the content document result set to specific ContentRights the user has",
          "items": {
            "$ref": "#/definitions/ContentRight"
          }
        }
      }
    },
    "BusinessProcessSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit"
      ],
      "properties": {
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "$ref": "#/definitions/FilterBase"
        },
        "searchString": {
          "type": "string"
        },
        "searchBehaviours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        }
      }
    },
    "BusinessProcessSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfBusinessProcess"
        }
      ]
    },
    "SearchBehaviourBaseResultOfBusinessProcess": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfBusinessProcess"
        }
      ]
    },
    "BaseResultOfBusinessProcess": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessProcess"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "BusinessProcessWaitResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "hasStateHit",
        "hasLifeCycleHit",
        "lifeCycleHit",
        "finished"
      ],
      "properties": {
        "hasStateHit": {
          "type": "boolean"
        },
        "stateHit": {
          "type": "string"
        },
        "hasLifeCycleHit": {
          "type": "boolean"
        },
        "lifeCycleHit": {
          "$ref": "#/definitions/BusinessProcessLifeCycle"
        },
        "finished": {
          "type": "boolean"
        },
        "businessProcess": {
          "$ref": "#/definitions/BusinessProcess"
        }
      }
    },
    "BusinessProcessDetails": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "details": {
          "$ref": "#/definitions/BusinessProcessDetailsDataBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BusinessProcess"
        }
      ]
    },
    "BusinessProcessDetailsDataBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "type": "string"
        }
      }
    },
    "BusinessProcessDetailsDataBulkResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "response": {
          "$ref": "#/definitions/BulkResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BusinessProcessDetailsDataBase"
        }
      ]
    },
    "DocumentHistorySearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "from",
        "to",
        "start",
        "limit",
        "documentVersion"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "Limits the start date of the search request. Default to last 1 year.",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "description": "Limits the end date of the search request. Default to now.",
          "format": "date-time"
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "pageToken": {
          "type": "string",
          "description": "To get a large amount of data, page token returned from the response can be used to get all data."
        },
        "documentId": {
          "type": "string",
          "description": "Limits the search to a specific document id. E.g. ContentId"
        },
        "documentVersion": {
          "type": "integer",
          "description": "The document version to search. Default to -1 to not limit to a specific document version.",
          "format": "int64",
          "default": -1
        },
        "documentType": {
          "type": "string",
          "description": "Limits the search to a specifc document type."
        },
        "sort": {
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "allOf": [
            {
              "$ref": "#/definitions/SortInfo"
            }
          ]
        }
      }
    },
    "DocumentHistorySearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults",
        "elapsedMilliseconds"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentHistory"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DocumentHistory": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "documentVersion",
        "documentDate",
        "timestamp",
        "deleted",
        "action"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "documentId": {
          "type": "string"
        },
        "documentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "documentType": {
          "type": "string"
        },
        "documentTypeContract": {
          "type": "string"
        },
        "documentDate": {
          "type": "string",
          "format": "date-time"
        },
        "document": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "audit": {
          "$ref": "#/definitions/UserAuditHistory"
        },
        "deleted": {
          "type": "boolean"
        },
        "action": {
          "$ref": "#/definitions/DocumentChangeAction"
        }
      }
    },
    "UserAuditHistory": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "modificationDate"
      ],
      "properties": {
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modifiedByUser": {
          "type": "string"
        }
      }
    },
    "DocumentChangeAction": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Create",
        "Update",
        "Delete",
        "Activate",
        "Deactivate"
      ],
      "enum": [
        "Create",
        "Update",
        "Delete",
        "Activate",
        "Deactivate"
      ]
    },
    "DocumentHistoryDifference": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "oldDocumentVersion",
        "newDocumentVersion"
      ],
      "properties": {
        "documentId": {
          "type": "string"
        },
        "oldDocumentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "newDocumentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "oldValues": {},
        "newValues": {}
      }
    },
    "ListItemDetail": {
      "type": "object",
      "description": "The detail view item for the list item.",
      "additionalProperties": false,
      "properties": {
        "content": {
          "description": "The content data of the list item."
        },
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "displayValues": {
          "description": "Contains language specific display values, rendered according to the list schema's display pattern configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/DisplayValueDictionary"
            }
          ]
        },
        "id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "ListItemNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "listItemId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ListItemSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "includeAllSchemaChildren",
        "brokenDependenciesFilter",
        "includeMetadata",
        "debugMode",
        "lifeCycleFilter"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "includeAllSchemaChildren": {
          "type": "boolean",
          "description": "Broadens the search and include all schema descendant list items."
        },
        "schemaIds": {
          "type": "array",
          "description": "Limits the search to list items of the provided schemas.",
          "items": {
            "type": "string"
          }
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "displayPatternIds": {
          "type": "array",
          "description": "Limits the display values included in the search response. Defaults to all display values.",
          "items": {
            "type": "string"
          }
        },
        "brokenDependenciesFilter": {
          "description": "Filter the returned list items that have or not have broken references",
          "allOf": [
            {
              "$ref": "#/definitions/BrokenDependenciesFilter"
            }
          ]
        },
        "referencedFieldsDisplayPatternIds": {
          "type": "array",
          "description": "Define the display values included in the search response for the referenced fields. Defaults to no display value.",
          "items": {
            "type": "string"
          }
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "includeMetadata": {
          "type": "boolean",
          "description": "When set to true the content data is included in the result items."
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        },
        "lifeCycleFilter": {
          "description": "Limits the list item document result set to that life cycle state. Defaults to ActiveOnly.",
          "allOf": [
            {
              "$ref": "#/definitions/LifeCycleFilter"
            }
          ]
        }
      }
    },
    "ListItemSearchResult": {
      "type": "object",
      "description": "Encapsulates the result of a list item search.",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfListItem"
        }
      ]
    },
    "BaseResultOfListItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListItem"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "ListItem": {
      "type": "object",
      "description": "A document stored in the elastic search metadata index, with fields corresponding to the the schemantics of its underlying list schema.",
      "additionalProperties": false,
      "properties": {
        "content": {
          "description": "The content data of the list item."
        },
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "displayValues": {
          "description": "Contains language specific display values, rendered according to the list schema's display pattern configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/DisplayValueDictionary"
            }
          ]
        },
        "id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "ListItemAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "includeAllSchemaChildren",
        "brokenDependenciesFilter",
        "lifeCycleFilter"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "aggregationFilters": {
          "type": "array",
          "description": "Special filters used to filter down on a specific aggregated value.",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "aggregators": {
          "type": "array",
          "description": "Defines the aggregation resultset.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "includeAllSchemaChildren": {
          "type": "boolean",
          "description": "Broadens the aggregation and include all schema descendant list items."
        },
        "brokenDependenciesFilter": {
          "description": "Filter the list items document result set to those that have or not have broken references",
          "allOf": [
            {
              "$ref": "#/definitions/BrokenDependenciesFilter"
            }
          ]
        },
        "schemaIds": {
          "type": "array",
          "description": "Limits the aggregation to list items of the provided schemas.",
          "items": {
            "type": "string"
          }
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "lifeCycleFilter": {
          "description": "Limits the list item document result set to that life cycle state. Defaults to ActiveOnly.",
          "allOf": [
            {
              "$ref": "#/definitions/LifeCycleFilter"
            }
          ]
        }
      }
    },
    "ListItemCreateRequest": {
      "type": "object",
      "description": "A request structure for creating a list item document.",
      "additionalProperties": false,
      "properties": {
        "content": {
          "description": "The content data of the list item."
        },
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "listItemId": {
          "type": "string",
          "description": "The list item id. When not provided a Guid is generated."
        }
      }
    },
    "ListItemCreateManyRequest": {
      "type": "object",
      "description": "A request structure for creating multiple list items.",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        },
        "requests": {
          "type": "array",
          "description": "Create requests",
          "items": {
            "$ref": "#/definitions/ListItemCreateRequest"
          }
        }
      }
    },
    "ListItemUpdateRequest": {
      "type": "object",
      "description": "A request structure for updating a list item.",
      "additionalProperties": false,
      "properties": {
        "content": {
          "description": "The content data of the list item."
        },
        "id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "ListItemUpdateManyRequest": {
      "type": "object",
      "description": "A request structure for updating multiple list items.",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        },
        "requests": {
          "type": "array",
          "description": "Update requests",
          "items": {
            "$ref": "#/definitions/ListItemUpdateRequest"
          }
        }
      }
    },
    "ListItemDeactivateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "forceReferenceRemoval"
      ],
      "properties": {
        "listItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "forceReferenceRemoval": {
          "type": "boolean"
        }
      }
    },
    "ListItemReactivateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "listItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowMissingDependencies": {
          "type": "boolean"
        }
      }
    },
    "ListItemFieldsUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "listItemIds": {
          "type": "array",
          "description": "The ids of the list items whose fields need to be updated",
          "items": {
            "type": "string"
          }
        },
        "changeCommands": {
          "type": "array",
          "description": "The change commads to be applied to the list items",
          "items": {
            "$ref": "#/definitions/MetadataValuesChangeCommandBase"
          }
        },
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        }
      }
    },
    "ListItemFieldsFilterUpdateRequest": {
      "type": "object",
      "description": "ListItemFieldsFilterUpdateRequest class",
      "additionalProperties": false,
      "required": [
        "allowMissingDependencies"
      ],
      "properties": {
        "listItemFilterRequest": {
          "description": "The search request used to filter the list items on which the change commands must be applied",
          "allOf": [
            {
              "$ref": "#/definitions/ListItemFilterRequest"
            }
          ]
        },
        "changeCommands": {
          "type": "array",
          "description": "The change commads to be applied to the list items",
          "items": {
            "$ref": "#/definitions/MetadataValuesChangeCommandBase"
          }
        },
        "allowMissingDependencies": {
          "type": "boolean",
          "description": "Allow storing references to missing list items / contents"
        }
      }
    },
    "ListItemFilterRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "includeAllSchemaChildren"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "includeAllSchemaChildren": {
          "type": "boolean",
          "description": "Broadens the search and include all schema descendant list items."
        },
        "schemaIds": {
          "type": "array",
          "description": "Limits the search to list items of the provided schemas.",
          "items": {
            "type": "string"
          }
        },
        "displayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "searchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LiveStreamSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "from",
        "to",
        "start",
        "limit"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "Limits the start date of the search request.",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "description": "Limits the end date of the search request.",
          "format": "date-time"
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "pageToken": {
          "type": "string",
          "description": "To get a large amount of data, page token returned from the response can be used to get all data."
        }
      }
    },
    "ObjectSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfObject"
        }
      ]
    },
    "SearchBehaviourBaseResultOfObject": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfObject"
        }
      ]
    },
    "BaseResultOfObject": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {}
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "SchemaDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "sortOrder",
        "system",
        "public"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The schema id."
        },
        "parentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "names": {
          "description": "Language specific schema names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "descriptions": {
          "description": "Language specific schema descriptions.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "displayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "fields": {
          "type": "array",
          "description": "The schema fields.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "fieldsOverwrite": {
          "type": "array",
          "description": "The schema fields overwrite information.",
          "items": {
            "$ref": "#/definitions/FieldOverwriteBase"
          }
        },
        "sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "sortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "system": {
          "type": "boolean",
          "description": "Is true when schema is system provided."
        },
        "ownerTokenId": {
          "type": "string",
          "description": "The owner token id. Defines the schema owner."
        },
        "public": {
          "type": "boolean",
          "description": "Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty."
        },
        "schemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "referencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        },
        "descendantSchemaIds": {
          "type": "array",
          "description": "A complete id list of all descendant schemas.",
          "items": {
            "type": "string"
          }
        },
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "searchFieldCount": {
          "description": "The number of fields generated by the schema for the Search operations.",
          "allOf": [
            {
              "$ref": "#/definitions/SearchFieldCount"
            }
          ]
        }
      }
    },
    "SchemaType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "Layer",
        "List",
        "Struct"
      ],
      "enum": [
        "Content",
        "Layer",
        "List",
        "Struct"
      ]
    },
    "DisplayPattern": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "templateEngine",
        "displayPatternType"
      ],
      "properties": {
        "templateEngine": {
          "description": "Defines the template engine for parsing the templates.",
          "allOf": [
            {
              "$ref": "#/definitions/TemplateEngine"
            }
          ]
        },
        "displayPatternType": {
          "description": "Defines the pattern type of the templates.",
          "allOf": [
            {
              "$ref": "#/definitions/DisplayPatternType"
            }
          ]
        },
        "templates": {
          "description": "Language specific pattern templates.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        }
      }
    },
    "TemplateEngine": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "DotLiquid"
      ],
      "enum": [
        "DotLiquid"
      ]
    },
    "FieldBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "The field base class.",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "required",
        "fixed",
        "index",
        "simpleSearch",
        "kind"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The field id. Can be a slug and must be unique within the schema."
        },
        "indexId": {
          "type": "string",
          "description": "The index id is auto generated by the system."
        },
        "fieldNamespace": {
          "type": "string",
          "description": "The namespace is auto generated by the system."
        },
        "names": {
          "description": "Language specific field names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "descriptions": {
          "description": "Language specific field descriptions.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Defines if a field value is mandatory or not."
        },
        "fixed": {
          "type": "boolean",
          "description": "Defines if the field can be edited or not."
        },
        "index": {
          "type": "boolean",
          "description": "Maps the field in the elastic search index and its values become searchable."
        },
        "simpleSearch": {
          "type": "boolean",
          "description": "Includes fields in the simple search. Index must be true."
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "FieldBoolean": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDate": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "format": {
          "type": "string",
          "description": "Defines the date format structure."
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDateTime": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "format": {
          "type": "string",
          "description": "Defines the date time format structure."
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDateTimeArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "uniqueItems": {
          "type": "boolean"
        },
        "maximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldDateTime"
        }
      ]
    },
    "FieldDecimal": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "pattern": {
          "type": "string"
        },
        "minimum": {
          "type": "number",
          "description": "Defines the lowest possible value.",
          "format": "decimal"
        },
        "maximum": {
          "type": "number",
          "description": "Defines the highest possible value.",
          "format": "decimal"
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDictionary": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDictionaryArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "uniqueItems": {
          "type": "boolean"
        },
        "maximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldDictionary"
        }
      ]
    },
    "FieldGeoPoint": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldLong": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "boost"
      ],
      "properties": {
        "pattern": {
          "type": "string"
        },
        "minimum": {
          "type": "number",
          "description": "Defines the lowest possible value.",
          "format": "decimal"
        },
        "maximum": {
          "type": "number",
          "description": "Defines the highest possible value.",
          "format": "decimal"
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldLongArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "uniqueItems": {
          "type": "boolean"
        },
        "maximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldLong"
        }
      ]
    },
    "FieldSingleFieldset": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "SchemaIndexingInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "fields": {
          "type": "array",
          "description": "A collecction of indexing information for the fields of a schema",
          "items": {
            "$ref": "#/definitions/FieldIndexingInfo"
          }
        }
      }
    },
    "FieldIndexingInfo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "index",
        "simpleSearch",
        "boost"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The field Id"
        },
        "index": {
          "type": "boolean",
          "description": "Maps the field in the elastic search index and its values become searchable."
        },
        "simpleSearch": {
          "type": "boolean",
          "description": "Includes fields in the simple search. Index must be true."
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        },
        "relatedSchemaIndexing": {
          "description": "Indexing information of fields of the schema related to this field (if existing)",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        }
      }
    },
    "FieldMultiFieldset": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "maximumItems": {
          "type": "integer",
          "description": "Defines the highest possible fieldset count.",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "description": "Defines the lowest possible fieldset count.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldSingleTagbox": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type list."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        },
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "listItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldMultiTagbox": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type list."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "maximumItems": {
          "type": "integer",
          "description": "Defines the highest possible item count.",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "description": "Defines the lowest possible item count.",
          "format": "int32"
        },
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "listItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldString": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "keepFieldValue",
        "multiLine",
        "boost"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "It is a DotLiquid template."
        },
        "keepFieldValue": {
          "type": "boolean",
          "description": "If true the Template will only render on item creation otherwise it will render on each update."
        },
        "pattern": {
          "type": "string",
          "description": "Contains a regex validation pattern."
        },
        "minimumLength": {
          "type": "integer",
          "description": "Defines the minimal string length.",
          "format": "int32"
        },
        "maximumLength": {
          "type": "integer",
          "description": "Defines the maximal string length.",
          "format": "int32"
        },
        "analyzers": {
          "type": "array",
          "description": "A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.",
          "items": {
            "$ref": "#/definitions/AnalyzerBase"
          }
        },
        "multiLine": {
          "type": "boolean",
          "description": "Displays the field value in a multiline component."
        },
        "grantedValues": {
          "type": "array",
          "description": "Similar to an enumeration valid field values are limited to values of this list.",
          "items": {
            "type": "string"
          }
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "AnalyzerBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "The analyzer base class.",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "simpleSearch",
        "kind"
      ],
      "properties": {
        "simpleSearch": {
          "type": "boolean",
          "description": "Includes the analyzed field in the simple search."
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "EdgeNGramAnalyzer": {
      "type": "object",
      "description": "An analyzer using the EdgeNGram tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "fieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "LanguageAnalyzer": {
      "type": "object",
      "description": "An analyzer using a language analyzer. Restricted to the languages supported by elastic search.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html",
      "additionalProperties": false,
      "properties": {
        "fieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "NGramAnalyzer": {
      "type": "object",
      "description": "An analyzer using the NGram tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "fieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "PathHierarchyAnalyzer": {
      "type": "object",
      "description": "An analyzer using the path hierarchy tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "fieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "SimpleAnalyzer": {
      "type": "object",
      "description": "An analyzer using a custom pattern tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "fieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "FieldStringArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "uniqueItems": {
          "type": "boolean"
        },
        "maximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldString"
        }
      ]
    },
    "FieldTranslatedString": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "multiLine",
        "keepFieldValue",
        "boost"
      ],
      "properties": {
        "pattern": {
          "type": "string",
          "description": "Contains a regex validation pattern."
        },
        "minimumLength": {
          "type": "integer",
          "description": "Defines the minimal string length.",
          "format": "int32"
        },
        "maximumLength": {
          "type": "integer",
          "description": "Defines the maximal string length.",
          "format": "int32"
        },
        "analyzers": {
          "type": "array",
          "description": "A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.",
          "items": {
            "$ref": "#/definitions/AnalyzerBase"
          }
        },
        "multiLine": {
          "type": "boolean",
          "description": "Displays the field value in a multiline component."
        },
        "requiredMetadataLanguages": {
          "type": "array",
          "description": "Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.\nIf Required is true, the field and all its metadata languages are required, including x-default.\nIf Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory, including x-default.",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "type": "string",
          "description": "It is a DotLiquid template."
        },
        "keepFieldValue": {
          "type": "boolean",
          "description": "If true the Template will only render on item creation otherwise it will render on each update."
        },
        "boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldSingleRelation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        },
        "relationTypes": {
          "type": "array",
          "description": "Defines the relation types supported by the field.",
          "items": {
            "$ref": "#/definitions/RelationType"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "RelationType": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "targetContext"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id property."
        },
        "names": {
          "description": "Language specific relation names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "targetContext": {
          "description": "Defines the valid target context.",
          "allOf": [
            {
              "$ref": "#/definitions/TargetContext"
            }
          ]
        },
        "filter": {
          "description": "An optional search filter. Limits the content or the list item result set depending on the relation's target context.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        }
      }
    },
    "TargetContext": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "ListItem",
        "User",
        "Custom"
      ],
      "enum": [
        "Content",
        "ListItem",
        "User",
        "Custom"
      ]
    },
    "FieldMultiRelation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "uniqueItems"
      ],
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "schemaIndexingInfo": {
          "description": "Indexing information of fields of the related schema identified by the SchemaId property",
          "allOf": [
            {
              "$ref": "#/definitions/SchemaIndexingInfo"
            }
          ]
        },
        "relationTypes": {
          "type": "array",
          "description": "Defines the relation types supported by the field.",
          "items": {
            "$ref": "#/definitions/RelationType"
          }
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "maximumItems": {
          "type": "integer",
          "description": "Defines the highest possible item count.",
          "format": "int32"
        },
        "minimumItems": {
          "type": "integer",
          "description": "Dfines the lowest possible item count.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldOverwriteBase": {
      "type": "object",
      "discriminator": "kind",
      "description": "Base class for overwritten information on a field.",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "required",
        "kind"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The field id. Can be a slug and must be unique within the schema."
        },
        "required": {
          "type": "boolean",
          "description": "Defines if a field value is mandatory or not."
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "FieldOverwriteSingleTagbox": {
      "type": "object",
      "description": "Overwritten information for Single Tagbox field.",
      "additionalProperties": false,
      "properties": {
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "listItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldOverwriteBase"
        }
      ]
    },
    "FieldOverwriteMultiTagbox": {
      "type": "object",
      "description": "Overwritten information for Multi Tagbox field.",
      "additionalProperties": false,
      "properties": {
        "filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "listItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldOverwriteBase"
        }
      ]
    },
    "SearchFieldCount": {
      "type": "object",
      "description": "Count info of fields for search operations",
      "additionalProperties": false,
      "required": [
        "dataField",
        "indexedField",
        "simpleSearchField"
      ],
      "properties": {
        "dataField": {
          "type": "integer",
          "description": "The number of fields generated by the schema in the Search index.",
          "format": "int32"
        },
        "indexedField": {
          "type": "integer",
          "description": "The number of indexed fields generated by the schema in the Search index.",
          "format": "int32"
        },
        "simpleSearchField": {
          "type": "integer",
          "description": "The number of fields to be queried in the simple search for the schema.",
          "format": "int32"
        }
      }
    },
    "SchemaSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "debugMode"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "description": "An optional search filter. Limits the schema result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        }
      }
    },
    "SchemaSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfSchema"
        }
      ]
    },
    "SearchBehaviourBaseResultOfSchema": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfSchema"
        }
      ]
    },
    "BaseResultOfSchema": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schema"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "Schema": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "fieldCount",
        "childCount",
        "level",
        "system"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The schema id."
        },
        "parentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "names": {
          "description": "Language specific schema names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "descriptions": {
          "description": "Language specific schema descriptions.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "fieldCount": {
          "type": "integer",
          "description": "The count of all fields.",
          "format": "int32"
        },
        "childCount": {
          "type": "integer",
          "description": "The count of all schema descendants with a immediate inheritance.",
          "format": "int32"
        },
        "level": {
          "type": "integer",
          "description": "The descendancy depth of the schema.",
          "format": "int32"
        },
        "system": {
          "type": "boolean",
          "description": "Is true when schema is system provided."
        }
      }
    },
    "ExistsResponse": {
      "type": "object",
      "description": "Response that tells if exists",
      "additionalProperties": false,
      "required": [
        "exists"
      ],
      "properties": {
        "exists": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether it exists"
        }
      }
    },
    "SchemaCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "sortOrder",
        "public"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The schema id. Can be a slug, but must be unique throughout the whole customer setup."
        },
        "parentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "names": {
          "description": "Language specific schema names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "descriptions": {
          "description": "Language specific schema descriptions.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "displayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "fields": {
          "type": "array",
          "description": "The schema fields. Can be empty.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "fieldsOverwrite": {
          "type": "array",
          "description": "The schema fields overwrite information.",
          "items": {
            "$ref": "#/definitions/FieldOverwriteBase"
          }
        },
        "aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "sortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "public": {
          "type": "boolean",
          "description": "Opens list item document accessibility. If true SchemaPermissionSetIds must be empty."
        },
        "schemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets. Control list item document permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "referencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DuplicateSchemaException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "SchemaValidationException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PictureparkBusinessException"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "SchemaCyclicDependencyException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "SchemaUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "sortOrder",
        "public"
      ],
      "properties": {
        "names": {
          "description": "Language specific schema names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "descriptions": {
          "description": "Language specific schema descriptions.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "displayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "fields": {
          "type": "array",
          "description": "The schema fields.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "fieldsOverwrite": {
          "type": "array",
          "description": "The schema fields overwrite information.",
          "items": {
            "$ref": "#/definitions/FieldOverwriteBase"
          }
        },
        "aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "sortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "public": {
          "type": "boolean",
          "description": "Opens schema accessibility."
        },
        "schemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "referencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        },
        "types": {
          "type": "array",
          "description": "Types control schema usage. Schema types can only be added, but not removed.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        }
      }
    },
    "SchemaNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "SchemaInUseException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schemaId": {
          "type": "string"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PictureparkBusinessException"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PermissionSetSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "debugMode"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "$ref": "#/definitions/FilterBase"
        },
        "rightFilter": {
          "$ref": "#/definitions/PermissionSetRight"
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        }
      }
    },
    "PermissionSetRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Apply"
      ],
      "enum": [
        "Apply"
      ]
    },
    "PermissionSetSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfPermissionSet"
        }
      ]
    },
    "SearchBehaviourBaseResultOfPermissionSet": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfPermissionSet"
        }
      ]
    },
    "BaseResultOfPermissionSet": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionSet"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "PermissionSet": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "trashed"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The permission set id."
        },
        "trashed": {
          "type": "boolean"
        },
        "names": {
          "description": "Language specific permission set names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        }
      }
    },
    "ContentPermissionSetDetail": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PermissionSetDetailOfContentRight"
        }
      ]
    },
    "PermissionSetDetailOfContentRight": {
      "type": "object",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "trashed",
        "exclusive"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "trashed": {
          "type": "boolean"
        },
        "userRolesRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionUserRoleRightsOfContentRight"
          }
        },
        "userRolesPermissionSetRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionUserRoleRightsOfPermissionSetRight"
          }
        },
        "exclusive": {
          "type": "boolean"
        }
      }
    },
    "PermissionUserRoleRightsOfContentRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userRoleId": {
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentRight"
          }
        }
      }
    },
    "PermissionUserRoleRightsOfPermissionSetRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userRoleId": {
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionSetRight"
          }
        }
      }
    },
    "SchemaPermissionSetDetail": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PermissionSetDetailOfMetadataRight"
        }
      ]
    },
    "PermissionSetDetailOfMetadataRight": {
      "type": "object",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "trashed",
        "exclusive"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "trashed": {
          "type": "boolean"
        },
        "userRolesRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionUserRoleRightsOfMetadataRight"
          }
        },
        "userRolesPermissionSetRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionUserRoleRightsOfPermissionSetRight"
          }
        },
        "exclusive": {
          "type": "boolean"
        }
      }
    },
    "PermissionUserRoleRightsOfMetadataRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userRoleId": {
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataRight"
          }
        }
      }
    },
    "MetadataRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "View",
        "Edit",
        "Manage"
      ],
      "enum": [
        "View",
        "Edit",
        "Manage"
      ]
    },
    "UserRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ManageContent",
        "ManageSharings",
        "ManageDrives",
        "ManageTransfer",
        "ManageChannels",
        "ManageSchemas",
        "ManageUsers",
        "ManageUserRoles",
        "ManagePermissions",
        "ManageSearchIndexes",
        "ManageRecipients",
        "ManageCollections",
        "ManageListItems",
        "ManageServiceProviders",
        "ManageEmbeds",
        "ManageTemplates"
      ],
      "enum": [
        "ManageContent",
        "ManageSharings",
        "ManageDrives",
        "ManageTransfer",
        "ManageChannels",
        "ManageSchemas",
        "ManageUsers",
        "ManageUserRoles",
        "ManagePermissions",
        "ManageSearchIndexes",
        "ManageRecipients",
        "ManageCollections",
        "ManageListItems",
        "ManageServiceProviders",
        "ManageEmbeds",
        "ManageTemplates"
      ]
    },
    "VersionInfo": {
      "type": "object",
      "description": "The version view item for the environment.",
      "additionalProperties": false,
      "properties": {
        "fileVersion": {
          "type": "string",
          "description": "The manual file version of Picturepark.Contract.dll."
        },
        "fileProductVersion": {
          "type": "string",
          "description": "The GitVersionTask generated file product version of Picturepark.Configuration.dll."
        },
        "contractVersion": {
          "type": "string",
          "description": "The current contract version stored in CustomerDoc / EnvironmentDoc."
        },
        "release": {
          "type": "string",
          "description": "The bamboo release version. Only provided on bamboo deployments."
        }
      }
    },
    "ShareDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "outputAccess",
        "shareType"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/ShareUser"
        },
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "contentSelections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareContentDetail"
          }
        },
        "layerSchemaIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "$ref": "#/definitions/ShareDataBase"
        },
        "mailTemplateId": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "template": {
          "$ref": "#/definitions/TemplateBase"
        },
        "outputAccess": {
          "$ref": "#/definitions/OutputAccess"
        },
        "shareType": {
          "$ref": "#/definitions/ShareType"
        }
      }
    },
    "ShareUser": {
      "type": "object",
      "description": "Reduced set of user information used for shares",
      "additionalProperties": false,
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Name of user"
        },
        "emailHash": {
          "type": "string",
          "description": "MD5 hash of email address. Can be used to display gravatar image"
        }
      }
    },
    "ShareContentDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contentType"
      ],
      "properties": {
        "contentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content."
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "$ref": "#/definitions/DataDictionary"
        },
        "metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "id": {
          "type": "string"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareOutputBase"
          }
        },
        "contentType": {
          "$ref": "#/definitions/ContentType"
        },
        "displayValues": {
          "description": "Contains language specific display values, rendered according to the content schema's display pattern configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/DisplayValueDictionary"
            }
          ]
        }
      }
    },
    "ShareOutputBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "contentId": {
          "type": "string"
        },
        "outputFormatId": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "Url to directly download output. In case of BasicShare if not fetched using a token, a placeholder {token} is included which needs to be replaced with the recipient's token"
        },
        "detail": {
          "$ref": "#/definitions/OutputDataBase"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "OutputDataBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "fileExtension": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "fileSizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "sha1Hash": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "OutputDataImage": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "width",
        "height"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDataBase"
        }
      ]
    },
    "OutputDataAudio": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDataBase"
        }
      ]
    },
    "OutputDataVideo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "durationInSeconds",
        "width",
        "height"
      ],
      "properties": {
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "sprites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sprite"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDataBase"
        }
      ]
    },
    "OutputDataDocument": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "pageCount"
      ],
      "properties": {
        "pageCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDataBase"
        }
      ]
    },
    "OutputDataDefault": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/OutputDataBase"
        }
      ]
    },
    "ShareOutputBasic": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareOutputBase"
        }
      ]
    },
    "ShareOutputEmbed": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareOutputBase"
        }
      ]
    },
    "ShareDataBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "ShareDataEmbed": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareDataBase"
        }
      ]
    },
    "ShareDataBasic": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "mailRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MailRecipient"
          }
        },
        "internalRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalRecipient"
          }
        },
        "languageCode": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareDataBase"
        }
      ]
    },
    "MailRecipient": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userEmail": {
          "$ref": "#/definitions/UserEmail"
        },
        "token": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "UserEmail": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "InternalRecipient": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "recipient": {
          "$ref": "#/definitions/UserItem"
        },
        "token": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "UserItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "TemplateBase": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "CardTemplate": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "showNavigation",
        "showOverlay",
        "showLogo",
        "showFooter"
      ],
      "properties": {
        "showNavigation": {
          "type": "boolean"
        },
        "showOverlay": {
          "type": "boolean"
        },
        "showLogo": {
          "type": "boolean"
        },
        "showFooter": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TemplateBase"
        }
      ]
    },
    "ListTemplate": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/TemplateBase"
        }
      ]
    },
    "BasicTemplate": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/TemplateBase"
        }
      ]
    },
    "OutputAccess": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Full",
        "Preview",
        "None"
      ],
      "enum": [
        "Full",
        "Preview",
        "None"
      ]
    },
    "ShareType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Basic",
        "Embed"
      ],
      "enum": [
        "Basic",
        "Embed"
      ]
    },
    "ShareNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "shareId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ShareSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "debugMode"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "description": "An optional search filter. Limits the share document result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        }
      }
    },
    "ShareSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfShare"
        }
      ]
    },
    "SearchBehaviourBaseResultOfShare": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfShare"
        }
      ]
    },
    "BaseResultOfShare": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Share"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "Share": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "shareType"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "shareType": {
          "$ref": "#/definitions/ShareType"
        }
      }
    },
    "ShareAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "searchString": {
          "type": "string"
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "aggregationFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "aggregators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "displayLanguage": {
          "type": "string"
        }
      }
    },
    "ShareBaseCreateRequest": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "outputAccess",
        "kind"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareContent"
          }
        },
        "layerSchemaIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "$ref": "#/definitions/TemplateBase"
        },
        "outputAccess": {
          "$ref": "#/definitions/OutputAccess"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "ShareContent": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentId": {
          "type": "string"
        },
        "outputFormatIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ShareBasicCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "recipientsEmail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserEmail"
          }
        },
        "recipientsUser": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserItem"
          }
        },
        "recipientsGroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRole"
          }
        },
        "languageCode": {
          "type": "string"
        },
        "mailTemplateId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseCreateRequest"
        }
      ]
    },
    "UserRole": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "trashed"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The user role id."
        },
        "trashed": {
          "type": "boolean"
        },
        "names": {
          "description": "Language specific user role names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "userRights": {
          "type": "array",
          "description": "All user rights for this user role.",
          "items": {
            "$ref": "#/definitions/UserRight"
          }
        }
      }
    },
    "ShareEmbedCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseCreateRequest"
        }
      ]
    },
    "CreateShareResult": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "shareId": {
          "type": "string"
        }
      }
    },
    "ShareBaseUpdateRequest": {
      "type": "object",
      "discriminator": "kind",
      "x-abstract": true,
      "additionalProperties": false,
      "required": [
        "outputAccess",
        "kind"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "shareContentItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareContent"
          }
        },
        "layerSchemaIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "$ref": "#/definitions/TemplateBase"
        },
        "outputAccess": {
          "$ref": "#/definitions/OutputAccess"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "ShareBasicUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseUpdateRequest"
        }
      ]
    },
    "ShareEmbedUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseUpdateRequest"
        }
      ]
    },
    "CustomerServiceProviderConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "serviceProviderId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "userRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "settings": {
          "type": "string"
        }
      }
    },
    "ServiceProviderConfigurationUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "customerId": {
          "type": "string"
        },
        "serviceProviderId": {
          "type": "string"
        },
        "settings": {
          "type": "string"
        },
        "userRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransferDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "state",
        "transferType",
        "itemProgress",
        "itemCount",
        "itemsFailed",
        "itemsCancelled",
        "lastProgressStamp",
        "fileTransferCount"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TransferState"
        },
        "businessProcessId": {
          "type": "string"
        },
        "transferType": {
          "$ref": "#/definitions/TransferType"
        },
        "itemProgress": {
          "type": "integer",
          "format": "int64"
        },
        "itemCount": {
          "type": "integer",
          "format": "int64"
        },
        "itemsFailed": {
          "type": "integer",
          "format": "int64"
        },
        "itemsCancelled": {
          "type": "integer",
          "format": "int64"
        },
        "lastProgressStamp": {
          "type": "integer",
          "format": "int64"
        },
        "fileTransferCount": {
          "type": "integer",
          "format": "int64"
        },
        "collectionId": {
          "type": "string"
        }
      }
    },
    "TransferState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "ImportFailed",
        "Created",
        "Deleted",
        "TransferReady",
        "FileDeleteInProgress",
        "TransferCleanup"
      ],
      "enum": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "ImportFailed",
        "Created",
        "Deleted",
        "TransferReady",
        "FileDeleteInProgress",
        "TransferCleanup"
      ]
    },
    "TransferType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "FileUpload",
        "FileUploadAutoImport",
        "DriveImport",
        "DriveExport",
        "WebDownload",
        "SchemaImport"
      ],
      "enum": [
        "FileUpload",
        "FileUploadAutoImport",
        "DriveImport",
        "DriveExport",
        "WebDownload",
        "SchemaImport"
      ]
    },
    "TransferSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "TransferSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfTransfer"
        }
      ]
    },
    "SearchBehaviourBaseResultOfTransfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfTransfer"
        }
      ]
    },
    "BaseResultOfTransfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transfer"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "Transfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "state",
        "transferType",
        "fileTransferCount"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TransferState"
        },
        "transferType": {
          "$ref": "#/definitions/TransferType"
        },
        "businessProcessId": {
          "type": "string"
        },
        "fileTransferCount": {
          "type": "integer",
          "format": "int64"
        },
        "collectionId": {
          "type": "string"
        }
      }
    },
    "CreateTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "transferType",
        "createCollection"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "transferType": {
          "$ref": "#/definitions/TransferType"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferUploadFile"
          }
        },
        "driveFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferDriveFile"
          }
        },
        "webLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferWebLink"
          }
        },
        "collectionName": {
          "type": "string"
        },
        "createCollection": {
          "type": "boolean"
        }
      }
    },
    "TransferUploadFile": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "fileName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "TransferFile": {
      "type": "object",
      "x-abstract": true,
      "additionalProperties": false,
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "TransferDriveFile": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "driveId": {
          "type": "string"
        },
        "fileId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "externalOutputFolderId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "TransferWebLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "FileTransferDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "state"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "audit": {
          "$ref": "#/definitions/UserAudit"
        },
        "transferId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/FileTransferState"
        },
        "fileMetadata": {
          "$ref": "#/definitions/FileMetadata"
        },
        "driveMetadata": {
          "$ref": "#/definitions/DriveMetadata"
        },
        "outputItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputItem"
          }
        },
        "contentId": {
          "type": "string"
        }
      }
    },
    "FileTransferState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "DataExtractionInProgress",
        "DataExtractionDone",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "UploadFailed",
        "ImportFailed",
        "DeleteInProgress",
        "Deleted",
        "CleanupInProgress",
        "CleanupCompleted"
      ],
      "enum": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "DataExtractionInProgress",
        "DataExtractionDone",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "UploadFailed",
        "ImportFailed",
        "DeleteInProgress",
        "Deleted",
        "CleanupInProgress",
        "CleanupCompleted"
      ]
    },
    "FileMetadata": {
      "type": "object",
      "discriminator": "kind",
      "additionalProperties": false,
      "required": [
        "kind"
      ],
      "properties": {
        "names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "descriptions": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "fileExtension": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "fileSizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "sha1Hash": {
          "type": "string"
        },
        "xmpMetadata": {
          "$ref": "#/definitions/XmpMetadata"
        },
        "exifMetadata": {
          "$ref": "#/definitions/ExifMetadata"
        },
        "language": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "XmpMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "dc": {
          "$ref": "#/definitions/Dc"
        },
        "crs": {
          "$ref": "#/definitions/Crs"
        },
        "iptcCore": {
          "$ref": "#/definitions/IptcCore"
        },
        "iptcExt": {
          "$ref": "#/definitions/IptcExt"
        },
        "iptcIIM": {
          "$ref": "#/definitions/IptcIIM"
        },
        "lr": {
          "$ref": "#/definitions/Lr"
        },
        "pdf": {
          "$ref": "#/definitions/Pdf"
        },
        "photoshop": {
          "$ref": "#/definitions/Photoshop"
        },
        "plus": {
          "$ref": "#/definitions/Plus"
        },
        "tiff": {
          "$ref": "#/definitions/Tiff"
        },
        "xmp": {
          "$ref": "#/definitions/Xmp"
        },
        "xmpBJ": {
          "$ref": "#/definitions/XmpBJ"
        },
        "xmpDM": {
          "$ref": "#/definitions/XmpDM"
        },
        "xmpG": {
          "$ref": "#/definitions/XmpG"
        },
        "xmpGImg": {
          "$ref": "#/definitions/XmpGImg"
        },
        "xmpidq": {
          "$ref": "#/definitions/Xmpidq"
        },
        "xmpMM": {
          "$ref": "#/definitions/XmpMM"
        },
        "xmpNote": {
          "$ref": "#/definitions/XmpNote"
        },
        "xmpRights": {
          "$ref": "#/definitions/XmpRights"
        },
        "xmpTPg": {
          "$ref": "#/definitions/XmpTPg"
        }
      }
    },
    "Dc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coverage": {
          "type": "string"
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "language": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relation": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rights": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "source": {
          "type": "string"
        },
        "subject": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Crs": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "autoBrightness": {
          "type": "boolean"
        },
        "autoContrast": {
          "type": "boolean"
        },
        "autoExposure": {
          "type": "boolean"
        },
        "autoShadows": {
          "type": "boolean"
        },
        "blueHue": {
          "type": "integer",
          "format": "int32"
        },
        "blueSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "brightness": {
          "type": "integer",
          "format": "int32"
        },
        "cameraProfile": {
          "type": "string"
        },
        "chromaticAberrationB": {
          "type": "integer",
          "format": "int32"
        },
        "chromaticAberrationR": {
          "type": "integer",
          "format": "int32"
        },
        "colorNoiseReduction": {
          "type": "integer",
          "format": "int32"
        },
        "contrast": {
          "type": "integer",
          "format": "int32"
        },
        "cropTop": {
          "type": "number",
          "format": "decimal"
        },
        "cropLeft": {
          "type": "number",
          "format": "decimal"
        },
        "cropBottom": {
          "type": "number",
          "format": "decimal"
        },
        "cropRight": {
          "type": "number",
          "format": "decimal"
        },
        "cropAngle": {
          "type": "number",
          "format": "decimal"
        },
        "cropWidth": {
          "type": "number",
          "format": "decimal"
        },
        "cropHeight": {
          "type": "number",
          "format": "decimal"
        },
        "cropUnits": {
          "$ref": "#/definitions/CropUnit"
        },
        "exposure": {
          "type": "number",
          "format": "decimal"
        },
        "greenHue": {
          "type": "integer",
          "format": "int32"
        },
        "greenSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "hasCrop": {
          "type": "boolean"
        },
        "hasSettings": {
          "type": "boolean"
        },
        "luminanceSmoothing": {
          "type": "integer",
          "format": "int32"
        },
        "rawFileName": {
          "type": "string"
        },
        "redHue": {
          "type": "integer",
          "format": "int32"
        },
        "redSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "saturation": {
          "type": "integer",
          "format": "int32"
        },
        "shadows": {
          "type": "integer",
          "format": "int32"
        },
        "shadowTint": {
          "type": "integer",
          "format": "int32"
        },
        "sharpness": {
          "type": "integer",
          "format": "int32"
        },
        "temperature": {
          "type": "integer",
          "format": "int32"
        },
        "tint": {
          "type": "integer",
          "format": "int32"
        },
        "toneCurve": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "toneCurveName": {
          "$ref": "#/definitions/ToneCurve"
        },
        "version": {
          "type": "string"
        },
        "vignetteAmount": {
          "type": "integer",
          "format": "int32"
        },
        "vignetteMidpoint": {
          "type": "integer",
          "format": "int32"
        },
        "whiteBalance": {
          "$ref": "#/definitions/WhiteBalance"
        }
      }
    },
    "CropUnit": {
      "type": "string",
      "description": "Corresponds to crs.CropUnitsChoice",
      "x-enumNames": [
        "Pixels",
        "Inches",
        "Centimeters"
      ],
      "enum": [
        "Pixels",
        "Inches",
        "Centimeters"
      ]
    },
    "ToneCurve": {
      "type": "string",
      "description": "Corresponds to crs.ToneCurveNameChoice",
      "x-enumNames": [
        "Linear",
        "MediumContrast",
        "StrongContrast",
        "Custom"
      ],
      "enum": [
        "Linear",
        "MediumContrast",
        "StrongContrast",
        "Custom"
      ]
    },
    "WhiteBalance": {
      "type": "string",
      "description": "Corresponds to crs.WhiteBalanceChoice",
      "x-enumNames": [
        "AsShot",
        "Auto",
        "Daylight",
        "Cloudy",
        "Shade",
        "Tungsten",
        "Fluorescent",
        "Flash",
        "Custom"
      ],
      "enum": [
        "AsShot",
        "Auto",
        "Daylight",
        "Cloudy",
        "Shade",
        "Tungsten",
        "Fluorescent",
        "Flash",
        "Custom"
      ]
    },
    "IptcCore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "intellectualGenre": {
          "type": "string"
        },
        "scene": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string"
        },
        "creatorContactInfo": {
          "$ref": "#/definitions/CreatorContactInfo"
        }
      }
    },
    "CreatorContactInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IptcExt": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "additionalModelInformation": {
          "type": "string"
        },
        "artworkOrObject": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtworkOrObjectInfo"
          }
        },
        "organisationInImageCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "controlledVocabularyTerm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locationShown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationInfo"
          }
        },
        "modelAge": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "organisationInImageName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "personInImage": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "digitalImageGUID": {
          "type": "string"
        },
        "digitalSourceType": {
          "type": "string"
        },
        "event": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imageRegistryEntry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryEntryInfo"
          }
        },
        "metadataLastEdited": {
          "type": "string",
          "format": "date-time"
        },
        "locationCreated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationInfo"
          }
        },
        "maxAvailHeight": {
          "type": "integer",
          "format": "int32"
        },
        "maxAvailWidth": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ArtworkOrObjectInfo": {
      "type": "object",
      "description": "Corresponds to Xmp.Structure.ArtworkOrObjectDetails",
      "additionalProperties": false,
      "properties": {
        "copyrightNotice": {
          "type": "string"
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "sourceInventoryNumber": {
          "type": "string"
        },
        "title": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LocationInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "provinceState": {
          "type": "string"
        },
        "sublocation": {
          "type": "string"
        },
        "worldRegion": {
          "type": "string"
        }
      }
    },
    "RegistryEntryInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "registryItemIdentifier": {
          "type": "string"
        },
        "registryOrganisationIdentifier": {
          "type": "string"
        }
      }
    },
    "IptcIIM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modelVersion": {
          "type": "integer",
          "format": "int32"
        },
        "destination": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fileFormat": {
          "type": "integer",
          "format": "int32"
        },
        "fileFormatVersion": {
          "type": "integer",
          "format": "int32"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "envelopeNumber": {
          "type": "string"
        },
        "productID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "envelopePriority": {
          "type": "integer",
          "format": "int32"
        },
        "dateSent": {
          "type": "string",
          "format": "date-time"
        },
        "timeSent": {
          "type": "string",
          "format": "date-time"
        },
        "uno": {
          "type": "string"
        },
        "recordVersion": {
          "type": "integer",
          "format": "int32"
        },
        "objectTypeReference": {
          "type": "string"
        },
        "objectAttributeReference": {
          "type": "string"
        },
        "objectName": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "editStatus": {
          "type": "string"
        },
        "urgency": {
          "type": "integer",
          "format": "int32"
        },
        "subjectReference": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "supplementalCategory": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fixtureIdentifier": {
          "type": "string"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contentLocationCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contentLocationName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time"
        },
        "releaseTime": {
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "expirationTime": {
          "type": "string",
          "format": "date-time"
        },
        "specialInstruction": {
          "type": "string"
        },
        "actionAdvised": {
          "type": "string"
        },
        "referenceService": {
          "type": "string"
        },
        "referenceDate": {
          "type": "string",
          "format": "date-time"
        },
        "referenceNumber": {
          "type": "string"
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "digitalCreationDate": {
          "type": "string",
          "format": "date-time"
        },
        "digitalCreationTime": {
          "type": "string",
          "format": "date-time"
        },
        "originatingProgram": {
          "type": "string"
        },
        "programVersion": {
          "type": "string"
        },
        "byline": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bylineTitle": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "sublocation": {
          "type": "string"
        },
        "provinceState": {
          "type": "string"
        },
        "countryPrimaryLocationCode": {
          "type": "string"
        },
        "countryPrimaryLocationName": {
          "type": "string"
        },
        "originalTransmissionReference": {
          "type": "string"
        },
        "headline": {
          "type": "string"
        },
        "credit": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "copyrightNotice": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "captionAbstract": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "writerEditor": {
          "type": "string"
        },
        "imageType": {
          "type": "string"
        },
        "imageOrientation": {
          "type": "string"
        },
        "languageIdentifier": {
          "type": "string"
        }
      }
    },
    "Lr": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hierarchicalSubject": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Pdf": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "keywords": {
          "type": "string"
        },
        "pdfVersion": {
          "type": "string"
        },
        "producer": {
          "type": "string"
        },
        "trapped": {
          "type": "boolean"
        }
      }
    },
    "Photoshop": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "authorsPosition": {
          "type": "string"
        },
        "captionWriter": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "colorMode": {
          "$ref": "#/definitions/ColorMode"
        },
        "country": {
          "type": "string"
        },
        "credit": {
          "type": "string"
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "documentAncestors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "headline": {
          "type": "string"
        },
        "history": {
          "type": "string"
        },
        "iccProfile": {
          "type": "string"
        },
        "instructions": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "supplementalCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textLayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhotoshopLayer"
          }
        },
        "transmissionReference": {
          "type": "string"
        },
        "urgency": {
          "type": "integer",
          "format": "int32"
        },
        "legacyIPTCDigest": {
          "type": "string"
        }
      }
    },
    "ColorMode": {
      "type": "string",
      "description": "Corresponds to photoshop.ColorModeChoice",
      "x-enumNames": [
        "Bitmap",
        "Grayscale",
        "Indexed",
        "RGB",
        "CMYK",
        "Multichannel",
        "Duotone",
        "LAB"
      ],
      "enum": [
        "Bitmap",
        "Grayscale",
        "Indexed",
        "RGB",
        "CMYK",
        "Multichannel",
        "Duotone",
        "LAB"
      ]
    },
    "PhotoshopLayer": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "layerName": {
          "type": "string"
        },
        "layerText": {
          "type": "string"
        }
      }
    },
    "Plus": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "version": {
          "type": "string"
        },
        "licensee": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseeInfo"
          }
        },
        "licenseeID": {
          "type": "string"
        },
        "licenseeName": {
          "type": "string"
        },
        "endUser": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndUserInfo"
          }
        },
        "endUserID": {
          "type": "string"
        },
        "endUserName": {
          "type": "string"
        },
        "licensor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicensorInfo"
          }
        },
        "licensorNotes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mediaSummaryCode": {
          "type": "string"
        },
        "licenseStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "licenseEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "mediaConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "regionConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productOrServiceConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imageFileConstraints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imageAlterationConstraints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imageDuplicationConstraints": {
          "type": "string"
        },
        "modelReleaseStatus": {
          "type": "string"
        },
        "modelReleaseID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minorModelAgeDisclosure": {
          "type": "string"
        },
        "propertyReleaseStatus": {
          "type": "string"
        },
        "propertyReleaseID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "otherConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creditLineRequired": {
          "type": "string"
        },
        "adultContentWarning": {
          "type": "string"
        },
        "otherLicenseRequirements": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "termsAndConditionsText": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "termsAndConditionsURL": {
          "type": "string"
        },
        "otherConditions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imageType": {
          "type": "string"
        },
        "licensorImageID": {
          "type": "string"
        },
        "fileNameAsDelivered": {
          "type": "string"
        },
        "imageFileFormatAsDelivered": {
          "type": "string"
        },
        "imageFileSizeAsDelivered": {
          "type": "string"
        },
        "copyrightStatus": {
          "type": "string"
        },
        "copyrightRegistrationNumber": {
          "type": "string"
        },
        "firstPublicationDate": {
          "type": "string",
          "format": "date-time"
        },
        "copyrightOwner": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CopyrightOwnerInfo"
          }
        },
        "copyrightOwnerImageID": {
          "type": "string"
        },
        "imageCreator": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageCreatorInfo"
          }
        },
        "imageCreatorImageID": {
          "type": "string"
        },
        "imageSupplier": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageSupplierInfo"
          }
        },
        "imageSupplierImageID": {
          "type": "string"
        },
        "licenseeImageID": {
          "type": "string"
        },
        "licenseeImageNotes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "otherImageInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "licenseID": {
          "type": "string"
        },
        "licensorTransactionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "licenseeTransactionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "licenseeProjectReference": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "licenseTransactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "reuse": {
          "type": "string"
        },
        "otherLicenseDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "otherLicenseInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "custom1": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom2": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom3": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom4": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom5": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom6": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom7": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom8": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom9": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "custom10": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "LicenseeInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "licenseeName": {
          "type": "string"
        },
        "licenseeID": {
          "type": "string"
        }
      }
    },
    "EndUserInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "endUserName": {
          "type": "string"
        },
        "endUserID": {
          "type": "string"
        }
      }
    },
    "LicensorInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "licensorName": {
          "type": "string"
        },
        "licensorID": {
          "type": "string"
        },
        "licensorStreetAddress": {
          "type": "string"
        },
        "licensorExtendedAddress": {
          "type": "string"
        },
        "licensorCity": {
          "type": "string"
        },
        "licensorRegion": {
          "type": "string"
        },
        "licensorPostalCode": {
          "type": "string"
        },
        "licensorCountry": {
          "type": "string"
        },
        "licensorTelephoneType1": {
          "type": "string"
        },
        "licensorTelephone1": {
          "type": "string"
        },
        "licensorTelephoneType2": {
          "type": "string"
        },
        "licensorTelephone2": {
          "type": "string"
        },
        "licensorEmail": {
          "type": "string"
        },
        "licensorURL": {
          "type": "string"
        }
      }
    },
    "CopyrightOwnerInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "copyrightOwnerName": {
          "type": "string"
        },
        "copyrightOwnerID": {
          "type": "string"
        }
      }
    },
    "ImageCreatorInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "imageCreatorName": {
          "type": "string"
        },
        "imageCreatorID": {
          "type": "string"
        }
      }
    },
    "ImageSupplierInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "imageSupplierName": {
          "type": "string"
        },
        "imageSupplierID": {
          "type": "string"
        }
      }
    },
    "Tiff": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "artist": {
          "type": "string"
        },
        "bitsPerSample": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "compression": {
          "$ref": "#/definitions/Compression"
        },
        "copyright": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dateTime": {
          "type": "string",
          "format": "date-time"
        },
        "imageDescription": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imageLength": {
          "type": "integer",
          "format": "int32"
        },
        "imageWidth": {
          "type": "integer",
          "format": "int32"
        },
        "make": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "orientation": {
          "$ref": "#/definitions/Orientation"
        },
        "photometricInterpretation": {
          "$ref": "#/definitions/PhotometricInterpretation"
        },
        "planarConfiguration": {
          "$ref": "#/definitions/PlanarConfiguration"
        },
        "primaryChromaticities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "referenceBlackWhite": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resolutionUnit": {
          "$ref": "#/definitions/ResolutionUnit"
        },
        "samplesPerPixel": {
          "type": "integer",
          "format": "int32"
        },
        "software": {
          "type": "string"
        },
        "transferFunction": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "whitePoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "xResolution": {
          "type": "string"
        },
        "yResolution": {
          "type": "string"
        },
        "yCbCrCoefficients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "yCbCrPositioning": {
          "$ref": "#/definitions/YCbCrPositioning"
        },
        "yCbCrSubSampling": {
          "$ref": "#/definitions/YCbCrSubSampling"
        },
        "nativeDigest": {
          "type": "string"
        }
      }
    },
    "Compression": {
      "type": "string",
      "description": "Corresponds to tiff.CompressionChoice",
      "x-enumNames": [
        "Uncompressed",
        "CCITT",
        "T4",
        "T6",
        "LZW",
        "OJPEG",
        "JPEG",
        "Deflate",
        "T82",
        "T43",
        "NeXT",
        "ARW",
        "RAW",
        "SRW",
        "Group3_1D",
        "PackBits",
        "ThunderScan",
        "KDC",
        "RasterPadding",
        "LineWork",
        "HighContinuous",
        "BinaryLineWork",
        "PixarFilm",
        "PixarLog",
        "DCS",
        "JBIG",
        "JPEG2000",
        "NEF",
        "JBIG2",
        "DCR",
        "PEF"
      ],
      "enum": [
        "Uncompressed",
        "CCITT",
        "T4",
        "T6",
        "LZW",
        "OJPEG",
        "JPEG",
        "Deflate",
        "T82",
        "T43",
        "NeXT",
        "ARW",
        "RAW",
        "SRW",
        "Group3_1D",
        "PackBits",
        "ThunderScan",
        "KDC",
        "RasterPadding",
        "LineWork",
        "HighContinuous",
        "BinaryLineWork",
        "PixarFilm",
        "PixarLog",
        "DCS",
        "JBIG",
        "JPEG2000",
        "NEF",
        "JBIG2",
        "DCR",
        "PEF"
      ]
    },
    "Orientation": {
      "type": "string",
      "description": "Corresponds to tiff.OrientationChoice",
      "x-enumNames": [
        "None",
        "TopRowLeftColumn",
        "TopRowRightColumn",
        "BottomRowLeftColumn",
        "BottomRowRightColumn",
        "LeftRowTopColumn",
        "RightRowTopColumn",
        "RightRowBottomColumn",
        "LeftRowBottomColumn",
        "Unknown"
      ],
      "enum": [
        "None",
        "TopRowLeftColumn",
        "TopRowRightColumn",
        "BottomRowLeftColumn",
        "BottomRowRightColumn",
        "LeftRowTopColumn",
        "RightRowTopColumn",
        "RightRowBottomColumn",
        "LeftRowBottomColumn",
        "Unknown"
      ]
    },
    "PhotometricInterpretation": {
      "type": "string",
      "description": "Corresponds to tiff.PhotometricInterpretationChoice",
      "x-enumNames": [
        "WhiteIsZero",
        "BlackIsZero",
        "RGB",
        "Palette",
        "TransparencyMask",
        "CMYK",
        "YCbCr",
        "CIELab",
        "ICCLab",
        "ITULab",
        "ColorFilterArray",
        "LogL",
        "LogLUV",
        "LinearRaw"
      ],
      "enum": [
        "WhiteIsZero",
        "BlackIsZero",
        "RGB",
        "Palette",
        "TransparencyMask",
        "CMYK",
        "YCbCr",
        "CIELab",
        "ICCLab",
        "ITULab",
        "ColorFilterArray",
        "LogL",
        "LogLUV",
        "LinearRaw"
      ]
    },
    "PlanarConfiguration": {
      "type": "string",
      "description": "Corresponds to tiff.PlanarConfigurationChoice",
      "x-enumNames": [
        "Chunky",
        "Planar",
        "Line"
      ],
      "enum": [
        "Chunky",
        "Planar",
        "Line"
      ]
    },
    "ResolutionUnit": {
      "type": "string",
      "description": "Corresponds to exif.FocalPlaneResolutionUnitChoice",
      "x-enumNames": [
        "None",
        "Inch",
        "Centimeter"
      ],
      "enum": [
        "None",
        "Inch",
        "Centimeter"
      ]
    },
    "YCbCrPositioning": {
      "type": "string",
      "description": "Corresponds to tiff.YCbCrPositioningChoice",
      "x-enumNames": [
        "Centered",
        "Cosited"
      ],
      "enum": [
        "Centered",
        "Cosited"
      ]
    },
    "YCbCrSubSampling": {
      "type": "string",
      "description": "Corresponds to tiff.YCbCrSubSamplingChoice",
      "x-enumNames": [
        "YCbCr111",
        "YCbCr422",
        "YCbCr420"
      ],
      "enum": [
        "YCbCr111",
        "YCbCr422",
        "YCbCr420"
      ]
    },
    "Xmp": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "baseURL": {
          "type": "string"
        },
        "createDate": {
          "type": "string",
          "format": "date-time"
        },
        "creatorTool": {
          "type": "string"
        },
        "identifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "label": {
          "type": "string"
        },
        "metadataDate": {
          "type": "string",
          "format": "date-time"
        },
        "modifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "nickname": {
          "type": "string"
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "thumbnails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpGImg"
          }
        },
        "pageInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpGImg"
          }
        }
      }
    },
    "Rating": {
      "type": "string",
      "description": "Corresponds to xmp.RatingChoice",
      "x-enumNames": [
        "Rejected",
        "Unrated",
        "One",
        "Two",
        "Three",
        "Four",
        "Five"
      ],
      "enum": [
        "Rejected",
        "Unrated",
        "One",
        "Two",
        "Three",
        "Four",
        "Five"
      ]
    },
    "XmpGImg": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": {
          "$ref": "#/definitions/ImgFormat"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "ImgFormat": {
      "type": "string",
      "description": "Corresponds to xmpGImg.FormatChoice",
      "x-enumNames": [
        "JPEG"
      ],
      "enum": [
        "JPEG"
      ]
    },
    "XmpBJ": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "jobRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        }
      }
    },
    "Job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "XmpDM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "absPeakAudioFilePath": {
          "type": "string"
        },
        "artist": {
          "type": "string"
        },
        "album": {
          "type": "string"
        },
        "altTapeName": {
          "type": "string"
        },
        "altTimecode": {
          "$ref": "#/definitions/TimeCode"
        },
        "audioChannelType": {
          "$ref": "#/definitions/AudioChannelType"
        },
        "audioCompressor": {
          "type": "string"
        },
        "audioSampleRate": {
          "type": "integer",
          "format": "int32"
        },
        "audioSampleType": {
          "$ref": "#/definitions/AudioSampleType"
        },
        "beatSpliceParams": {
          "$ref": "#/definitions/BeatSpliceStretch"
        },
        "cameraAngle": {
          "$ref": "#/definitions/CameraAngle"
        },
        "cameraLabel": {
          "type": "string"
        },
        "cameraModel": {
          "type": "string"
        },
        "cameraMove": {
          "$ref": "#/definitions/CameraMove"
        },
        "client": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "composer": {
          "type": "string"
        },
        "contributedMedia": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Media"
          }
        },
        "director": {
          "type": "string"
        },
        "directorPhotography": {
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/Time"
        },
        "engineer": {
          "type": "string"
        },
        "fileDataRate": {
          "type": "string"
        },
        "genre": {
          "type": "string"
        },
        "good": {
          "type": "boolean"
        },
        "instrument": {
          "type": "string"
        },
        "introTime": {
          "$ref": "#/definitions/Time"
        },
        "key": {
          "$ref": "#/definitions/AudioMusicalKey"
        },
        "logComment": {
          "type": "string"
        },
        "loop": {
          "type": "boolean"
        },
        "numberOfBeats": {
          "type": "number",
          "format": "decimal"
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "outCue": {
          "$ref": "#/definitions/Time"
        },
        "projectName": {
          "type": "string"
        },
        "projectRef": {
          "$ref": "#/definitions/ProjectLink"
        },
        "pullDown": {
          "$ref": "#/definitions/VideoPullDown"
        },
        "relativePeakAudioFilePath": {
          "type": "string"
        },
        "relativeTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time"
        },
        "resampleParams": {
          "$ref": "#/definitions/ResampleStretch"
        },
        "scaleType": {
          "$ref": "#/definitions/AudioMusicalScaleType"
        },
        "scene": {
          "type": "string"
        },
        "shotDate": {
          "type": "string",
          "format": "date-time"
        },
        "shotDay": {
          "type": "string"
        },
        "shotLocation": {
          "type": "string"
        },
        "shotName": {
          "type": "string"
        },
        "shotNumber": {
          "type": "string"
        },
        "shotSize": {
          "$ref": "#/definitions/ShotSize"
        },
        "speakerPlacement": {
          "type": "string"
        },
        "startTimecode": {
          "$ref": "#/definitions/TimeCode"
        },
        "stretchMode": {
          "$ref": "#/definitions/AudioStretchMode"
        },
        "takeNumber": {
          "type": "integer",
          "format": "int32"
        },
        "tapeName": {
          "type": "string"
        },
        "tempo": {
          "type": "number",
          "format": "decimal"
        },
        "timeScaleParams": {
          "$ref": "#/definitions/TimeScaleStretch"
        },
        "timeSignature": {
          "$ref": "#/definitions/TimeSignature"
        },
        "trackNumber": {
          "type": "integer",
          "format": "int32"
        },
        "tracks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Track"
          }
        },
        "videoAlphaMode": {
          "$ref": "#/definitions/VideoAlphaMode"
        },
        "videoAlphaPremultipleColor": {
          "$ref": "#/definitions/XmpG"
        },
        "videoAlphaUnityIsTransparent": {
          "type": "boolean"
        },
        "videoColorSpace": {
          "$ref": "#/definitions/VideoColorSpace"
        },
        "videoCompressor": {
          "type": "string"
        },
        "videoFieldOrder": {
          "$ref": "#/definitions/VideoFieldOrder"
        },
        "videoFrameRate": {
          "$ref": "#/definitions/VideoFrameRate"
        },
        "videoFrameSize": {
          "$ref": "#/definitions/Dimension"
        },
        "videoPixelDepth": {
          "$ref": "#/definitions/VideoPixelDepth"
        },
        "videoPixelAspectRatio": {
          "type": "string"
        }
      }
    },
    "TimeCode": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "timeFormat": {
          "$ref": "#/definitions/TimeFormat"
        },
        "timeValue": {
          "type": "string"
        }
      }
    },
    "TimeFormat": {
      "type": "string",
      "description": "Corresponds to Timecode.TimeFormatChoice",
      "x-enumNames": [
        "Timecode24",
        "Timecode25",
        "Timecode2997Drop",
        "Timecode2997NonDrop",
        "Timecode30",
        "Timecode50",
        "Timecode5994Drop",
        "Timecode5994NonDrop",
        "Timecode60",
        "Timecode23976"
      ],
      "enum": [
        "Timecode24",
        "Timecode25",
        "Timecode2997Drop",
        "Timecode2997NonDrop",
        "Timecode30",
        "Timecode50",
        "Timecode5994Drop",
        "Timecode5994NonDrop",
        "Timecode60",
        "Timecode23976"
      ]
    },
    "AudioChannelType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioChannelTypeChoice",
      "x-enumNames": [
        "CHANNEL_MONO",
        "CHANNEL_STEREO",
        "CHANNEL_5_1",
        "CHANNEL_7_1",
        "CHANNEL_16",
        "CHANNEL_OTHER"
      ],
      "enum": [
        "CHANNEL_MONO",
        "CHANNEL_STEREO",
        "CHANNEL_5_1",
        "CHANNEL_7_1",
        "CHANNEL_16",
        "CHANNEL_OTHER"
      ]
    },
    "AudioSampleType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioSampleTypeChoice",
      "x-enumNames": [
        "SAMPLE_8_INT",
        "SAMPLE_16_INT",
        "SAMPLE_24_INT",
        "SAMPLE_32_INT",
        "SAMPLE_32_FLOAT",
        "SAMPLE_COMPRESSED",
        "SAMPLE_PACKED",
        "SAMPLE_OTHER"
      ],
      "enum": [
        "SAMPLE_8_INT",
        "SAMPLE_16_INT",
        "SAMPLE_24_INT",
        "SAMPLE_32_INT",
        "SAMPLE_32_FLOAT",
        "SAMPLE_COMPRESSED",
        "SAMPLE_PACKED",
        "SAMPLE_OTHER"
      ]
    },
    "BeatSpliceStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "riseInDecibel": {
          "type": "number",
          "format": "decimal"
        },
        "riseInTimeDuration": {
          "$ref": "#/definitions/Time"
        },
        "useFileBeatsMarker": {
          "type": "boolean"
        }
      }
    },
    "Time": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "scale": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CameraAngle": {
      "type": "string",
      "description": "Corresponds to xmpDM.CameraAngleChoice",
      "x-enumNames": [
        "ANGLE_LOW",
        "ANGLE_EYE_LEVEL",
        "ANGLE_HIGH",
        "ANGLE_OVERHEAD_SHOT",
        "ANGLE_BIRDS_EYE_SHOT",
        "ANGLE_DUTCH",
        "ANGLE_POV",
        "ANGLE_OVER_THE_SHOULDER",
        "ANGLE_REACTION_SHOT"
      ],
      "enum": [
        "ANGLE_LOW",
        "ANGLE_EYE_LEVEL",
        "ANGLE_HIGH",
        "ANGLE_OVERHEAD_SHOT",
        "ANGLE_BIRDS_EYE_SHOT",
        "ANGLE_DUTCH",
        "ANGLE_POV",
        "ANGLE_OVER_THE_SHOULDER",
        "ANGLE_REACTION_SHOT"
      ]
    },
    "CameraMove": {
      "type": "string",
      "description": "Corresponds to xmpDM.CameraMoveChoice",
      "x-enumNames": [
        "MOVE_AERIAL",
        "MOVE_BOOM_UP",
        "MOVE_BOOM_DOWN",
        "MOVE_CRANE_UP",
        "MOVE_CRANE_DOWN",
        "MOVE_DOLLY_IN",
        "MOVE_DOLLY_OUT",
        "MOVE_PAN_LEFT",
        "MOVE_PAN_RIGHT",
        "MOVE_PEDESTAL_UP",
        "MOVE_PEDESTAL_DOWN",
        "MOVE_TILT_UP",
        "MOVE_TILT_DOWN",
        "MOVE_TRACKING",
        "MOVE_TRUCK_LEFT",
        "MOVE_TRUCK_RIGHT",
        "MOVE_ZOOM_IN",
        "MOVE_ZOOM_OUT"
      ],
      "enum": [
        "MOVE_AERIAL",
        "MOVE_BOOM_UP",
        "MOVE_BOOM_DOWN",
        "MOVE_CRANE_UP",
        "MOVE_CRANE_DOWN",
        "MOVE_DOLLY_IN",
        "MOVE_DOLLY_OUT",
        "MOVE_PAN_LEFT",
        "MOVE_PAN_RIGHT",
        "MOVE_PEDESTAL_UP",
        "MOVE_PEDESTAL_DOWN",
        "MOVE_TILT_UP",
        "MOVE_TILT_DOWN",
        "MOVE_TRACKING",
        "MOVE_TRUCK_LEFT",
        "MOVE_TRUCK_RIGHT",
        "MOVE_ZOOM_IN",
        "MOVE_ZOOM_OUT"
      ]
    },
    "Media": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "duration": {
          "$ref": "#/definitions/Time"
        },
        "managed": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/Time"
        },
        "track": {
          "type": "string"
        },
        "webStatement": {
          "type": "string"
        }
      }
    },
    "AudioMusicalKey": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioMusicalKeyChoice",
      "x-enumNames": [
        "KEY_C",
        "KEY_C_SHARP",
        "KEY_D",
        "KEY_D_SHARP",
        "KEY_E",
        "KEY_F",
        "KEY_F_SHARP",
        "KEY_G",
        "KEY_G_SHARP",
        "KEY_A",
        "KEY_A_SHARP",
        "KEY_B"
      ],
      "enum": [
        "KEY_C",
        "KEY_C_SHARP",
        "KEY_D",
        "KEY_D_SHARP",
        "KEY_E",
        "KEY_F",
        "KEY_F_SHARP",
        "KEY_G",
        "KEY_G_SHARP",
        "KEY_A",
        "KEY_A_SHARP",
        "KEY_B"
      ]
    },
    "Marker": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "comment": {
          "type": "string"
        },
        "cuePointParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cuePointType": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "probability": {
          "type": "number",
          "format": "decimal"
        },
        "speaker": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/MarkerType"
        }
      }
    },
    "MarkerType": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.Marker.TypeChoice",
      "x-enumNames": [
        "Chapter",
        "Cue",
        "Index",
        "Speech",
        "Track"
      ],
      "enum": [
        "Chapter",
        "Cue",
        "Index",
        "Speech",
        "Track"
      ]
    },
    "ProjectLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ProjectLinkType"
        }
      }
    },
    "ProjectLinkType": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.ProjectLink.TypeChoice",
      "x-enumNames": [
        "Movie",
        "Still",
        "Audio",
        "Custom"
      ],
      "enum": [
        "Movie",
        "Still",
        "Audio",
        "Custom"
      ]
    },
    "VideoPullDown": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoPullDownChoice",
      "x-enumNames": [
        "PULLDOWN_WSSWW",
        "PULLDOWN_SSWWW",
        "PULLDOWN_SWWWS",
        "PULLDOWN_WWWSS",
        "PULLDOWN_WWSSW",
        "PULLDOWN_WWWSW",
        "PULLDOWN_WWSWW",
        "PULLDOWN_WSWWW",
        "PULLDOWN_SWWWW",
        "PULLDOWN_WWWWS"
      ],
      "enum": [
        "PULLDOWN_WSSWW",
        "PULLDOWN_SSWWW",
        "PULLDOWN_SWWWS",
        "PULLDOWN_WWWSS",
        "PULLDOWN_WWSSW",
        "PULLDOWN_WWWSW",
        "PULLDOWN_WWSWW",
        "PULLDOWN_WSWWW",
        "PULLDOWN_SWWWW",
        "PULLDOWN_WWWWS"
      ]
    },
    "ResampleStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "quality": {
          "$ref": "#/definitions/Quality"
        }
      }
    },
    "Quality": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.resampleStretch.QualityChoice and Xmp.Media.timeScaleStretch.QualityChoice",
      "x-enumNames": [
        "High",
        "Medium",
        "Low"
      ],
      "enum": [
        "High",
        "Medium",
        "Low"
      ]
    },
    "AudioMusicalScaleType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioMusicalScaleTypeChoice",
      "x-enumNames": [
        "SCALE_MAJOR",
        "SCALE_MINOR",
        "SCALE_BOTH",
        "SCALE_NEITHER"
      ],
      "enum": [
        "SCALE_MAJOR",
        "SCALE_MINOR",
        "SCALE_BOTH",
        "SCALE_NEITHER"
      ]
    },
    "ShotSize": {
      "type": "string",
      "description": "Corresponds to xmpDM.ShotSizeChoice",
      "x-enumNames": [
        "SHOT_ECU",
        "SHOT_MCU",
        "SHOT_CU",
        "SHOT_MS",
        "SHOT_WS",
        "SHOT_MWS",
        "SHOT_EWS"
      ],
      "enum": [
        "SHOT_ECU",
        "SHOT_MCU",
        "SHOT_CU",
        "SHOT_MS",
        "SHOT_WS",
        "SHOT_MWS",
        "SHOT_EWS"
      ]
    },
    "AudioStretchMode": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioStretchModeChoice",
      "x-enumNames": [
        "STRETCH_FIXED_LENGTH",
        "STRETCH_TIME_SCALE",
        "STRETCH_RESAMPLE",
        "STRETCH_BEAT_SPLICE",
        "STRETCH_HYBRID"
      ],
      "enum": [
        "STRETCH_FIXED_LENGTH",
        "STRETCH_TIME_SCALE",
        "STRETCH_RESAMPLE",
        "STRETCH_BEAT_SPLICE",
        "STRETCH_HYBRID"
      ]
    },
    "TimeScaleStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "frameOverlappingPercentage": {
          "type": "number",
          "format": "decimal"
        },
        "frameSize": {
          "type": "number",
          "format": "decimal"
        },
        "quality": {
          "$ref": "#/definitions/Quality"
        }
      }
    },
    "TimeSignature": {
      "type": "string",
      "description": "Corresponds to xmpDM.TimeSignatureChoice",
      "x-enumNames": [
        "TIME_2_4",
        "TIME_3_4",
        "TIME_4_4",
        "TIME_5_4",
        "TIME_7_4",
        "TIME_6_8",
        "TIME_9_8",
        "TIME_12_8",
        "TIME_OTHER"
      ],
      "enum": [
        "TIME_2_4",
        "TIME_3_4",
        "TIME_4_4",
        "TIME_5_4",
        "TIME_7_4",
        "TIME_6_8",
        "TIME_9_8",
        "TIME_12_8",
        "TIME_OTHER"
      ]
    },
    "Track": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "frameRate": {
          "type": "string"
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "trackName": {
          "type": "string"
        },
        "trackType": {
          "$ref": "#/definitions/MarkerType"
        }
      }
    },
    "VideoAlphaMode": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoAlphaModeChoice",
      "x-enumNames": [
        "ALPHA_MODE_STRAIGHT",
        "ALPHA_MODE_PREMULTIPLIED",
        "ALPHA_MODE_NONE"
      ],
      "enum": [
        "ALPHA_MODE_STRAIGHT",
        "ALPHA_MODE_PREMULTIPLIED",
        "ALPHA_MODE_NONE"
      ]
    },
    "XmpG": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "a": {
          "type": "integer",
          "format": "int32"
        },
        "b": {
          "type": "integer",
          "format": "int32"
        },
        "l": {
          "type": "number",
          "format": "decimal"
        },
        "black": {
          "type": "number",
          "format": "decimal"
        },
        "cyan": {
          "type": "number",
          "format": "decimal"
        },
        "magenta": {
          "type": "number",
          "format": "decimal"
        },
        "yellow": {
          "type": "number",
          "format": "decimal"
        },
        "blue": {
          "type": "integer",
          "format": "int32"
        },
        "green": {
          "type": "integer",
          "format": "int32"
        },
        "red": {
          "type": "integer",
          "format": "int32"
        },
        "mode": {
          "$ref": "#/definitions/ColorantMode"
        },
        "swatchName": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ColorantType"
        }
      }
    },
    "ColorantMode": {
      "type": "string",
      "description": "Corresponds to xmpG.ModeChoice",
      "x-enumNames": [
        "CMYK",
        "RGB",
        "LAB"
      ],
      "enum": [
        "CMYK",
        "RGB",
        "LAB"
      ]
    },
    "ColorantType": {
      "type": "string",
      "description": "Corresponds to xmpG.TypeChoice",
      "x-enumNames": [
        "Process",
        "Spot"
      ],
      "enum": [
        "Process",
        "Spot"
      ]
    },
    "VideoColorSpace": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoColorSpaceChoice",
      "x-enumNames": [
        "COLOR_SPACE_SRGB",
        "COLOR_SPACE_CCIR_601",
        "COLOR_SPACE_CCIR_709"
      ],
      "enum": [
        "COLOR_SPACE_SRGB",
        "COLOR_SPACE_CCIR_601",
        "COLOR_SPACE_CCIR_709"
      ]
    },
    "VideoFieldOrder": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoFieldOrderChoice",
      "x-enumNames": [
        "FIELD_ORDER_UPPER",
        "FIELD_ORDER_LOWER",
        "FIELD_ORDER_PROGRESSIVE"
      ],
      "enum": [
        "FIELD_ORDER_UPPER",
        "FIELD_ORDER_LOWER",
        "FIELD_ORDER_PROGRESSIVE"
      ]
    },
    "VideoFrameRate": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoFrameRateChoice",
      "x-enumNames": [
        "FRAME_RATE_24",
        "FRAME_RATE_NTSC",
        "FRAME_RATE_PAL"
      ],
      "enum": [
        "FRAME_RATE_24",
        "FRAME_RATE_NTSC",
        "FRAME_RATE_PAL"
      ]
    },
    "Dimension": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "height": {
          "type": "number",
          "format": "decimal"
        },
        "width": {
          "type": "number",
          "format": "decimal"
        },
        "unit": {
          "$ref": "#/definitions/Unit"
        }
      }
    },
    "Unit": {
      "type": "string",
      "description": "Corresponds to stDim.UnitChoice",
      "x-enumNames": [
        "Inch",
        "Millimeter",
        "Centimeter",
        "Pixel",
        "Pica",
        "Point"
      ],
      "enum": [
        "Inch",
        "Millimeter",
        "Centimeter",
        "Pixel",
        "Pica",
        "Point"
      ]
    },
    "VideoPixelDepth": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoPixelDepthChoice",
      "x-enumNames": [
        "PIXEL_DEPTH_8_INT",
        "PIXEL_DEPTH_16_INT",
        "PIXEL_DEPTH_24_INT",
        "PIXEL_DEPTH_32_INT",
        "PIXEL_DEPTH_32_FLOAT",
        "PIXEL_DEPTH_OTHER"
      ],
      "enum": [
        "PIXEL_DEPTH_8_INT",
        "PIXEL_DEPTH_16_INT",
        "PIXEL_DEPTH_24_INT",
        "PIXEL_DEPTH_32_INT",
        "PIXEL_DEPTH_32_FLOAT",
        "PIXEL_DEPTH_OTHER"
      ]
    },
    "Xmpidq": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "scheme": {
          "type": "string"
        }
      }
    },
    "XmpMM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "derivedFrom": {
          "$ref": "#/definitions/Reference"
        },
        "documentID": {
          "type": "string"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "ingredients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "instanceID": {
          "type": "string"
        },
        "managedFrom": {
          "$ref": "#/definitions/Reference"
        },
        "manager": {
          "type": "string"
        },
        "manageTo": {
          "type": "string"
        },
        "manageUI": {
          "type": "string"
        },
        "managerVariant": {
          "type": "string"
        },
        "originalDocumentID": {
          "type": "string"
        },
        "renditionClass": {
          "type": "string"
        },
        "renditionParams": {
          "type": "string"
        },
        "versionID": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionInfo2"
          }
        }
      }
    },
    "Reference": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "alternatePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "documentID": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "fromPart": {
          "type": "string"
        },
        "instanceID": {
          "type": "string"
        },
        "lastModifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "manager": {
          "type": "string"
        },
        "managerVariant": {
          "type": "string"
        },
        "manageTo": {
          "type": "string"
        },
        "manageUI": {
          "type": "string"
        },
        "maskMarkers": {
          "$ref": "#/definitions/MaskMarkers"
        },
        "originalDocumentID": {
          "type": "string"
        },
        "partMapping": {
          "type": "string"
        },
        "renditionClass": {
          "type": "string"
        },
        "renditionParams": {
          "type": "string"
        },
        "toPart": {
          "type": "string"
        },
        "versionID": {
          "type": "string"
        }
      }
    },
    "MaskMarkers": {
      "type": "string",
      "description": "Corresponds to stRef.MaskMarkersChoice",
      "x-enumNames": [
        "All",
        "None"
      ],
      "enum": [
        "All",
        "None"
      ]
    },
    "Event": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "action": {
          "$ref": "#/definitions/EventAction"
        },
        "changed": {
          "type": "string"
        },
        "instanceID": {
          "type": "string"
        },
        "parameters": {
          "type": "string"
        },
        "softwareAgent": {
          "type": "string"
        },
        "when": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EventAction": {
      "type": "string",
      "description": "Corresponds to stEvt.ActionChoice",
      "x-enumNames": [
        "Converted",
        "Copied",
        "Created",
        "Cropped",
        "Edited",
        "Filtered",
        "Formatted",
        "VersionUpdated",
        "Printed",
        "Published",
        "Managed",
        "Produced",
        "Resized",
        "Saved",
        "Derived"
      ],
      "enum": [
        "Converted",
        "Copied",
        "Created",
        "Cropped",
        "Edited",
        "Filtered",
        "Formatted",
        "VersionUpdated",
        "Printed",
        "Published",
        "Managed",
        "Produced",
        "Resized",
        "Saved",
        "Derived"
      ]
    },
    "VersionInfo2": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "comments": {
          "type": "string"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "modifier": {
          "type": "string"
        },
        "modifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "XmpNote": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hasExtendedXMP": {
          "type": "string"
        }
      }
    },
    "XmpRights": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "certificate": {
          "type": "string"
        },
        "marked": {
          "type": "boolean"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usageTerms": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "webStatement": {
          "type": "string"
        }
      }
    },
    "XmpTPg": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "colorants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpG"
          }
        },
        "fonts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Font"
          }
        },
        "maxPageSize": {
          "$ref": "#/definitions/Dimension"
        },
        "nPages": {
          "type": "integer",
          "format": "int32"
        },
        "plateNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Font": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "childFontFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "composite": {
          "type": "boolean"
        },
        "fontFace": {
          "type": "string"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontFileName": {
          "type": "string"
        },
        "fontName": {
          "type": "string"
        },
        "fontType": {
          "$ref": "#/definitions/FontType"
        },
        "versionString": {
          "type": "string"
        }
      }
    },
    "FontType": {
      "type": "string",
      "description": "Corresponds to stFnt.FontTypeChoice",
      "x-enumNames": [
        "TrueType",
        "Type1",
        "OpenType",
        "OpenTypeCFF"
      ],
      "enum": [
        "TrueType",
        "Type1",
        "OpenType",
        "OpenTypeCFF"
      ]
    },
    "ExifMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "exif": {
          "$ref": "#/definitions/Exif"
        },
        "exifAux": {
          "$ref": "#/definitions/ExifAux"
        }
      }
    },
    "Exif": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "apertureValue": {
          "type": "string"
        },
        "brightnessValue": {
          "type": "string"
        },
        "cfaPattern": {
          "$ref": "#/definitions/CFAPattern"
        },
        "colorSpace": {
          "$ref": "#/definitions/ColorSpace"
        },
        "componentsConfiguration": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "compressedBitsPerPixel": {
          "type": "string"
        },
        "contrast": {
          "$ref": "#/definitions/Contrast"
        },
        "customRendered": {
          "$ref": "#/definitions/CustomRendered"
        },
        "dateTimeOriginal": {
          "type": "string",
          "format": "date-time"
        },
        "dateTimeDigitized": {
          "type": "string",
          "format": "date-time"
        },
        "deviceSettingDescription": {
          "$ref": "#/definitions/DeviceSettings"
        },
        "digitalZoomRatio": {
          "type": "string"
        },
        "exifVersion": {
          "$ref": "#/definitions/ExifVersion"
        },
        "exposureBiasValue": {
          "type": "string"
        },
        "exposureIndex": {
          "type": "string"
        },
        "exposureMode": {
          "$ref": "#/definitions/ExposureMode"
        },
        "exposureProgram": {
          "$ref": "#/definitions/ExposureProgram"
        },
        "exposureTime": {
          "type": "string"
        },
        "fileSource": {
          "$ref": "#/definitions/FileSource"
        },
        "flash": {
          "$ref": "#/definitions/Flash"
        },
        "flashEnergy": {
          "type": "string"
        },
        "flashpixVersion": {
          "$ref": "#/definitions/FlashpixVersion"
        },
        "fNumber": {
          "type": "string"
        },
        "focalLength": {
          "type": "string"
        },
        "focalLengthIn35mmFilm": {
          "type": "integer",
          "format": "int32"
        },
        "focalPlaneResolutionUnit": {
          "$ref": "#/definitions/FocalPlaneResolutionUnit"
        },
        "focalPlaneXResolution": {
          "type": "string"
        },
        "focalPlaneYResolution": {
          "type": "string"
        },
        "gainControl": {
          "$ref": "#/definitions/GainControl"
        },
        "gpsAltitude": {
          "type": "string"
        },
        "gpsAltitudeRef": {
          "$ref": "#/definitions/GPSAltitudeRef"
        },
        "gpsAreaInformation": {
          "type": "string"
        },
        "gpsDestBearing": {
          "type": "string"
        },
        "gpsDestBearingRef": {
          "$ref": "#/definitions/GPSDestBearingRef"
        },
        "gpsDestDistance": {
          "type": "string"
        },
        "gpsDestDistanceRef": {
          "$ref": "#/definitions/GPSDestDistanceRef"
        },
        "gpsDestLatitude": {
          "type": "string"
        },
        "gpsDestLongitude": {
          "type": "string"
        },
        "gpsDifferential": {
          "$ref": "#/definitions/GPSDifferential"
        },
        "gpsdop": {
          "type": "string"
        },
        "gpsImgDirection": {
          "type": "string"
        },
        "gpsImgDirectionRef": {
          "$ref": "#/definitions/GPSImgDirectionRef"
        },
        "gpsCoordinate": {
          "$ref": "#/definitions/GPSCoordinate"
        },
        "gpsLatitude": {
          "type": "string"
        },
        "gpsLongitude": {
          "type": "string"
        },
        "gpsMapDatum": {
          "type": "string"
        },
        "gpsMeasureMode": {
          "type": "string"
        },
        "gpsProcessingMethod": {
          "type": "string"
        },
        "gpsSatellites": {
          "type": "string"
        },
        "gpsSpeed": {
          "type": "string"
        },
        "gpsSpeedRef": {
          "$ref": "#/definitions/GPSSpeedRef"
        },
        "gpsStatus": {
          "$ref": "#/definitions/GPSStatus"
        },
        "gpsTimeStamp": {
          "type": "string",
          "format": "date-time"
        },
        "gpsTrack": {
          "type": "string"
        },
        "gpsTrackRef": {
          "type": "string"
        },
        "gpsVersionID": {
          "type": "string"
        },
        "imageUniqueID": {
          "type": "string"
        },
        "isoSpeedRatings": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "lightSource": {
          "$ref": "#/definitions/LightSource"
        },
        "maxApertureValue": {
          "type": "string"
        },
        "meteringMode": {
          "$ref": "#/definitions/MeteringMode"
        },
        "oecf": {
          "$ref": "#/definitions/OECF"
        },
        "pixelXDimension": {
          "type": "integer",
          "format": "int32"
        },
        "pixelYDimension": {
          "type": "integer",
          "format": "int32"
        },
        "relatedSoundFile": {
          "type": "string"
        },
        "saturation": {
          "$ref": "#/definitions/Saturation"
        },
        "sceneCaptureType": {
          "$ref": "#/definitions/SceneCaptureType"
        },
        "sceneType": {
          "$ref": "#/definitions/SceneType"
        },
        "sensingMethod": {
          "$ref": "#/definitions/SensingMethod"
        },
        "sharpness": {
          "$ref": "#/definitions/Sharpness"
        },
        "shutterSpeedValue": {
          "type": "string"
        },
        "spatialFrequencyResponse": {
          "$ref": "#/definitions/SFR"
        },
        "spectralSensitivity": {
          "type": "string"
        },
        "subjectArea": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "subjectDistance": {
          "type": "string"
        },
        "subjectDistanceRange": {
          "$ref": "#/definitions/SubjectDistanceRange"
        },
        "subjectLocation": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "userComment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "whiteBalance": {
          "$ref": "#/definitions/WhiteBalanceExif"
        },
        "nativeDigest": {
          "type": "string"
        }
      }
    },
    "CFAPattern": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ColorSpace": {
      "type": "string",
      "description": "Corresponds to exif.ColorSpaceChoice",
      "x-enumNames": [
        "None",
        "sRGB",
        "AdobeRGB",
        "Uncalibrated"
      ],
      "enum": [
        "None",
        "sRGB",
        "AdobeRGB",
        "Uncalibrated"
      ]
    },
    "Contrast": {
      "type": "string",
      "description": "Corresponds to exif.ContrastChoice",
      "x-enumNames": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ]
    },
    "CustomRendered": {
      "type": "string",
      "description": "Corresponds to exif.CustomRenderedChoice",
      "x-enumNames": [
        "NormalProcess",
        "CustomProcess"
      ],
      "enum": [
        "NormalProcess",
        "CustomProcess"
      ]
    },
    "DeviceSettings": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "settings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExifVersion": {
      "type": "string",
      "description": "Corresponds to exif.ExifVersionChoice",
      "x-enumNames": [
        "V210",
        "V220",
        "V221",
        "V222",
        "V230"
      ],
      "enum": [
        "V210",
        "V220",
        "V221",
        "V222",
        "V230"
      ]
    },
    "ExposureMode": {
      "type": "string",
      "description": "Corresponds to exif.ExposureModeChoice",
      "x-enumNames": [
        "Auto",
        "Manual",
        "AutoBracket"
      ],
      "enum": [
        "Auto",
        "Manual",
        "AutoBracket"
      ]
    },
    "ExposureProgram": {
      "type": "string",
      "description": "Corresponds to exif.ExposureProgramChoice",
      "x-enumNames": [
        "Undefined",
        "Manual",
        "NormalProgram",
        "AperturePriority",
        "ShutterPriority",
        "CreativeProgram",
        "ActionProgram",
        "PortraitMode",
        "LandscapeMode",
        "Unknown"
      ],
      "enum": [
        "Undefined",
        "Manual",
        "NormalProgram",
        "AperturePriority",
        "ShutterPriority",
        "CreativeProgram",
        "ActionProgram",
        "PortraitMode",
        "LandscapeMode",
        "Unknown"
      ]
    },
    "FileSource": {
      "type": "string",
      "description": "Corresponds to exif.FileSourceChoice",
      "x-enumNames": [
        "Other",
        "TransparentScanner",
        "ReflexScanner",
        "DSC"
      ],
      "enum": [
        "Other",
        "TransparentScanner",
        "ReflexScanner",
        "DSC"
      ]
    },
    "Flash": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "fired": {
          "type": "boolean"
        },
        "return": {
          "$ref": "#/definitions/FlashReturn"
        },
        "mode": {
          "$ref": "#/definitions/FlashMode"
        },
        "function": {
          "type": "boolean"
        },
        "redEyeMode": {
          "type": "boolean"
        }
      }
    },
    "FlashReturn": {
      "type": "string",
      "description": "Corresponds to Xmp.Structure.Flash.ReturnChoice",
      "x-enumNames": [
        "NoStrobeReturnDetection",
        "StrobeReturnLightNotDetected",
        "StrobeReturnLightDetected"
      ],
      "enum": [
        "NoStrobeReturnDetection",
        "StrobeReturnLightNotDetected",
        "StrobeReturnLightDetected"
      ]
    },
    "FlashMode": {
      "type": "string",
      "description": "Corresponds to Xmp.Structure.Flash.ModeChoice",
      "x-enumNames": [
        "Unknown",
        "CompulsoryFlashFiring",
        "CompulsoryFlashSuppression",
        "AutoMode"
      ],
      "enum": [
        "Unknown",
        "CompulsoryFlashFiring",
        "CompulsoryFlashSuppression",
        "AutoMode"
      ]
    },
    "FlashpixVersion": {
      "type": "string",
      "description": "Corresponds to exif.FlashpixVersionChoice",
      "x-enumNames": [
        "V100",
        "V101",
        "V110"
      ],
      "enum": [
        "V100",
        "V101",
        "V110"
      ]
    },
    "FocalPlaneResolutionUnit": {
      "type": "string",
      "description": "Corresponds to exif.FocalPlaneResolutionUnitChoice",
      "x-enumNames": [
        "None",
        "Inch",
        "Meter",
        "Centimeter",
        "Millimeter",
        "Micrometer"
      ],
      "enum": [
        "None",
        "Inch",
        "Meter",
        "Centimeter",
        "Millimeter",
        "Micrometer"
      ]
    },
    "GainControl": {
      "type": "string",
      "description": "Corresponds to exif.GainControlChoice",
      "x-enumNames": [
        "None",
        "LowGainUp",
        "HighGainUp",
        "LowGainDown",
        "HighGainDown"
      ],
      "enum": [
        "None",
        "LowGainUp",
        "HighGainUp",
        "LowGainDown",
        "HighGainDown"
      ]
    },
    "GPSAltitudeRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSAltitudeRefChoice",
      "x-enumNames": [
        "AboveSeaLevel",
        "BelowSeaLevel"
      ],
      "enum": [
        "AboveSeaLevel",
        "BelowSeaLevel"
      ]
    },
    "GPSDestBearingRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSDestBearingRefChoice",
      "x-enumNames": [
        "TrueDirection",
        "MagneticDirection"
      ],
      "enum": [
        "TrueDirection",
        "MagneticDirection"
      ]
    },
    "GPSDestDistanceRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSDestDistanceRefChoice",
      "x-enumNames": [
        "Kilometers",
        "Miles",
        "Knots"
      ],
      "enum": [
        "Kilometers",
        "Miles",
        "Knots"
      ]
    },
    "GPSDifferential": {
      "type": "string",
      "description": "Corresponds to exif.GPSDifferentialChoice",
      "x-enumNames": [
        "WithoutCorrection",
        "WithCorrection"
      ],
      "enum": [
        "WithoutCorrection",
        "WithCorrection"
      ]
    },
    "GPSImgDirectionRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSImgDirectionRefChoice",
      "x-enumNames": [
        "TrueDirection",
        "MagneticDirection"
      ],
      "enum": [
        "TrueDirection",
        "MagneticDirection"
      ]
    },
    "GPSCoordinate": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "lon": {
          "type": "number",
          "format": "double"
        },
        "lat": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GPSSpeedRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSSpeedRefChoice",
      "x-enumNames": [
        "KilometersPerHour",
        "MilesPerHour",
        "Knots"
      ],
      "enum": [
        "KilometersPerHour",
        "MilesPerHour",
        "Knots"
      ]
    },
    "GPSStatus": {
      "type": "string",
      "description": "Corresponds to exif.GPSStatusChoice",
      "x-enumNames": [
        "MeasurementInProgress",
        "MeasurementIsInteroperability"
      ],
      "enum": [
        "MeasurementInProgress",
        "MeasurementIsInteroperability"
      ]
    },
    "LightSource": {
      "type": "string",
      "description": "Corresponds to exif.LightSourceChoice",
      "x-enumNames": [
        "Unidentified",
        "Daylight",
        "Fluorescent",
        "Tungsten",
        "Flash",
        "FineWeather",
        "CloudyWeather",
        "Shade",
        "DaylightFluorescent",
        "DayWhiteFluorescent",
        "CoolWhiteFluorescent",
        "WhiteFluorescent",
        "StandardIlluminantA",
        "StandardIlluminantB",
        "StandardIlluminantC",
        "D55Illuminant",
        "D65Illuminant",
        "D75Illuminant",
        "D50Illuminant",
        "ISOStudioTungsten",
        "Other"
      ],
      "enum": [
        "Unidentified",
        "Daylight",
        "Fluorescent",
        "Tungsten",
        "Flash",
        "FineWeather",
        "CloudyWeather",
        "Shade",
        "DaylightFluorescent",
        "DayWhiteFluorescent",
        "CoolWhiteFluorescent",
        "WhiteFluorescent",
        "StandardIlluminantA",
        "StandardIlluminantB",
        "StandardIlluminantC",
        "D55Illuminant",
        "D65Illuminant",
        "D75Illuminant",
        "D50Illuminant",
        "ISOStudioTungsten",
        "Other"
      ]
    },
    "MeteringMode": {
      "type": "string",
      "description": "Corresponds to exif.MeteringModeChoice",
      "x-enumNames": [
        "Unidentified",
        "Average",
        "CenterWeightedAverage",
        "Spot",
        "MultiSpot",
        "Pattern",
        "Partial",
        "Reserved",
        "Other"
      ],
      "enum": [
        "Unidentified",
        "Average",
        "CenterWeightedAverage",
        "Spot",
        "MultiSpot",
        "Pattern",
        "Partial",
        "Reserved",
        "Other"
      ]
    },
    "OECF": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Saturation": {
      "type": "string",
      "description": "Corresponds to exif.SaturationChoice",
      "x-enumNames": [
        "Normal",
        "Low",
        "High",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Low",
        "High",
        "Unknown"
      ]
    },
    "SceneCaptureType": {
      "type": "string",
      "description": "Corresponds to exif.SceneCaptureTypeChoice",
      "x-enumNames": [
        "Standard",
        "Landscape",
        "Portrait",
        "NightScene"
      ],
      "enum": [
        "Standard",
        "Landscape",
        "Portrait",
        "NightScene"
      ]
    },
    "SceneType": {
      "type": "string",
      "description": "Corresponds to exif.SceneTypeChoice",
      "x-enumNames": [
        "DirectlyPhotographedImage"
      ],
      "enum": [
        "DirectlyPhotographedImage"
      ]
    },
    "SensingMethod": {
      "type": "string",
      "description": "Corresponds to exif.SensingMethodChoice",
      "x-enumNames": [
        "Undefined",
        "MonochromeArea",
        "OneChipColourAreaSensor",
        "TwoChipColourAreaSensor",
        "ThreeChipColourAreaSensor",
        "ColourSequentialAreaSensor",
        "MonochromeLinearArea",
        "TrilinearSensor",
        "ColourSequentialLinearSensor"
      ],
      "enum": [
        "Undefined",
        "MonochromeArea",
        "OneChipColourAreaSensor",
        "TwoChipColourAreaSensor",
        "ThreeChipColourAreaSensor",
        "ColourSequentialAreaSensor",
        "MonochromeLinearArea",
        "TrilinearSensor",
        "ColourSequentialLinearSensor"
      ]
    },
    "Sharpness": {
      "type": "string",
      "description": "Corresponds to exif.SharpnessChoice",
      "x-enumNames": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ]
    },
    "SFR": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32"
        },
        "rows": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SubjectDistanceRange": {
      "type": "string",
      "description": "Corresponds to exif.SubjectDistanceRangeChoice",
      "x-enumNames": [
        "Unknown",
        "Macro",
        "CloseView",
        "DistantView"
      ],
      "enum": [
        "Unknown",
        "Macro",
        "CloseView",
        "DistantView"
      ]
    },
    "WhiteBalanceExif": {
      "type": "string",
      "description": "Corresponds to exif.WhiteBalanceChoice",
      "x-enumNames": [
        "Auto",
        "Manual",
        "Unknown"
      ],
      "enum": [
        "Auto",
        "Manual",
        "Unknown"
      ]
    },
    "ExifAux": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "lens": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        }
      }
    },
    "AudioMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "audioStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AudioStream"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "AudioStream": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "bitRate": {
          "type": "string"
        },
        "bitRateMode": {
          "type": "string"
        },
        "channels": {
          "type": "string"
        },
        "channelPositions": {
          "type": "string"
        },
        "codec": {
          "type": "string"
        },
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "format": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "resolution": {
          "type": "integer",
          "format": "int32"
        },
        "samplingRate": {
          "type": "integer",
          "format": "int32"
        },
        "streamSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DocumentMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "characterCount",
        "characterCountWithSpaces",
        "lineCount",
        "pageCount",
        "slideCount",
        "paragraphCount",
        "revisionNumber"
      ],
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "applicationVersion": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "documentTitle": {
          "type": "string"
        },
        "characterCount": {
          "type": "integer",
          "format": "int32"
        },
        "characterCountWithSpaces": {
          "type": "integer",
          "format": "int32"
        },
        "lineCount": {
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "slideCount": {
          "type": "integer",
          "format": "int32"
        },
        "paragraphCount": {
          "type": "integer",
          "format": "int32"
        },
        "revisionNumber": {
          "type": "integer",
          "format": "int32"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imageTitles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "epsInfo": {
          "$ref": "#/definitions/EpsMetadata"
        },
        "embeddedFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileMetadata"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "EpsMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isRasterized",
        "widthInPoints",
        "heightInPoints"
      ],
      "properties": {
        "isRasterized": {
          "type": "boolean"
        },
        "widthInPoints": {
          "type": "number",
          "format": "double"
        },
        "heightInPoints": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ImageMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "width",
        "height",
        "widthInInch",
        "heightInInch",
        "widthInCm",
        "heightInCm",
        "bitsPerPixel",
        "bitsPerChannel",
        "hasAlpha",
        "isIndexed",
        "isExtended",
        "horizontalResolution",
        "verticalResolution",
        "totalFrames",
        "totalUnspecifiedTiffExtraChannels",
        "hasExifData",
        "hasIptcData",
        "hasAdobeResourceData",
        "hasXmpData",
        "uncompressedSizeInBytes"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "widthInInch": {
          "type": "number",
          "format": "double"
        },
        "heightInInch": {
          "type": "number",
          "format": "double"
        },
        "widthInCm": {
          "type": "number",
          "format": "double"
        },
        "heightInCm": {
          "type": "number",
          "format": "double"
        },
        "colorSpace": {
          "type": "string"
        },
        "colorProfile": {
          "type": "string"
        },
        "bitsPerPixel": {
          "type": "integer",
          "format": "int32"
        },
        "bitsPerChannel": {
          "type": "integer",
          "format": "int32"
        },
        "channels": {
          "type": "string"
        },
        "pixelFormat": {
          "type": "string"
        },
        "hasAlpha": {
          "type": "boolean"
        },
        "isIndexed": {
          "type": "boolean"
        },
        "isExtended": {
          "type": "boolean"
        },
        "horizontalResolution": {
          "type": "number",
          "format": "double"
        },
        "verticalResolution": {
          "type": "number",
          "format": "double"
        },
        "totalFrames": {
          "type": "integer",
          "format": "int32"
        },
        "totalUnspecifiedTiffExtraChannels": {
          "type": "integer",
          "format": "int32"
        },
        "hasExifData": {
          "type": "boolean"
        },
        "hasIptcData": {
          "type": "boolean"
        },
        "hasAdobeResourceData": {
          "type": "boolean"
        },
        "hasXmpData": {
          "type": "boolean"
        },
        "uncompressedSizeInBytes": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "VideoMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "width",
        "height",
        "durationInSeconds"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "format": {
          "type": "string"
        },
        "codec": {
          "type": "string"
        },
        "overallBitrate": {
          "type": "integer",
          "format": "int32"
        },
        "videoStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VideoStream"
          }
        },
        "audioStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AudioStream"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "VideoStream": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "durationInSeconds"
      ],
      "properties": {
        "bitRate": {
          "type": "string"
        },
        "codec": {
          "type": "string"
        },
        "displayAspectRatio": {
          "type": "string"
        },
        "durationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "format": {
          "type": "string"
        },
        "frameCount": {
          "type": "integer",
          "format": "int32"
        },
        "frameRate": {
          "type": "number",
          "format": "double"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "language": {
          "type": "string"
        },
        "pixelAspectRatio": {
          "type": "number",
          "format": "double"
        },
        "resolution": {
          "type": "integer",
          "format": "int32"
        },
        "streamSize": {
          "type": "integer",
          "format": "int64"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "rotation": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DriveMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "location": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "audit": {
          "$ref": "#/definitions/DriveMetadataAudit"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "DriveMetadataAudit": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "type": "string"
        },
        "modified": {
          "type": "string"
        },
        "opened": {
          "type": "string"
        },
        "created": {
          "type": "string"
        }
      }
    },
    "OutputItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "outputSource"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "outputSource": {
          "$ref": "#/definitions/OutputSource"
        }
      }
    },
    "OutputSource": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Rendered",
        "Embedded"
      ],
      "enum": [
        "Rendered",
        "Embedded"
      ]
    },
    "FileTransferSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "searchBehaviours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "FileTransferSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfFileTransfer"
        }
      ]
    },
    "SearchBehaviourBaseResultOfFileTransfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfFileTransfer"
        }
      ]
    },
    "BaseResultOfFileTransfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileTransfer"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "FileTransfer": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "state"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "transferId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/FileTransferState"
        },
        "contentId": {
          "type": "string"
        }
      }
    },
    "Blacklist": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlacklistItem"
          }
        }
      }
    },
    "BlacklistItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "match": {
          "type": "string"
        }
      }
    },
    "FileTransferDeleteRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "transferId": {
          "type": "string"
        },
        "fileTransferIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileTransfer2ContentCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "transferId": {
          "type": "string"
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "contentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileTransferPartial2ContentCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "transferId": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileTransferCreateItem"
          }
        }
      }
    },
    "FileTransferCreateItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "fileId": {
          "type": "string"
        },
        "layerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "contentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "authorizationState"
      ],
      "properties": {
        "userRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRole"
          }
        },
        "comment": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/UserAddress"
        },
        "drives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Drive"
          }
        },
        "ownerTokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerToken"
          }
        },
        "authorizationState": {
          "$ref": "#/definitions/AuthorizationState"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserItem"
        }
      ]
    },
    "UserAddress": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "company": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "alternativeAddress": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "Drive": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "OwnerToken": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "The ownertoken id."
        },
        "userId": {
          "type": "string",
          "description": "The id of the user to whom this ownertoken currently belongs to."
        }
      }
    },
    "AuthorizationState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Active",
        "Review",
        "Locked",
        "Invited"
      ],
      "enum": [
        "Active",
        "Review",
        "Locked",
        "Invited"
      ]
    },
    "UserSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "start",
        "limit",
        "lifeCycleFilter",
        "debugMode"
      ],
      "properties": {
        "searchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported."
        },
        "searchBehaviours": {
          "type": "array",
          "description": "An optional list of search behaviours. All the passed behaviours will be applied",
          "items": {
            "$ref": "#/definitions/SearchBehaviour"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32",
          "default": 0
        },
        "limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32",
          "default": 30
        },
        "filter": {
          "$ref": "#/definitions/FilterBase"
        },
        "lifeCycleFilter": {
          "$ref": "#/definitions/LifeCycleFilter"
        },
        "userRightsFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRight"
          }
        },
        "debugMode": {
          "type": "boolean",
          "description": "Enable debug mode to get as result of the Searched additional debug information. Warning! It severely affects performance."
        }
      }
    },
    "UserSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "elapsedMilliseconds"
      ],
      "properties": {
        "elapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchBehaviourBaseResultOfUser"
        }
      ]
    },
    "SearchBehaviourBaseResultOfUser": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "isSearchStringRewritten"
      ],
      "properties": {
        "searchString": {
          "type": "string"
        },
        "isSearchStringRewritten": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfUser"
        }
      ]
    },
    "BaseResultOfUser": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "totalResults"
      ],
      "properties": {
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "pageToken": {
          "type": "string"
        },
        "queryDebugInformation": {
          "$ref": "#/definitions/QueryDebugInformation"
        }
      }
    },
    "User": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "userRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "Channel": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "sortOrder"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "sortOrder": {
          "type": "integer",
          "format": "int32"
        },
        "searchIndexId": {
          "type": "string",
          "description": "The search index id."
        },
        "schemaIds": {
          "type": "array",
          "description": "An id list of schemas with schema type content whose content documents should be found by the simple search.\nThe search by filters and aggregations are unaffected.",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "description": "An optional search filter. Limits the content document result set on each search and aggregation request.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterBase"
            }
          ]
        },
        "names": {
          "description": "Language specific names.",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "aggregations": {
          "type": "array",
          "description": "An optional list of aggregators. These aggregations are added by default on each aggregation requests.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "extendedSimpleSearchFields": {
          "type": "array",
          "description": "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.",
          "items": {
            "type": "string"
          }
        },
        "missingResultsDisplayPatterns": {
          "description": "Display pattern to use for rendering details when 0 results are returned",
          "allOf": [
            {
              "$ref": "#/definitions/TranslatedStringDictionary"
            }
          ]
        }
      }
    },
    "ContentsByIdsRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "authorizationState"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/UserAddress"
        },
        "authorizationState": {
          "$ref": "#/definitions/AuthorizationState"
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "Bearer": {
      "type": "oauth2",
      "description": "OAuth2",
      "name": "Authorization",
      "in": "header",
      "flow": "implicit",
      "authorizationUrl": "http://localhost:8081/connect/authorize",
      "scopes": {
        "picturepark_api": "Access to Picturepark API",
        "businessprocess_read": "Read business processes",
        "businessprocess_write": "Write business processes",
        "content_read": "Read content",
        "content_write": "Write content",
        "documenthistory_read": "Read document history",
        "documenthistory_write": "Write document history",
        "jsonschema_read": "Read json schemas",
        "listitem_read": "Read list items",
        "listitem_write": "Write list items",
        "output_read": "Read outputs",
        "output_write": "Write outputs",
        "permission_read": "Read permission sets",
        "permission_write": "Write permission sets",
        "profile_read": "Read profile",
        "profile_write": "Write profile",
        "schema_read": "Read schemas",
        "schema_write": "Write schemas",
        "serviceprovider_read": "Read service providers",
        "serviceprovider_write": "Write service providers",
        "share_read": "Read shares",
        "share_write": "Write shares",
        "transfer_read": "Read transfers",
        "transfer_write": "Write transfers",
        "user_read": "Read users",
        "user_write": "Write users"
      }
    }
  },
  "tags": [
    {
      "name": "Content",
      "description": "Endpoints to work with content.\r\n\r\nFor search / filtering: See [Search](#section/Search)\r\n\r\n- [Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ContentTests.cs)\r\n- [Code examples analyzers](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/AnalyzerTests.cs)\r\n"
    },
    {
      "name": "BusinessProcess",
      "description": "Endpoints to work with business processes.\r\n\r\nA business process is created when a long running server process is started and the API endpoint does not await the processing (e.g. batch updates of content).\r\n\r\nTo wait for the business process to complete, call the operation [WaitForCompletion](#operation/BusinessProcess_WaitForCompletion).\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/BusinessProcessTests.cs)\r\n"
    },
    {
      "name": "DocumentHistory",
      "description": "Endpoints to work with history of documents.\r\n\r\nMost entities provide a history of changes. E.g. update metadata of a content. You can see and search the history of documents.\r\n\r\nYou can use a diff [GetDifferenceLatest](#operation/DocumentHistory_GetDifferenceLatest) and [GetDifference](#operation/DocumentHistory_GetDifference) to get a json diff and see what exactly has changed.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/DocumentHistoryTests.cs)\r\n"
    },
    {
      "name": "JsonSchema",
      "description": "Endpoint to work with json schemas.\r\n\r\nYou are able to fetch a [Json Schema](http://json-schema.org/) from a schema in Picturepark.\r\nWith a Json schema you are able to validate your metadata before saving it.\r\n\r\nCurrently Draft 4 is supported. http://json-schema.org/specification-links.html#draft-4\r\n"
    },
    {
      "name": "ListItem",
      "description": "Endpoints to work with list items.\r\n\r\nList items have its own custom schema of type \"ListItem\". See [Schema](#tag/Schema)\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ListItemTests.cs)\r\n"
    },
    {
      "name": "LiveStream",
      "description": "Endpoints to work with live stream.\r\n\r\nENDPOINT CURRENTLY NOT EXPOSED. Use [ServiceProviders](https://www.nuget.org/packages/Picturepark.SDK.V1.ServiceProvider/) to get a live stream of messages.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/tree/master/samples/Picturepark.ServiceProvider.Example)\r\n"
    },
    {
      "name": "Schema",
      "description": "Endpoints to work with schemas.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/SchemaTests.cs)\r\n"
    },
    {
      "name": "Permission",
      "description": "Endpoints to work with permissions.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/PermissionTests.cs)\r\n"
    },
    {
      "name": "PublicAccess",
      "description": "Endpoints to work with public accessable ressources.\r\n\r\nNo need to pass an AccessToken in the header.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/PublicAccessTests.cs)\r\n"
    },
    {
      "name": "Share",
      "description": "Endpoints to work with shares.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ShareTests.cs)\r\n"
    },
    {
      "name": "ServiceProvider",
      "description": "Endpoints to work with service providers.\r\n\r\n[TODO: Create Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/)\r\n"
    },
    {
      "name": "Transfer",
      "description": "Endpoints to work with transfers.\r\n\r\nUsual process to import file as content:\r\n- Create transfer\r\n- Upload files to this transfer\r\n- ImportTransfer or PartialImportTransfer\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/TransferTests.cs)\r\n"
    },
    {
      "name": "User",
      "description": "Endpoints to work with users.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/UserTests.cs)\r\n"
    },
    {
      "name": "Output",
      "description": "Endpoints to work with content outputs.\r\n\r\nOutputs for contents are created on the import process. There are predefined outputs for each file-based content.\r\n\r\n- Original: The original file uploaded (exists always)\r\n- Preview: A preview of the file (1600*1600px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (120*90px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (240*240px in JPEG Format for previewing, exists if preview of format is supported)\r\n- ThumbnailSmall: A small preview of the file (320*320px in JPEG Format for previewing, exists if preview of format is supported)\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/OutputTests.cs)\r\n"
    },
    {
      "name": "Profile",
      "description": "Endpoints to work with currently logged in user profile.\r\n\r\n[Code examples](https://github.com/Picturepark/Picturepark.SDK.DotNet/blob/master/src/Picturepark.SDK.V1.Tests/Clients/ProfileTests.cs)\r\n"
    }
  ]
}